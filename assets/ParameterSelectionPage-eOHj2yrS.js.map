{"version":3,"file":"ParameterSelectionPage-eOHj2yrS.js","sources":["../../src/utils/parameterUtils.ts","../../src/pages/ParameterSelectionPage.tsx"],"sourcesContent":["/**\n * Parameter utility functions and types\n * Minimal utilities for parameter categorization and lookup\n */\n\nexport enum ParameterCategory {\n  PHYSICAL = 'physical',\n  HYDROCLIMATE = 'hydroclimate', \n  ENVIRONMENTAL = 'environmental',\n  SOCIOECONOMIC = 'socioeconomic',\n  SHORELINE = 'shoreline',\n  INFRASTRUCTURE = 'infrastructure',\n  PHYSICAL_GEOLOGICAL = 'physical_geological'\n}\n\nexport const PARAMETER_CATEGORY_LABELS: Record<ParameterCategory, string> = {\n  [ParameterCategory.PHYSICAL]: 'Physical',\n  [ParameterCategory.HYDROCLIMATE]: 'Hydroclimate',\n  [ParameterCategory.ENVIRONMENTAL]: 'Environmental', \n  [ParameterCategory.SOCIOECONOMIC]: 'Socioeconomic',\n  [ParameterCategory.SHORELINE]: 'Shoreline',\n  [ParameterCategory.INFRASTRUCTURE]: 'Infrastructure',\n  [ParameterCategory.PHYSICAL_GEOLOGICAL]: 'Physical/Geological'\n};\n\n/**\n * Parameter category mapping based on standard parameter names\n * Maps from StandardParameterNames to categories for quick lookup\n */\nexport const PARAMETER_CATEGORY_MAP: Record<string, ParameterCategory> = {\n  // Physical parameters\n  'coastal_geomorphology': ParameterCategory.PHYSICAL,\n  'coastal_slope': ParameterCategory.PHYSICAL,\n  'rock_type': ParameterCategory.PHYSICAL,\n  'beach_width': ParameterCategory.PHYSICAL,\n  'dune_width': ParameterCategory.PHYSICAL,\n  'median_grain_size': ParameterCategory.PHYSICAL_GEOLOGICAL,\n  'coastal_geotechnical_map': ParameterCategory.PHYSICAL_GEOLOGICAL,\n  \n  // Hydroclimate parameters\n  'sea_level_change': ParameterCategory.HYDROCLIMATE,\n  'mean_tide_range': ParameterCategory.HYDROCLIMATE,\n  'mean_wave_height': ParameterCategory.HYDROCLIMATE,\n  \n  // Shoreline parameters\n  'shoreline_change': ParameterCategory.SHORELINE,\n  'barrier_type': ParameterCategory.SHORELINE,\n  'shoreline_exposure': ParameterCategory.SHORELINE,\n  'sea_defences': ParameterCategory.SHORELINE,\n  \n  // Environmental parameters\n  'natural_protection': ParameterCategory.ENVIRONMENTAL,\n  'ecosystem_type': ParameterCategory.ENVIRONMENTAL,\n  'environmental_conservancy': ParameterCategory.ENVIRONMENTAL,\n  'interest_species': ParameterCategory.ENVIRONMENTAL,\n  'vegetation_distance': ParameterCategory.ENVIRONMENTAL,\n  'posidonia_oceanica': ParameterCategory.ENVIRONMENTAL,\n  \n  // Socioeconomic parameters\n  'population_density': ParameterCategory.SOCIOECONOMIC,\n  'economic_value': ParameterCategory.SOCIOECONOMIC,\n  'land_use': ParameterCategory.SOCIOECONOMIC,\n  'building_coast_ratio': ParameterCategory.SOCIOECONOMIC,\n  'sociocultural_heritage': ParameterCategory.SOCIOECONOMIC,\n  'cultural_heritage': ParameterCategory.SOCIOECONOMIC,\n  'use_of_territory': ParameterCategory.SOCIOECONOMIC,\n  'commercial_properties': ParameterCategory.SOCIOECONOMIC,\n  'residential_properties': ParameterCategory.SOCIOECONOMIC,\n  \n  // Infrastructure parameters\n  'infrastructure_density': ParameterCategory.INFRASTRUCTURE,\n  'distance_built_structures': ParameterCategory.INFRASTRUCTURE\n};\n\n/**\n * Get parameter category from standard parameter name\n */\nexport function getParameterCategory(standardName: string): { category: ParameterCategory; label: string } {\n  const category = PARAMETER_CATEGORY_MAP[standardName] || ParameterCategory.PHYSICAL;\n  return {\n    category,\n    label: PARAMETER_CATEGORY_LABELS[category]\n  };\n}\n\n/**\n * Get parameter category counts from a list of standard parameter names\n */\nexport function getParameterCategoryCounts(standardNames: string[]): Record<string, number> {\n  const counts: Record<string, number> = {};\n  \n  standardNames.forEach(name => {\n    const categoryInfo = getParameterCategory(name);\n    const categoryLabel = categoryInfo.label;\n    counts[categoryLabel] = (counts[categoryLabel] || 0) + 1;\n  });\n  \n  return counts;\n}\n","import { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport type { Parameter } from '../types'\nimport type { FeatureCollection } from 'geojson'\nimport { indexedDBService } from '../services/indexedDBService'\nimport {\n  STANDARDIZED_COASTAL_INDICES,\n  getStandardizedIndexById,\n  validateIndexParameters\n} from '../config/indices'\nimport {\n  getParameterCategory,\n  getParameterCategoryCounts\n} from '../utils/parameterUtils'\n\nexport default function ParameterSelectionPage() {\n  const navigate = useNavigate()\n  const [selectedIndex, setSelectedIndex] = useState<string>('')\n  const [selectedFormula, setSelectedFormula] = useState<string>('')\n  const [error, setError] = useState<string | null>(null)\n\n  // Get the currently selected index\n  const currentIndex = selectedIndex ? getStandardizedIndexById(selectedIndex) : null\n\n  // Parameters are automatically set when index is selected\n  const selectedParameters = currentIndex ? currentIndex.requiredParameters : []\n\n  // Handle index change and reset formula selection\n  const handleIndexChange = (indexId: string) => {\n    setSelectedIndex(indexId)\n    setSelectedFormula('') // Reset formula when index changes\n    const newIndex = getStandardizedIndexById(indexId)\n    if (newIndex?.availableFormulas && newIndex.availableFormulas.length > 0) {\n      // Set default formula for indices with multiple options\n      setSelectedFormula(newIndex.availableFormulas[0].id)\n    } else if (newIndex) {\n      // Use the default formula for indices with single formula\n      setSelectedFormula(newIndex.formula)\n    }\n  }\n\n  // Get the effective formula (selected formula or default)\n  const effectiveFormula = selectedFormula || (currentIndex?.formula ?? '')\n\n  // Helper function to get parameter category counts for selected parameters\n  const getSelectedParameterCategoryCounts = () => {\n    const standardNames = selectedParameters.map(param => param.standardName)\n    return getParameterCategoryCounts(standardNames)\n  }\n\n\n  // Validate the current selection\n  const validation = currentIndex && selectedParameters.length > 0\n    ? validateIndexParameters(currentIndex.id, selectedParameters)\n    : { isValid: false, errors: [] }\n\n\n\n  const handleContinue = async () => {\n    if (!currentIndex) {\n      setError('Please select a coastal vulnerability index')\n      return\n    }\n\n    if (selectedParameters.length === 0) {\n      setError('No parameters available for the selected index')\n      return\n    }\n\n    try {\n      setError(null) // Clear any previous errors\n\n      // Convert IndexSpecificParameter to Parameter for storage compatibility\n      const parametersForStorage: Parameter[] = selectedParameters.map(param => ({\n        id: param.id,\n        name: param.indexSpecificName,\n        description: param.description,\n        type: param.type,\n        weight: param.weight,\n        enabled: true,\n        ...(param.unit && { unit: param.unit }),\n        // Use the index-specific ranking table directly\n        vulnerabilityRanges: param.rankingTable.map(range => ({\n          value: range.value,\n          min: null, // Will be parsed from criteria during value assignment\n          max: null, // Will be parsed from criteria during value assignment\n          label: range.label,\n          color: range.color,\n          criteria: range.criteria // Include the exact criteria from the index\n        })),\n        // Store the complete ranking table for reference\n        indexSpecificRankingTable: param.rankingTable,\n        // Additional fields for compatibility\n        category: 'physical',\n        standardId: param.standardName,\n        indexId: param.indexId,\n        indexSpecificName: param.indexSpecificName\n      }))\n\n      // Create parameter collection\n      const parameterCollection: FeatureCollection = {\n        type: 'FeatureCollection',\n        features: parametersForStorage.map(param => ({\n          type: 'Feature',\n          properties: param,\n          geometry: {\n            type: 'Point',\n            coordinates: [0, 0]\n          }\n        }))\n      }\n\n      // Create simplified index data for storage\n      const indexData = {\n        id: currentIndex.id,\n        name: currentIndex.name,\n        shortName: currentIndex.shortName,\n        description: currentIndex.description,\n        formula: effectiveFormula, // Use the selected formula\n        type: currentIndex.type,\n        citation: currentIndex.citation,\n        parameterCount: selectedParameters.length,\n        selectedAt: new Date().toISOString(),\n        // Store additional formula info for ICVI\n        availableFormulas: currentIndex.availableFormulas,\n        selectedFormula: selectedFormula,\n        resultClassification: currentIndex.resultClassification\n      }\n\n      const indexCollection: FeatureCollection = {\n        type: 'FeatureCollection',\n        features: [{\n          type: 'Feature',\n          properties: indexData,\n          geometry: {\n            type: 'Point',\n            coordinates: [0, 0]\n          }\n        }]\n      }\n\n      console.log('Saving index:', indexData)\n      console.log('Saving parameters:', parametersForStorage.length, 'parameters')\n\n      // Save index first, then parameters\n      await indexedDBService.storeShorelineData('current-index', indexCollection)\n      await indexedDBService.storeShorelineData('current-parameters', parameterCollection)\n\n      console.log('Successfully saved index and parameters')\n      navigate('/parameter-assignment')\n\n    } catch (err) {\n      console.error('Error saving index and parameters:', err)\n      setError(`Failed to save data: ${err instanceof Error ? err.message : 'Unknown error'}`)\n    }\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto mt-8 px-4\">\n      <h2 className=\"text-2xl font-bold text-center mb-8\">4. Index & Parameter Selection</h2>\n\n      {error && (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\">\n          {error}\n        </div>\n      )}\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 min-h-[700px]\">\n        {/* Left Panel - Index Selection */}\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6 flex flex-col\">\n          <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Select Coastal Vulnerability Index</h3>\n\n          <div className=\"mb-6\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Choose a standardized coastal vulnerability index:\n            </label>\n            <select\n              value={selectedIndex}\n              onChange={(e) => handleIndexChange(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-teal-500 focus:border-teal-500\"\n            >\n              <option value=\"\">Select an Index</option>\n              {STANDARDIZED_COASTAL_INDICES.map(index => (\n                <option key={index.id} value={index.id}>\n                  {index.shortName} - {index.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Formula Selection for indices with multiple formulas */}\n          {currentIndex?.availableFormulas && currentIndex.availableFormulas.length > 1 && (\n            <div className=\"mb-6\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Choose calculation method:\n              </label>\n              <select\n                value={selectedFormula}\n                onChange={(e) => setSelectedFormula(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-teal-500 focus:border-teal-500\"\n              >\n                {currentIndex.availableFormulas.map(formula => (\n                  <option key={formula.id} value={formula.id}>\n                    {formula.name}\n                  </option>\n                ))}\n              </select>\n              {selectedFormula && currentIndex.availableFormulas.find(f => f.id === selectedFormula) && (\n                <p className=\"mt-2 text-sm text-gray-600\">\n                  {currentIndex.availableFormulas.find(f => f.id === selectedFormula)?.description}\n                </p>\n              )}\n            </div>\n          )}\n\n          {currentIndex && (\n            <div className=\"bg-white border border-gray-300 rounded-lg shadow-sm p-6 mb-6\">\n              {/* Index Title */}\n              <div className=\"border-b border-gray-200 pb-3 mb-4\">\n                <h4 className=\"text-xl font-bold text-gray-900 mb-1\">{currentIndex.shortName}</h4>\n                <h5 className=\"text-sm font-medium text-gray-600\">{currentIndex.name}</h5>\n              </div>\n\n              {/* Index Description */}\n              <div className=\"mb-4\">\n                <p className=\"text-sm text-gray-700 leading-relaxed\">\n                  {currentIndex.description}\n                </p>\n                {currentIndex.notes && (\n                  <p className=\"text-sm text-gray-600 italic mt-2 leading-relaxed whitespace-pre-line\">\n                    {currentIndex.notes}\n                  </p>\n                )}\n              </div>\n\n              {/* Index Details */}\n              <div className=\"mb-4 text-sm space-y-3\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <span className=\"font-semibold text-gray-800\">Formula:</span>\n                    <span className=\"ml-2 inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                      {effectiveFormula}\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"font-semibold text-gray-800\">Parameters:</span>\n                    <span className=\"ml-2 inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800\">\n                      {currentIndex.requiredParameters.length}\n                    </span>\n                  </div>\n                </div>\n                <div>\n                  <span className=\"font-semibold text-gray-800\">Weights:</span>\n                  <span className=\"ml-2 inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                    {currentIndex.requiresEqualWeights ? 'equal' : 'variable'}\n                  </span>\n                </div>\n              </div>\n\n              {/* Parameter Categories Breakdown */}\n              <div className=\"mb-4\">\n                <h6 className=\"font-semibold text-gray-800 mb-2\">Parameter Categories:</h6>\n                <div className=\"flex flex-wrap gap-3 items-center\">\n                  {Object.entries(getSelectedParameterCategoryCounts()).map(([category, count]) => (\n                    <span key={category} className=\"text-sm text-gray-700\">\n                      {count} × <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                        {category}\n                      </span>\n                    </span>\n                  ))}\n                </div>\n              </div>\n\n              {/* Citations Section */}\n              <div className=\"border-t border-gray-200 pt-4\">\n                <h6 className=\"font-semibold text-gray-800 mb-2\">Citations:</h6>\n                <div className=\"text-xs text-gray-600 leading-relaxed whitespace-pre-line bg-gray-50 p-3 rounded border-l-4 border-blue-500\">\n                  {currentIndex.citation}\n\n                  {/* Classification Citation */}\n                  {currentIndex.citation && (\n                    <>\n                      {'\\n\\n'}\n                      Roukounis, C.N., Tsihrintzis, V.A. Indices of Coastal Vulnerability to Climate Change: a Review. Environ. Process. 9, 29 (2022). https://doi.org/10.1007/s40710-022-00577-9\n                    </>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {!currentIndex && (\n            <div className=\"text-center py-12 text-gray-500\">\n              <p className=\"text-base\">No index selected</p>\n              <p className=\"text-sm mt-2\">Choose an index above to see its parameters</p>\n            </div>\n          )}\n        </div>\n\n        {/* Right Panel - Parameter Ranking Tables */}\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6 flex flex-col\">\n          <div className=\"mb-6\">\n            <h3 className=\"text-lg font-medium text-gray-900\">Parameter Ranking Tables</h3>\n          </div>\n\n          {validation.errors.length > 0 && (\n            <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3 mb-4\">\n              <h4 className=\"text-sm font-medium text-yellow-800 mb-1\">Validation Issues:</h4>\n              <ul className=\"text-xs text-yellow-700 list-disc list-inside\">\n                {validation.errors.map((error, index) => (\n                  <li key={index}>{error}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          <div className=\"space-y-4 flex-grow overflow-y-auto\">\n            {selectedParameters.length === 0 ? (\n              <div className=\"text-center py-12 text-gray-500\">\n                <p className=\"text-base\">No index selected</p>\n                <p className=\"text-sm mt-2\">Choose an index to see parameter ranking tables</p>\n              </div>\n            ) : (\n              selectedParameters.map(param => {\n                const categoryInfo = getParameterCategory(param.standardName)\n                return (\n                  <div key={param.id} className=\"bg-white border border-gray-200 rounded-lg shadow-sm\">\n                    <div className=\"p-4\">\n                      {/* Header with name and weight */}\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div className=\"flex-grow min-w-0\">\n                          <h4 className=\"font-semibold text-gray-900 text-base truncate mb-1\">\n                            {param.indexSpecificName}\n                          </h4>\n                          <p className=\"text-xs text-gray-500 mb-2\">{param.description}</p>\n                          <div className=\"flex items-center gap-2 flex-wrap\">\n                            <span className=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                              {param.type === 'numerical' ? 'Numerical' : 'Categorical'}\n                            </span>\n                            {param.unit && (\n                              <span className=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800\">\n                                {param.unit}\n                              </span>\n                            )}\n                            <span className=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                              {categoryInfo.label}\n                            </span>\n                          </div>\n                        </div>\n\n                      </div>\n\n                    {/* Vulnerability Ranking Table */}\n                    <div className=\"mt-3 border border-gray-300 rounded-lg overflow-hidden bg-white\">\n                      <table className=\"w-full text-xs\">\n                        <thead>\n                          <tr className=\"bg-gray-100 border-b border-gray-300\">\n                            <th className=\"px-3 py-2 text-left font-semibold text-gray-800 w-12\">Rank</th>\n                            <th className=\"px-3 py-2 text-left font-semibold text-gray-800 w-20\">Level</th>\n                            <th className=\"px-3 py-2 text-left font-semibold text-gray-800\">Criteria</th>\n                          </tr>\n                        </thead>\n                        <tbody className=\"divide-y divide-gray-200\">\n                          {param.rankingTable.map((range, index) => (\n                            <tr key={index} className=\"hover:bg-gray-50 transition-colors\">\n                              <td className=\"px-3 py-2\">\n                                <span\n                                  className=\"inline-flex items-center justify-center w-6 h-6 rounded font-bold text-white text-xs\"\n                                  style={{ backgroundColor: range.color }}\n                                >\n                                  {range.value}\n                                </span>\n                              </td>\n                              <td className=\"px-3 py-2 font-medium text-gray-900\">{range.label}</td>\n                              <td className=\"px-3 py-2 text-gray-700 leading-relaxed\">{range.criteria}</td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                    </div>\n                  </div>\n                )\n              })\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mt-8 pt-6 border-t border-gray-200 flex justify-between\">\n        <button\n          onClick={() => navigate('/segment-table')}\n          className=\"px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50\"\n        >\n          Back to Segment Table\n        </button>\n        <button\n          onClick={handleContinue}\n          className=\"px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n        >\n          Continue to Parameter Assignment\n        </button>\n      </div>\n    </div>\n  )\n}\n"],"names":["useState","jsxs","jsx","Fragment","error"],"mappings":"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"}