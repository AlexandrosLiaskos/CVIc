{"version":3,"file":"AOISelectionPage-BUDqI5mA.js","sources":["../../src/components/maps/DrawableMap.tsx","../../src/pages/AOISelectionPage.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport type { FeatureCollection, LineString as GeoJSONLineString, GeoJsonObject, Feature } from 'geojson';\nimport type { ProcessedImage } from '../../services/imageProcessor';\n// Import Leaflet\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet-draw';\nimport 'leaflet-draw/dist/leaflet.draw.css';\nimport GeoRasterLayer from 'georaster-layer-for-leaflet';\n\ninterface DrawableMapProps {\n  images?: ProcessedImage[];\n  geoJSON?: FeatureCollection | null;\n  initialBounds?: number[] | null; // [minX, minY, maxX, maxY]\n  onLineStringCreate?: (lineString: GeoJSONLineString) => void;\n  onLineStringDelete?: (id: string) => void;\n  drawingEnabled?: boolean;\n  readOnly?: boolean;\n}\n\nconst DrawableMap: React.FC<DrawableMapProps> = ({\n  images = [],\n  geoJSON = null,\n  initialBounds = null,\n  onLineStringCreate,\n  onLineStringDelete,\n  drawingEnabled = true,\n  readOnly = false,\n}) => {\n  const mapRef = useRef<L.Map | null>(null);\n  const drawControlRef = useRef<L.Control.Draw | null>(null);\n  const geoJSONLayerRef = useRef<L.GeoJSON | null>(null);\n  const drawnItemsRef = useRef<L.FeatureGroup | null>(null);\n  const imageLayersRef = useRef<(L.Layer | L.Layer[])[]>([]); // Can be L.ImageOverlay, GeoRasterLayer, or array of layers\n  const [isMapInitialized, setIsMapInitialized] = useState(false);\n\n  // Initialize the map\n  useEffect(() => {\n    try {\n      const mapInstance = L.map('drawable-map', {\n        center: [20, 0],\n        zoom: 2,\n        zoomControl: true,\n      });\n      mapRef.current = mapInstance;\n\n      // Add base tile layer\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: 'Â© <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n      }).addTo(mapInstance);\n\n      // Create feature group for drawn items\n      const drawnItemsInstance = new L.FeatureGroup();\n      mapInstance.addLayer(drawnItemsInstance);\n      drawnItemsRef.current = drawnItemsInstance;\n\n      setIsMapInitialized(true);\n      console.log('DrawableMap: Map instance created.');\n\n    } catch (error) {\n      console.error(\"DrawableMap: Error initializing map:\", error);\n    }\n\n    // Cleanup function\n    return () => {\n      if (mapRef.current) {\n        console.log('DrawableMap: Cleaning up map instance.');\n        mapRef.current.remove();\n        mapRef.current = null;\n      }\n    };\n  }, []);\n\n  // Set initial bounds if provided\n  useEffect(() => {\n    const mapInstance = mapRef.current;\n    if (!mapInstance || !isMapInitialized) return;\n\n    if (initialBounds) {\n      console.log('DrawableMap: Setting initial bounds.');\n      mapInstance.fitBounds([\n        [initialBounds[1], initialBounds[0]], // Southwest corner [lat, lng]\n        [initialBounds[3], initialBounds[2]]  // Northeast corner [lat, lng]\n      ] as L.LatLngBoundsExpression);\n    }\n  }, [initialBounds, isMapInitialized]);\n\n  // Add satellite images to the map\n  useEffect(() => {\n    const mapInstance = mapRef.current;\n    if (!mapInstance || !isMapInitialized) return;\n\n    // Remove existing image layers\n    imageLayersRef.current.forEach(layer => {\n      if (Array.isArray(layer)) {\n        // Handle arrays of layers (for Sentinel-2 images)\n        layer.forEach(subLayer => {\n          mapInstance.removeLayer(subLayer);\n        });\n      } else {\n        // Handle single layers\n        mapInstance.removeLayer(layer);\n      }\n    });\n    imageLayersRef.current = [];\n\n    // Add new image layers\n    if (images && images.length > 0) {\n      console.log(`DrawableMap: Adding ${images.length} satellite images to map.`);\n\n      const newImageLayers: any[] = [];\n      const bounds = L.latLngBounds([]);\n\n      images.forEach(image => {\n        try {\n          let layer: L.Layer | L.Layer[];\n\n          // For Sentinel-2 images, we need special handling\n          if (image.metadata?.isSentinel) {\n            console.log(`Handling Sentinel-2 image ${image.id}`);\n\n            // For Sentinel-2 images, we'll create a special overlay\n            // that shows the image and a boundary box for the UTM zone\n\n            // First, create a rectangle showing the UTM zone bounds\n            const utmZoneBounds = [\n              [image.bounds[1], image.bounds[0]], // Southwest corner [lat, lng]\n              [image.bounds[3], image.bounds[2]]  // Northeast corner [lat, lng]\n            ];\n\n            // Create a rectangle showing the UTM zone\n            const utmZoneRect = L.rectangle(utmZoneBounds as L.LatLngBoundsExpression, {\n              color: '#ff7800',\n              weight: 2,\n              fillOpacity: 0.1,\n              interactive: true\n            }).addTo(mapInstance);\n\n            // Add popup with UTM zone info\n            const utmZone = image.metadata?.sentinelInfo?.utmZone || 'Unknown';\n            const band = image.metadata?.sentinelInfo?.band || 'Unknown';\n            const satellite = image.metadata?.sentinelInfo?.satellite || 'Sentinel-2';\n            const date = image.metadata?.sentinelInfo?.date || 'Unknown date';\n            const productType = image.metadata?.sentinelInfo?.productType || '';\n\n            // Create a more informative popup\n            utmZoneRect.bindPopup(`\n              <div style=\"text-align: center;\">\n                <h4>${image.name}</h4>\n                <p><b>${satellite}</b> Image</p>\n                <p>UTM Zone: <b>${utmZone}</b></p>\n                ${band !== 'Unknown' ? `<p>Band: <b>${band}</b></p>` : ''}\n                ${date !== 'Unknown date' ? `<p>Date: <b>${date}</b></p>` : ''}\n                ${productType ? `<p>Type: <b>${productType}</b></p>` : ''}\n              </div>\n            `);\n\n            // For JP2 files, we need to be more careful with the display\n            const isJP2 = image.metadata?.isJP2;\n\n            // Calculate an appropriate display area\n            let imageBounds;\n\n            // For JP2 files, use a more appropriate display area\n            if (isJP2) {\n              if (productType && productType.includes('True Color')) {\n                // For True Color Images (TCI), we can use a larger area\n                const centerLat = (image.bounds[1] + image.bounds[3]) / 2;\n                const centerLng = (image.bounds[0] + image.bounds[2]) / 2;\n                const latSpan = (image.bounds[3] - image.bounds[1]) * 0.2; // 20% of UTM zone\n                const lngSpan = (image.bounds[2] - image.bounds[0]) * 0.2;\n\n                imageBounds = [\n                  [centerLat - latSpan, centerLng - lngSpan], // Southwest corner\n                  [centerLat + latSpan, centerLng + lngSpan]  // Northeast corner\n                ];\n              } else {\n                // For other JP2 files, use a smaller central area (10% of the UTM zone)\n                const centerLat = (image.bounds[1] + image.bounds[3]) / 2;\n                const centerLng = (image.bounds[0] + image.bounds[2]) / 2;\n                const latSpan = (image.bounds[3] - image.bounds[1]) * 0.1;\n                const lngSpan = (image.bounds[2] - image.bounds[0]) * 0.1;\n\n                imageBounds = [\n                  [centerLat - latSpan, centerLng - lngSpan], // Southwest corner\n                  [centerLat + latSpan, centerLng + lngSpan]  // Northeast corner\n                ];\n              }\n            } else {\n              // For non-JP2 files, use a larger area (25% of the UTM zone)\n              const centerLat = (image.bounds[1] + image.bounds[3]) / 2;\n              const centerLng = (image.bounds[0] + image.bounds[2]) / 2;\n              const latSpan = (image.bounds[3] - image.bounds[1]) * 0.25;\n              const lngSpan = (image.bounds[2] - image.bounds[0]) * 0.25;\n\n              imageBounds = [\n                [centerLat - latSpan, centerLng - lngSpan], // Southwest corner\n                [centerLat + latSpan, centerLng + lngSpan]  // Northeast corner\n              ];\n            }\n\n            // Create a DOM Image element to check if the image loads properly\n            const img = new Image();\n            img.onload = () => {\n              console.log(`Image loaded successfully: ${image.name}`, img.width, img.height);\n            };\n            img.onerror = (e) => {\n              console.error(`Error loading image: ${image.name}`, e);\n\n              // Add a warning rectangle with text instead of showing a placeholder image\n              const warningRectangle = L.rectangle(imageBounds as L.LatLngBoundsExpression, {\n                color: \"#ff0000\",\n                weight: 2,\n                opacity: 0.8,\n                fillColor: \"#ffcccc\",\n                fillOpacity: 0.3\n              }).addTo(mapInstance);\n\n              // Add a warning tooltip\n              warningRectangle.bindTooltip(\"Image failed to load properly\", {\n                permanent: true,\n                direction: 'center',\n                className: 'image-error-tooltip'\n              }).openTooltip();\n\n              // Add to layers for cleanup\n              if (Array.isArray(layer)) {\n                layer.push(warningRectangle);\n              } else {\n                layer = [warningRectangle];\n              }\n            };\n            if (image.url) {\n              img.src = image.url;\n            }\n\n            // Create the image overlay only if we have a URL\n            if (!image.url) {\n              console.warn('No URL available for image overlay, skipping');\n              return;\n            }\n            const imageOverlay = L.imageOverlay(image.url, imageBounds as L.LatLngBoundsExpression, {\n              opacity: isJP2 ? 0.9 : 0.7, // Higher opacity for JP2 files to make them more visible\n              interactive: true\n            }).addTo(mapInstance);\n\n            // Add popup to the image overlay with more detailed information\n            imageOverlay.bindPopup(`\n              <div style=\"text-align: center;\">\n                <h4>${image.name}</h4>\n                <p><b>${satellite}</b> Image</p>\n                <p>UTM Zone: <b>${utmZone}</b></p>\n                ${band !== 'Unknown' ? `<p>Band: <b>${band}</b></p>` : ''}\n                ${date !== 'Unknown date' ? `<p>Date: <b>${date}</b></p>` : ''}\n                ${productType ? `<p>Type: <b>${productType}</b></p>` : ''}\n                ${isJP2 ? '<p><i>JP2 format - approximate positioning</i></p>' : ''}\n              </div>\n            `);\n\n            // Create a center marker to help with positioning\n            const centerLat = (image.bounds[1] + image.bounds[3]) / 2;\n            const centerLng = (image.bounds[0] + image.bounds[2]) / 2;\n            const centerMarker = L.marker([centerLat, centerLng], {\n              icon: L.divIcon({\n                html: '<div style=\"background-color: rgba(255,120,0,0.5); width: 10px; height: 10px; border-radius: 50%;\"></div>',\n                className: 'sentinel-center-marker',\n                iconSize: [10, 10]\n              })\n            }).addTo(mapInstance);\n\n            // Store all layers\n            layer = [utmZoneRect, imageOverlay, centerMarker];\n\n            // Extend bounds to include the UTM zone\n            bounds.extend(utmZoneBounds as L.LatLngBoundsExpression);\n\n          } else if (image.georaster) {\n            console.log(`Using GeoRaster layer for image ${image.id}`);\n\n            try {\n              // Create a GeoRaster layer with minimal configuration\n              const geoRasterLayer = new GeoRasterLayer({\n                georaster: image.georaster,\n                opacity: 1.0,\n                resolution: 256\n              });\n\n              // Add to map\n              geoRasterLayer.addTo(mapInstance);\n              console.log('GeoRasterLayer added to map');\n\n              // Get bounds from the georaster\n              const georasterBounds = [\n                [image.georaster.ymin, image.georaster.xmin], // Southwest corner\n                [image.georaster.ymax, image.georaster.xmax]  // Northeast corner\n              ];\n\n              console.log('GeoRaster bounds:', georasterBounds);\n              bounds.extend(georasterBounds as L.LatLngBoundsExpression);\n\n              // Add popup with image info\n              geoRasterLayer.bindPopup(`<b>${image.name}</b><br>Uploaded: ${new Date(image.timestamp).toLocaleString()}`);\n\n              // Store the layer\n              layer = geoRasterLayer;\n            } catch (error) {\n              console.error('Error creating GeoRasterLayer:', error);\n\n              // Fallback to simple image overlay if GeoRasterLayer fails\n              console.log('Falling back to simple ImageOverlay');\n\n              // Create a regular image overlay only if we have a URL\n              if (!image.url) {\n                console.warn('No URL available for fallback image overlay, skipping');\n                return;\n              }\n              layer = L.imageOverlay(image.url, [\n                [image.bounds[1], image.bounds[0]], // Southwest corner [lat, lng]\n                [image.bounds[3], image.bounds[2]]  // Northeast corner [lat, lng]\n              ], {\n                opacity: 0.9,\n                interactive: true\n              });\n\n              layer.addTo(mapInstance);\n\n              // Extend bounds\n              bounds.extend([\n                [image.bounds[1], image.bounds[0]], // Southwest corner\n                [image.bounds[3], image.bounds[2]]  // Northeast corner\n              ]);\n\n              // Add popup with image info\n              layer.bindPopup(`<b>${image.name}</b><br>Uploaded: ${new Date(image.timestamp).toLocaleString()}`);\n            }\n          } else {\n            console.log(`Using ImageOverlay for image ${image.id} with bounds:`, image.bounds);\n\n            // Create a regular image overlay only if we have a URL\n            if (!image.url) {\n              console.warn('No URL available for image overlay, skipping');\n              return;\n            }\n            layer = L.imageOverlay(image.url, [\n              [image.bounds[1], image.bounds[0]], // Southwest corner [lat, lng]\n              [image.bounds[3], image.bounds[2]]  // Northeast corner [lat, lng]\n            ], {\n              opacity: 0.7,\n              interactive: true\n            });\n\n            // Add to map\n            layer.addTo(mapInstance);\n\n            // Add popup with image info\n            layer.bindPopup(`<b>${image.name}</b><br>Uploaded: ${new Date(image.timestamp).toLocaleString()}`);\n\n            // Extend bounds\n            bounds.extend([\n              [image.bounds[1], image.bounds[0]], // Southwest corner\n              [image.bounds[3], image.bounds[2]]  // Northeast corner\n            ]);\n          }\n\n          // Store reference\n          newImageLayers.push(layer);\n\n        } catch (error) {\n          console.error(`DrawableMap: Error adding image ${image.id}:`, error);\n        }\n      });\n\n      // Store references to new layers\n      imageLayersRef.current = newImageLayers;\n\n      // If we have images and no initial bounds, fit the map to the images\n      if (newImageLayers.length > 0 && !initialBounds && bounds.isValid()) {\n        console.log('Fitting map to image bounds:', bounds);\n        mapInstance.fitBounds(bounds);\n      }\n    }\n\n    return () => {\n      // Cleanup function to remove image layers when component unmounts or images change\n      if (mapRef.current) {\n        imageLayersRef.current.forEach(layer => {\n          if (Array.isArray(layer)) {\n            // Handle arrays of layers (for Sentinel-2 images)\n            layer.forEach(subLayer => {\n              mapRef.current?.removeLayer(subLayer);\n            });\n          } else {\n            // Handle single layers\n            mapRef.current?.removeLayer(layer);\n          }\n        });\n      }\n    };\n  }, [images, isMapInitialized, initialBounds]);\n\n  // Add GeoJSON data to the map\n  useEffect(() => {\n    const mapInstance = mapRef.current;\n    if (!mapInstance || !isMapInitialized) return;\n\n    // Remove existing GeoJSON layer\n    if (geoJSONLayerRef.current) {\n      mapInstance.removeLayer(geoJSONLayerRef.current);\n      geoJSONLayerRef.current = null;\n    }\n\n    // Add new GeoJSON layer if data is provided\n    if (geoJSON && geoJSON.features && geoJSON.features.length > 0) {\n      console.log(`DrawableMap: Adding GeoJSON with ${geoJSON.features.length} features.`);\n\n      const geoJSONLayer = L.geoJSON(geoJSON as GeoJsonObject, {\n        style: {\n          color: '#ff7800',\n          weight: 5,\n          opacity: 0.65\n        },\n        onEachFeature: (feature, layer) => {\n          if (feature.properties) {\n            layer.bindTooltip(`ID: ${feature.properties.id || 'N/A'}`, { sticky: true });\n          }\n        }\n      }).addTo(mapInstance);\n\n      geoJSONLayerRef.current = geoJSONLayer;\n\n      // Fit bounds to GeoJSON if no initial bounds provided\n      if (!initialBounds) {\n        const bounds = geoJSONLayer.getBounds();\n        if (bounds.isValid()) {\n          mapInstance.fitBounds(bounds);\n        }\n      }\n    }\n  }, [geoJSON, isMapInitialized, initialBounds]);\n\n  // Set up drawing controls\n  useEffect(() => {\n    const mapInstance = mapRef.current;\n    const drawnItemsInstance = drawnItemsRef.current;\n\n    if (!mapInstance || !drawnItemsInstance || !isMapInitialized || readOnly) {\n      return;\n    }\n\n    console.log(`DrawableMap: Setting up draw controls (drawingEnabled: ${drawingEnabled}).`);\n\n    // Remove existing draw control if it exists\n    if (drawControlRef.current) {\n      console.log(\"DrawableMap: Removing previous draw control.\");\n      try { mapInstance.removeControl(drawControlRef.current); } catch(e) { console.warn(\"Minor error removing old draw control\", e); }\n      drawControlRef.current = null;\n    }\n\n    // Remove existing event listeners\n    mapInstance.off(L.Draw.Event.CREATED);\n    mapInstance.off(L.Draw.Event.DELETED);\n    mapInstance.off(L.Draw.Event.DRAWSTART);\n    mapInstance.off(L.Draw.Event.DRAWSTOP);\n\n    // Add new draw control if drawing is enabled\n    if (drawingEnabled) {\n      console.log(\"DrawableMap: Adding Leaflet Draw controls for LineString.\");\n\n      const drawControlInstance = new L.Control.Draw({\n        draw: {\n          polyline: {\n            shapeOptions: { color: '#ff7800', weight: 5, opacity: 0.65 }\n          },\n          polygon: false,\n          rectangle: false,\n          circle: false,\n          circlemarker: false,\n          marker: false\n        },\n        edit: {\n          featureGroup: drawnItemsInstance,\n          remove: true\n        }\n      });\n\n      mapInstance.addControl(drawControlInstance);\n      drawControlRef.current = drawControlInstance;\n\n      // Handle draw events\n      mapInstance.on(L.Draw.Event.CREATED, (e: any) => {\n        const layer = e.layer as L.Path;\n        const type = e.layerType;\n        console.log(`DrawableMap: Draw Event CREATED (${type})`);\n\n        if (type === 'polyline') {\n          try {\n            // Add the layer to the feature group\n            drawnItemsInstance.addLayer(layer);\n\n            // Convert to GeoJSON\n            // Type assertion for layer with toGeoJSON method\n            const layerWithGeoJSON = layer as unknown as { toGeoJSON: () => Feature };\n            if (typeof layerWithGeoJSON.toGeoJSON === 'function') {\n              const feature = layerWithGeoJSON.toGeoJSON();\n              if (feature.geometry.type === 'LineString' && onLineStringCreate) {\n                // Generate a unique ID for the line\n                const id = `line-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n                feature.properties = { ...feature.properties, id };\n\n                // Call the callback with the created LineString\n                onLineStringCreate(feature.geometry as unknown as GeoJSONLineString);\n\n                // Add a tooltip with the ID\n                layer.bindTooltip(`ID: ${id}`, { sticky: true });\n              }\n            }\n          } catch (error) {\n            console.error(\"DrawableMap: Error processing created geometry:\", error);\n          }\n        }\n      });\n\n      mapInstance.on(L.Draw.Event.DELETED, (e: any) => {\n        console.log(\"DrawableMap: Draw Event DELETED\");\n        const layers = e.layers;\n\n        layers.eachLayer((layer: L.Layer) => {\n          // Type assertion for layer with toGeoJSON method\n          const layerWithGeoJSON = layer as unknown as { toGeoJSON: () => Feature };\n          if (typeof layerWithGeoJSON.toGeoJSON === 'function' && onLineStringDelete) {\n            const feature = layerWithGeoJSON.toGeoJSON();\n            if (feature.properties && feature.properties.id) {\n              onLineStringDelete(feature.properties.id);\n            }\n          }\n        });\n      });\n    }\n\n    // Cleanup function\n    return () => {\n      console.log(\"DrawableMap: Cleaning up draw controls and listeners.\");\n      if (mapRef.current && drawControlRef.current) {\n        try { mapRef.current.removeControl(drawControlRef.current); } catch (e) { console.warn(\"Minor error removing draw control on effect cleanup\", e); }\n        drawControlRef.current = null;\n      }\n      if (mapRef.current) {\n        mapRef.current.off(L.Draw.Event.CREATED);\n        mapRef.current.off(L.Draw.Event.DELETED);\n        mapRef.current.off(L.Draw.Event.DRAWSTART);\n        mapRef.current.off(L.Draw.Event.DRAWSTOP);\n      }\n    };\n  }, [drawingEnabled, isMapInitialized, onLineStringCreate, onLineStringDelete, readOnly]);\n\n  return <div id=\"drawable-map\" style={{ height: '100%', width: '100%', minHeight: '500px' }}></div>;\n};\n\nDrawableMap.displayName = 'DrawableMapComponent';\nexport default DrawableMap;\n","import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ArrowLeftIcon, ArrowRightIcon, GlobeAltIcon } from '@heroicons/react/24/outline';\nimport DrawableMap from '../components/maps/DrawableMap';\nimport { ErrorAlert } from '../components/common/ErrorAlert';\nimport type { FeatureCollection } from 'geojson';\n\nexport default function AOISelectionPage() {\n  const navigate = useNavigate();\n  const [aoi] = useState<FeatureCollection | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  // This is a placeholder for the AOI selection functionality\n  // In a real implementation, we would need to:\n  // 1. Allow drawing polygons on the map\n  // 2. Store the selected AOI\n  // 3. Pass it to the Sentinel Hub API integration\n\n  const handleBack = () => {\n    navigate('/shoreline-source');\n  };\n\n  const handleContinue = () => {\n    if (!aoi || aoi.features.length === 0) {\n      setError('Please draw an area of interest before continuing.');\n      return;\n    }\n\n    // In a real implementation, we would store the AOI and navigate to the Sentinel Hub integration page\n    // For now, we'll just show an error message\n    setError('Sentinel Hub integration is not yet implemented. Please use the \"Upload Existing Images\" option instead.');\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8\">\n      {/* Header */}\n      <div className=\"text-center mb-10\">\n        <h2 className=\"text-3xl font-extrabold text-primary-900 tracking-tight\">\n          Select Area of Interest\n        </h2>\n        <p className=\"mt-3 text-lg text-gray-600\">\n          Draw a polygon on the map to define your area of interest for satellite image acquisition.\n        </p>\n      </div>\n\n      {/* Error Display */}\n      <ErrorAlert message={error} onClose={() => setError(null)} />\n\n      {/* Instructions */}\n      <div className=\"bg-blue-50 border-l-4 border-blue-400 p-4 mb-6 rounded-md\">\n        <div className=\"flex\">\n          <div className=\"flex-shrink-0\">\n            <GlobeAltIcon className=\"h-5 w-5 text-blue-400\" />\n          </div>\n          <div className=\"ml-3\">\n            <p className=\"text-sm text-blue-700\">\n              <strong>Note:</strong> The Sentinel Hub integration is currently under development.\n              Please use the \"Upload Existing Images\" option for now.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Map Container */}\n      <div className=\"bg-white p-4 rounded-lg shadow-md border border-gray-200 mb-6\">\n        <div className=\"h-[600px] border rounded-lg overflow-hidden\">\n          <DrawableMap\n            drawingEnabled={false}\n            readOnly={true}\n          />\n        </div>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex justify-between\">\n        <button\n          onClick={handleBack}\n          className=\"inline-flex items-center justify-center bg-gray-100 text-gray-700 font-semibold px-6 py-3 text-base rounded-lg shadow-sm hover:bg-gray-200 transition duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-gray-300 focus:ring-offset-2\"\n        >\n          <ArrowLeftIcon className=\"mr-2 h-5 w-5\" />\n          Back\n        </button>\n\n        <button\n          onClick={handleContinue}\n          className=\"inline-flex items-center justify-center bg-primary-600 text-white font-semibold px-8 py-3 text-base rounded-lg shadow-md hover:bg-primary-700 transition duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2\"\n        >\n          Continue\n          <ArrowRightIcon className=\"ml-2 h-5 w-5\" />\n        </button>\n      </div>\n    </div>\n  );\n}\n"],"names":["useRef","useState","useEffect","centerLat","centerLng","jsx","jsxs","GlobeAltIcon","ArrowLeftIcon","ArrowRightIcon"],"mappings":"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"}