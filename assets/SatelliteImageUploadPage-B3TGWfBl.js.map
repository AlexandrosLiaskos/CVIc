{"version":3,"file":"SatelliteImageUploadPage-B3TGWfBl.js","sources":["../../src/services/imageProcessor.ts","../../src/pages/SatelliteImageUploadPage.tsx"],"sourcesContent":["import { fromArrayBuffer } from 'geotiff';\n// Import georaster as default export\nimport parseGeoraster from 'georaster';\n\n// Define TypedArray type for better type checking\ntype TypedArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array | Uint8ClampedArray;\n\n// Maximum file size (1GB)\nconst MAX_FILE_SIZE = 1024 * 1024 * 1024;\n\n// Allowed image file types\nconst ALLOWED_TYPES = [\n  'image/tiff',\n  'image/geotiff',\n  'application/octet-stream', // Some GeoTIFF files might have this MIME type\n];\n\n// Sentinel-2 specific information\n// These are approximate bounds for different UTM zones\n// Each UTM zone is 6 degrees wide\nconst SENTINEL_UTM_ZONES: Record<string, [number, number, number, number]> = {\n  // UTM Zone 1 (180°W to 174°W)\n  '01': [-180, -80, -174, 84],\n  // UTM Zone 2 (174°W to 168°W)\n  '02': [-174, -80, -168, 84],\n  // UTM Zone 3 (168°W to 162°W)\n  '03': [-168, -80, -162, 84],\n  // UTM Zone 4 (162°W to 156°W)\n  '04': [-162, -80, -156, 84],\n  // UTM Zone 5 (156°W to 150°W)\n  '05': [-156, -80, -150, 84],\n  // UTM Zone 6 (150°W to 144°W)\n  '06': [-150, -80, -144, 84],\n  // UTM Zone 7 (144°W to 138°W)\n  '07': [-144, -80, -138, 84],\n  // UTM Zone 8 (138°W to 132°W)\n  '08': [-138, -80, -132, 84],\n  // UTM Zone 9 (132°W to 126°W)\n  '09': [-132, -80, -126, 84],\n  // UTM Zone 10 (126°W to 120°W)\n  '10': [-126, -80, -120, 84],\n  // UTM Zone 11 (120°W to 114°W)\n  '11': [-120, -80, -114, 84],\n  // UTM Zone 12 (114°W to 108°W)\n  '12': [-114, -80, -108, 84],\n  // UTM Zone 13 (108°W to 102°W)\n  '13': [-108, -80, -102, 84],\n  // UTM Zone 14 (102°W to 96°W)\n  '14': [-102, -80, -96, 84],\n  // UTM Zone 15 (96°W to 90°W)\n  '15': [-96, -80, -90, 84],\n  // UTM Zone 16 (90°W to 84°W)\n  '16': [-90, -80, -84, 84],\n  // UTM Zone 17 (84°W to 78°W)\n  '17': [-84, -80, -78, 84],\n  // UTM Zone 18 (78°W to 72°W)\n  '18': [-78, -80, -72, 84],\n  // UTM Zone 19 (72°W to 66°W)\n  '19': [-72, -80, -66, 84],\n  // UTM Zone 20 (66°W to 60°W)\n  '20': [-66, -80, -60, 84],\n  // UTM Zone 21 (60°W to 54°W)\n  '21': [-60, -80, -54, 84],\n  // UTM Zone 22 (54°W to 48°W)\n  '22': [-54, -80, -48, 84],\n  // UTM Zone 23 (48°W to 42°W)\n  '23': [-48, -80, -42, 84],\n  // UTM Zone 24 (42°W to 36°W)\n  '24': [-42, -80, -36, 84],\n  // UTM Zone 25 (36°W to 30°W)\n  '25': [-36, -80, -30, 84],\n  // UTM Zone 26 (30°W to 24°W)\n  '26': [-30, -80, -24, 84],\n  // UTM Zone 27 (24°W to 18°W)\n  '27': [-24, -80, -18, 84],\n  // UTM Zone 28 (18°W to 12°W)\n  '28': [-18, -80, -12, 84],\n  // UTM Zone 29 (12°W to 6°W)\n  '29': [-12, -80, -6, 84],\n  // UTM Zone 30 (6°W to 0°)\n  '30': [-6, -80, 0, 84],\n  // UTM Zone 31 (0° to 6°E)\n  '31': [0, -80, 6, 84],\n  // UTM Zone 32 (6°E to 12°E)\n  '32': [6, -80, 12, 84],\n  // UTM Zone 33 (12°E to 18°E)\n  '33': [12, -80, 18, 84],\n  // UTM Zone 34 (18°E to 24°E)\n  '34': [18, -80, 24, 84],\n  // UTM Zone 35 (24°E to 30°E)\n  '35': [24, -80, 30, 84],\n  // UTM Zone 36 (30°E to 36°E)\n  '36': [30, -80, 36, 84],\n  // UTM Zone 37 (36°E to 42°E)\n  '37': [36, -80, 42, 84],\n  // UTM Zone 38 (42°E to 48°E)\n  '38': [42, -80, 48, 84],\n  // UTM Zone 39 (48°E to 54°E)\n  '39': [48, -80, 54, 84],\n  // UTM Zone 40 (54°E to 60°E)\n  '40': [54, -80, 60, 84],\n  // UTM Zone 41 (60°E to 66°E)\n  '41': [60, -80, 66, 84],\n  // UTM Zone 42 (66°E to 72°E)\n  '42': [66, -80, 72, 84],\n  // UTM Zone 43 (72°E to 78°E)\n  '43': [72, -80, 78, 84],\n  // UTM Zone 44 (78°E to 84°E)\n  '44': [78, -80, 84, 84],\n  // UTM Zone 45 (84°E to 90°E)\n  '45': [84, -80, 90, 84],\n  // UTM Zone 46 (90°E to 96°E)\n  '46': [90, -80, 96, 84],\n  // UTM Zone 47 (96°E to 102°E)\n  '47': [96, -80, 102, 84],\n  // UTM Zone 48 (102°E to 108°E)\n  '48': [102, -80, 108, 84],\n  // UTM Zone 49 (108°E to 114°E)\n  '49': [108, -80, 114, 84],\n  // UTM Zone 50 (114°E to 120°E)\n  '50': [114, -80, 120, 84],\n  // UTM Zone 51 (120°E to 126°E)\n  '51': [120, -80, 126, 84],\n  // UTM Zone 52 (126°E to 132°E)\n  '52': [126, -80, 132, 84],\n  // UTM Zone 53 (132°E to 138°E)\n  '53': [132, -80, 138, 84],\n  // UTM Zone 54 (138°E to 144°E)\n  '54': [138, -80, 144, 84],\n  // UTM Zone 55 (144°E to 150°E)\n  '55': [144, -80, 150, 84],\n  // UTM Zone 56 (150°E to 156°E)\n  '56': [150, -80, 156, 84],\n  // UTM Zone 57 (156°E to 162°E)\n  '57': [156, -80, 162, 84],\n  // UTM Zone 58 (162°E to 168°E)\n  '58': [162, -80, 168, 84],\n  // UTM Zone 59 (168°E to 174°E)\n  '59': [168, -80, 174, 84],\n  // UTM Zone 60 (174°E to 180°E)\n  '60': [174, -80, 180, 84],\n};\n\nexport interface ProcessedImage {\n  id: string;\n  name: string;\n  url: string | null;\n  bounds: [number, number, number, number]; // [west, south, east, north]\n  timestamp: number;\n  metadata?: {\n    size?: number;\n    type?: string;\n    isSentinel?: boolean;\n    isCOG?: boolean; // Flag to indicate if this is a Cloud Optimized GeoTIFF\n    sentinelInfo?: {\n      utmZone?: string;\n      date?: string;\n      band?: string;\n      satellite?: string;\n      productType?: string;\n    };\n    [key: string]: any;\n  };\n  georaster?: any; // GeoRaster object for use with georaster-layer-for-leaflet\n  arrayBuffer?: ArrayBuffer; // Original array buffer for use with OpenLayers\n  blob?: Blob; // Blob version for IndexedDB storage\n  processedBlob?: Blob; // Processed raster data as blob for web display\n}\n\n// Serializable version for IndexedDB storage (excludes non-serializable properties)\nexport interface SerializableProcessedImage {\n  id: string;\n  name: string;\n  url: string | null;\n  bounds: [number, number, number, number]; // [west, south, east, north]\n  timestamp: number;\n  metadata?: {\n    size?: number;\n    type?: string;\n    isSentinel?: boolean;\n    isCOG?: boolean;\n    sentinelInfo?: {\n      utmZone?: string;\n      date?: string;\n      band?: string;\n      satellite?: string;\n      productType?: string;\n    };\n    [key: string]: any;\n  };\n  arrayBuffer?: ArrayBuffer; // Keep the array buffer for recreating georaster\n}\n\n/**\n * Validates a satellite image file\n */\nexport function validateImageFile(file: File): void {\n  if (!file) {\n    throw new Error('No file provided');\n  }\n\n  if (file.size > MAX_FILE_SIZE) {\n    throw new Error(`File size exceeds maximum limit of ${MAX_FILE_SIZE / (1024 * 1024)}MB`);\n  }\n\n  // Check if the file type is allowed or if the file extension is valid\n  const fileExtension = file.name.split('.').pop()?.toLowerCase();\n  const isValidExtension = ['tif', 'tiff'].includes(fileExtension || '');\n\n  if (!ALLOWED_TYPES.includes(file.type) && !isValidExtension) {\n    throw new Error('Invalid file type. Please upload a GeoTIFF file.');\n  }\n}\n\n/**\n * Try to extract Sentinel-2 specific information from the filename\n * Sentinel-2 filenames follow patterns like:\n * - S2A_MSIL1C_20220101T103241_N0301_R108_T32TPN_20220101T124837.SAFE\n * - S2A_MSIL2A_20230615T103031_N0509_R108_T32UME_20230615T180447.SAFE\n * - T34VDN_20250322T100041_TCI_10m.tif (True Color Image)\n */\nfunction extractSentinelInfo(filename: string): { utmZone?: string, date?: string, band?: string, satellite?: string, productType?: string } {\n  const info: { utmZone?: string, date?: string, band?: string, satellite?: string, productType?: string } = {};\n\n  // Try to extract UTM zone (e.g., T32TPN -> 32)\n  const utmMatch = filename.match(/T(\\d{2})[A-Z]{3}/);\n  if (utmMatch && utmMatch[1]) {\n    info.utmZone = utmMatch[1];\n  }\n\n  // Try to extract date (YYYYMMDD format)\n  const dateMatch = filename.match(/(\\d{8})T\\d{6}/);\n  if (dateMatch && dateMatch[1]) {\n    const dateStr = dateMatch[1];\n    // Format the date as YYYY-MM-DD for better display\n    info.date = `${dateStr.substring(0, 4)}-${dateStr.substring(4, 6)}-${dateStr.substring(6, 8)}`;\n  }\n\n  // Try to extract band (e.g., B08)\n  const bandMatch = filename.match(/B(\\d{2})/);\n  if (bandMatch && bandMatch[0]) {\n    info.band = bandMatch[0];\n  }\n\n  // Check for TCI (True Color Image)\n  if (filename.includes('TCI')) {\n    info.productType = 'True Color Image';\n  }\n\n  // Try to extract satellite (S2A or S2B)\n  const satelliteMatch = filename.match(/S2[AB]/);\n  if (satelliteMatch && satelliteMatch[0]) {\n    info.satellite = satelliteMatch[0];\n  } else if (filename.includes('_20')) {\n    // If filename contains a date but no explicit satellite marker,\n    // it's likely a Sentinel-2 product\n    info.satellite = 'Sentinel-2';\n  }\n\n  // If we couldn't extract a UTM zone but the filename contains numbers that might be coordinates\n  // Try to guess the UTM zone from any numbers that look like coordinates\n  if (!info.utmZone) {\n    // Look for patterns that might indicate coordinates\n    const coordMatch = filename.match(/(\\d{1,2})(?:N|S)_(\\d{1,3})(?:E|W)/i);\n    if (coordMatch) {\n      // const lat = parseInt(coordMatch[1]); // Not used\n      const lng = parseInt(coordMatch[2]);\n\n      // Rough calculation of UTM zone from longitude\n      // UTM zones are 6 degrees wide, starting at -180\n      if (!isNaN(lng)) {\n        const utmZone = Math.floor((lng + 180) / 6) + 1;\n        if (utmZone >= 1 && utmZone <= 60) {\n          info.utmZone = utmZone.toString().padStart(2, '0');\n        }\n      }\n    }\n  }\n\n  // Extract resolution if present (e.g., 10m, 20m, 60m)\n  const resolutionMatch = filename.match(/(\\d+)m/);\n  if (resolutionMatch && resolutionMatch[1]) {\n    info.productType = (info.productType || '') + ` ${resolutionMatch[1]}m resolution`;\n  }\n\n  return info;\n}\n\n/**\n * Extracts bounds from a GeoTIFF file\n */\nasync function extractBoundsFromGeoTIFF(arrayBuffer: ArrayBuffer, filename: string): Promise<[number, number, number, number]> {\n  try {\n    // Parse the GeoTIFF\n    const tiff = await fromArrayBuffer(arrayBuffer);\n\n    // Get the first image (most GeoTIFFs only have one)\n    const image = await tiff.getImage();\n    const geoKeys = image.getGeoKeys();\n\n    // Get the file's metadata\n    const fileDirectory = image.getFileDirectory();\n\n    // Try to get the bounding box, with fallback for problematic files\n    let xMin, yMin, xMax, yMax;\n    try {\n      [xMin, yMin, xMax, yMax] = image.getBoundingBox();\n\n      // Validate the bounding box - sometimes we get invalid values\n      if (!isFinite(xMin) || !isFinite(yMin) || !isFinite(xMax) || !isFinite(yMax) ||\n          xMin === xMax || yMin === yMax) {\n        throw new Error('Invalid bounding box values');\n      }\n    } catch (boundingBoxError) {\n      console.warn('Error getting bounding box directly, trying alternative method:', boundingBoxError);\n\n      // Try to calculate bounds from ModelPixelScale and ModelTiepoint\n      if (fileDirectory.ModelPixelScale && fileDirectory.ModelTiepoint) {\n        const [scaleX, scaleY] = fileDirectory.ModelPixelScale;\n        const [, , , originX, originY] = fileDirectory.ModelTiepoint;\n        const width = image.getWidth();\n        const height = image.getHeight();\n\n        xMin = originX;\n        yMax = originY;\n        xMax = originX + width * scaleX;\n        yMin = originY - height * scaleY;\n      } else {\n        // If we still can't get bounds, throw an error to be caught by the outer try/catch\n        throw new Error('Cannot determine bounds from GeoTIFF metadata');\n      }\n    }\n\n    console.log('GeoTIFF Metadata:', {\n      width: image.getWidth(),\n      height: image.getHeight(),\n      geoKeys,\n      boundingBox: [xMin, yMin, xMax, yMax],\n      resolution: image.getResolution(),\n      origin: fileDirectory.ModelTiepoint ? fileDirectory.ModelTiepoint.slice(3, 5) : 'Not available',\n      pixelScale: fileDirectory.ModelPixelScale || 'Not available'\n    });\n\n    // Return the bounding box as [west, south, east, north]\n    return [xMin, yMin, xMax, yMax];\n  } catch (error) {\n    console.error('Error extracting bounds from GeoTIFF:', error);\n\n    // Try to extract Sentinel-2 specific information from the filename\n    const sentinelInfo = extractSentinelInfo(filename);\n    console.log('Extracted Sentinel info from filename:', sentinelInfo);\n\n    if (sentinelInfo.utmZone && SENTINEL_UTM_ZONES[sentinelInfo.utmZone]) {\n      console.log(`Using predefined bounds for UTM zone ${sentinelInfo.utmZone}`);\n      return SENTINEL_UTM_ZONES[sentinelInfo.utmZone];\n    }\n\n    throw new Error('Failed to extract bounds from the image. It may not be properly georeferenced.');\n  }\n}\n\n/**\n * Creates a GeoRaster object from a GeoTIFF file\n */\nasync function createGeoRaster(arrayBuffer: ArrayBuffer, filename?: string): Promise<any> {\n  try {\n    // Validate input\n    if (!arrayBuffer || !(arrayBuffer instanceof ArrayBuffer)) {\n      throw new Error('Invalid array buffer provided to createGeoRaster');\n    }\n\n    console.log('Creating GeoRaster from array buffer of size:', arrayBuffer.byteLength);\n\n    // Parse the GeoTIFF\n    const tiff = await fromArrayBuffer(arrayBuffer);\n    const image = await tiff.getImage();\n    const width = image.getWidth();\n    const height = image.getHeight();\n\n    // Get bounding box with validation\n    let xMin, yMin, xMax, yMax;\n    try {\n      [xMin, yMin, xMax, yMax] = image.getBoundingBox();\n\n      // Validate the bounding box - sometimes we get invalid values\n      if (!isFinite(xMin) || !isFinite(yMin) || !isFinite(xMax) || !isFinite(yMax) ||\n          xMin === xMax || yMin === yMax) {\n        throw new Error('Invalid bounding box values');\n      }\n    } catch (boundingBoxError) {\n      console.warn('Error getting bounding box for GeoRaster, trying alternative method:', boundingBoxError);\n\n      // Try to calculate bounds from ModelPixelScale and ModelTiepoint\n      const fileDirectory = image.getFileDirectory();\n      if (fileDirectory.ModelPixelScale && fileDirectory.ModelTiepoint) {\n        const [scaleX, scaleY] = fileDirectory.ModelPixelScale;\n        const [, , , originX, originY] = fileDirectory.ModelTiepoint;\n\n        xMin = originX;\n        yMax = originY;\n        xMax = originX + width * scaleX;\n        yMin = originY - height * scaleY;\n      } else {\n        // If we still can't get bounds, throw an error to be caught by the outer try/catch\n        throw new Error('Cannot determine bounds from GeoTIFF metadata');\n      }\n    }\n\n    // Get the file's metadata\n    const fileDirectory = image.getFileDirectory();\n    const geoKeys = image.getGeoKeys();\n\n    // Log detailed information for debugging\n    console.log('GeoTIFF Details:', {\n      width,\n      height,\n      boundingBox: [xMin, yMin, xMax, yMax],\n      samplesPerPixel: fileDirectory.SamplesPerPixel || 1,\n      bitsPerSample: fileDirectory.BitsPerSample,\n      photometricInterpretation: fileDirectory.PhotometricInterpretation,\n      hasColorMap: !!fileDirectory.ColorMap,\n      projection: geoKeys?.ProjectedCSTypeGeoKey || 'Unknown',\n      modelTransformation: fileDirectory.ModelTransformationTag,\n      modelTiepoint: fileDirectory.ModelTiepoint,\n      modelPixelScale: fileDirectory.ModelPixelScale\n    });\n\n    // Read the raster data with options\n    const rasters = await image.readRasters({\n      interleave: true, // This can help with some GeoTIFF formats\n      pool: null, // Don't use a worker pool for small files\n      window: [0, 0, width, height] // Read the entire image\n    });\n\n    // Log some sample values from the rasters to understand the data range\n    const sampleValues = [];\n    for (let i = 0; i < Math.min(rasters.length, 3); i++) {\n      const band = rasters[i] as TypedArray;\n      if (band) {\n        const samples = [];\n        const step = Math.floor(band.length / 10);\n        for (let j = 0; j < band.length; j += step) {\n          if (samples.length < 10) samples.push(band[j]);\n        }\n\n        // Calculate min/max for this band\n        const validSamples = samples.filter(v => v !== null && v !== undefined);\n        const min = validSamples.length > 0 ? Math.min(...validSamples) : null;\n        const max = validSamples.length > 0 ? Math.max(...validSamples) : null;\n\n        sampleValues.push({ band: i, samples, min, max });\n      }\n    }\n    console.log('Sample raster values:', sampleValues);\n\n    // Determine the noDataValue\n    let noDataValue = 0;\n    if (fileDirectory.GDAL_NODATA !== undefined) {\n      noDataValue = parseFloat(fileDirectory.GDAL_NODATA);\n      console.log('Using GDAL_NODATA value:', noDataValue);\n    }\n\n    // For Sentinel-2 false color images, we need special handling\n    // let isSentinel2FalseColor = false; // Not used\n\n    if (filename && filename.includes('False_color')) {\n      // This is a Sentinel-2 false color image\n      console.log('Detected Sentinel-2 false color image');\n\n      // For Sentinel-2 data, we'll keep the original values\n      // The scaling will be done in the pixelValuesToColorFn function\n\n      // Log some sample values from the first few pixels\n      const sampleValues = [];\n      for (let i = 0; i < Math.min(rasters.length, 3); i++) {\n        const band = rasters[i];\n        if (band) {\n          // Check if band has slice method (TypedArray or Array)\n          if (band && typeof (band as any).slice === 'function') {\n            try {\n              const samples = Array.from((band as any).slice(0, 10));\n              sampleValues.push({ band: i, samples });\n            } catch (error) {\n              console.warn(`Could not slice band ${i}:`, error);\n              // Try to get samples without slice if possible\n              const samples = [];\n              if (typeof (band as any).length === 'number') {\n                for (let j = 0; j < Math.min((band as any).length, 10); j++) {\n                  if ((band as any)[j] !== undefined) {\n                    samples.push((band as any)[j]);\n                  }\n                }\n              }\n              sampleValues.push({ band: i, samples });\n            }\n          } else if (Array.isArray(band)) {\n            // Handle case where band is a regular array\n            const samples = band.slice(0, 10);\n            sampleValues.push({ band: i, samples });\n          } else {\n            // Handle case where band is something else\n            console.warn(`Band ${i} is not sliceable, type:`, typeof band);\n            sampleValues.push({ band: i, samples: [] });\n          }\n        }\n      }\n      console.log('Sentinel-2 sample values:', sampleValues);\n    }\n\n    // Calculate min/max values for each band\n    const mins: number[] = [];\n    const maxs: number[] = [];\n\n    for (let i = 0; i < Math.min(rasters.length, 3); i++) {\n      const band = rasters[i] as TypedArray;\n      if (band) {\n        // Sample values to estimate min/max (faster than scanning the whole array)\n        const samples: number[] = [];\n        const step = Math.max(1, Math.floor(band.length / 1000));\n        for (let j = 0; j < band.length; j += step) {\n          if (band[j] !== noDataValue && band[j] !== undefined && band[j] !== null) {\n            samples.push(band[j]);\n          }\n        }\n\n        // Calculate min/max for this band\n        const min = samples.length > 0 ? Math.min(...samples) : 0;\n        const max = samples.length > 0 ? Math.max(...samples) : 65535;\n\n        mins.push(min);\n        maxs.push(max);\n      }\n    }\n\n    console.log('Calculated min/max values for bands:', mins, maxs);\n\n    // Skip expensive array processing for large images to prevent browser freezing\n    console.log('Skipping array processing to improve performance for large images');\n\n    // Create a GeoRaster object with improved configuration\n    // Use the directly imported parseGeoraster function\n    console.log('Creating GeoRaster using arrayBuffer directly with these parameters:', {\n      noDataValue,\n      projection: 4326,\n      xmin: xMin,\n      ymin: yMin,\n      xmax: xMax,\n      ymax: yMax,\n      pixelWidth: (xMax - xMin) / width,\n      pixelHeight: (yMax - yMin) / height,\n      arrayBufferSize: arrayBuffer.byteLength,\n      minsLength: mins.length,\n      maxsLength: maxs.length\n    });\n\n    // For large images, skip the expensive 3D array conversion that freezes the browser\n    // Instead, use the original arrayBuffer directly with parseGeoraster\n    console.log('Using arrayBuffer directly to avoid memory issues with large images');\n\n    const georasterResult = await parseGeoraster(arrayBuffer, {\n      noDataValue: noDataValue,\n      projection: 4326, // WGS84\n      xmin: xMin,\n      ymin: yMin,\n      xmax: xMax,\n      ymax: yMax,\n      pixelWidth: (xMax - xMin) / width,\n      pixelHeight: (yMax - yMin) / height\n    });\n\n    // Log the created georaster for debugging\n    console.log('GeoRaster created with properties:', {\n      dimensions: georasterResult.dimensions,\n      pixelWidth: georasterResult.pixelWidth,\n      pixelHeight: georasterResult.pixelHeight,\n      noDataValue: georasterResult.noDataValue,\n      projection: georasterResult.projection,\n      numberOfRasters: georasterResult.numberOfRasters,\n      bounds: [georasterResult.xmin, georasterResult.ymin, georasterResult.xmax, georasterResult.ymax]\n    });\n\n    return georasterResult;\n  } catch (error) {\n    console.error('Error creating GeoRaster:', error);\n\n    // If we have a filename, check if it's a Sentinel-2 image\n    if (filename) {\n      const sentinelInfo = extractSentinelInfo(filename);\n      if (sentinelInfo.utmZone) {\n        console.warn('Could not create GeoRaster for Sentinel-2 image.');\n      }\n    }\n\n    throw new Error('Failed to create GeoRaster from the image.');\n  }\n}\n\n/**\n * Processes a satellite image file and returns a web-compatible version\n */\nexport async function processSatelliteImage(file: File): Promise<ProcessedImage> {\n  try {\n    validateImageFile(file);\n\n    // Add additional check for very large files that could freeze the browser\n    if (file.size > 500 * 1024 * 1024) { // 500MB\n      console.warn('Large file detected, processing with reduced functionality to prevent browser freeze');\n    }\n\n    // Read the file as an ArrayBuffer\n    const arrayBuffer = await file.arrayBuffer();\n\n    // Initialize variables\n    let bounds: [number, number, number, number];\n    let georaster: any = null;\n    let isSentinel = false;\n\n    // Check if this is a COG (Cloud Optimized GeoTIFF) file\n    const isCOG = file.name.includes('COG') ||\n                file.name.includes('cog') ||\n                file.name.includes('cloud_optimized') ||\n                file.name.includes('cloud-optimized');\n\n    // Extract Sentinel-2 information from filename\n    const sentinelInfo = extractSentinelInfo(file.name);\n\n    // Check if this is a Sentinel-2 image based on filename\n    if (file.name.includes('S2') || file.name.match(/T\\d{2}[A-Z]{3}/) ||\n        file.name.includes('TCI') || sentinelInfo.satellite) {\n      console.log('Detected Sentinel-2 image from filename');\n      isSentinel = true;\n    }\n\n    // Check if this is a Copernicus image\n    const isCopernicus = file.name.includes('Copernicus') ||\n                         file.name.includes('copernicus') ||\n                         file.type === 'image/tiff' ||\n                         file.type === 'image/geotiff';\n\n    if (isCopernicus) {\n      console.log('Detected Copernicus image based on filename or type');\n    }\n\n    // Try to extract bounds from the GeoTIFF\n    try {\n        bounds = await extractBoundsFromGeoTIFF(arrayBuffer, file.name);\n\n        // Try to create a GeoRaster object\n        try {\n          // Check if this is a Copernicus image\n          const isCopernicus = file.name.includes('Copernicus') ||\n                              file.name.includes('copernicus') ||\n                              file.type === 'image/tiff' ||\n                              file.type === 'image/geotiff';\n\n          if (isCopernicus) {\n            console.log('Using special handling for Copernicus GeoTIFF');\n            // For Copernicus images, we'll try a more robust approach\n            try {\n              // Try to create a GeoRaster for Copernicus data\n              const tiff = await fromArrayBuffer(arrayBuffer);\n              const image = await tiff.getImage();\n              const width = image.getWidth();\n              const height = image.getHeight();\n\n              // Get the bounding box\n              const [xMin, yMin, xMax, yMax] = image.getBoundingBox();\n\n              // Read the raster data with specific options for Copernicus\n              // const rasters = await image.readRasters({\n              //   interleave: true,\n              //   pool: null,\n              //   window: [0, 0, width, height]\n              // });\n\n              // Create a GeoRaster object using parseGeoraster with the original arrayBuffer\n              // This follows the working approach: parse the arrayBuffer directly\n              georaster = await parseGeoraster(arrayBuffer, {\n                noDataValue: 0,\n                projection: 4326, // WGS84\n                xmin: xMin,\n                ymin: yMin,\n                xmax: xMax,\n                ymax: yMax,\n                pixelWidth: (xMax - xMin) / width,\n                pixelHeight: (yMax - yMin) / height,\n              });\n\n              console.log('Copernicus GeoRaster created successfully:', georaster);\n            } catch (copernicusError) {\n              console.warn('Error with special Copernicus handling, falling back to standard approach:', copernicusError);\n              // Fall back to standard approach\n              georaster = await createGeoRaster(arrayBuffer, file.name);\n            }\n          } else {\n            // Standard approach for non-Copernicus images\n            georaster = await createGeoRaster(arrayBuffer, file.name);\n          }\n\n          console.log('GeoRaster created successfully:', georaster);\n\n          // If this is a Sentinel-2 false color image, let's try a different approach\n          if (file.name.includes('False_color')) {\n            console.log('This is a Sentinel-2 false color image, trying alternative GeoRaster creation');\n\n            // Try using the georaster library directly\n            try {\n              // Parse the GeoTIFF\n              const tiff = await fromArrayBuffer(arrayBuffer);\n              const image = await tiff.getImage();\n              const width = image.getWidth();\n              const height = image.getHeight();\n              const [xMin, yMin, xMax, yMax] = image.getBoundingBox();\n\n              // Read the raster data with options\n              const rasters = await image.readRasters();\n\n              // Use the already imported GeoRaster library\n              // No need to import again\n\n              // Calculate min/max values for each band\n              const altMins: number[] = [];\n              const altMaxs: number[] = [];\n\n              for (let i = 0; i < Math.min(rasters.length, 3); i++) {\n                const band = rasters[i] as TypedArray;\n                if (band) {\n                  // Sample values to estimate min/max\n                  const samples: number[] = [];\n                  const step = Math.max(1, Math.floor(band.length / 1000));\n                  for (let j = 0; j < band.length; j += step) {\n                    if (band[j] !== 0 && band[j] !== undefined && band[j] !== null) {\n                      samples.push(band[j]);\n                    }\n                  }\n\n                  // Calculate min/max for this band\n                  const min = samples.length > 0 ? Math.min(...samples) : 0;\n                  const max = samples.length > 0 ? Math.max(...samples) : 65535;\n\n                  altMins.push(min);\n                  altMaxs.push(max);\n                }\n              }\n\n              console.log('Alternative min/max values for bands:', altMins, altMaxs);\n\n              // Create a GeoRaster object with improved configuration using parseGeoraster\n              // Use the original arrayBuffer approach\n              const alternativeGeoraster = await parseGeoraster(arrayBuffer, {\n                noDataValue: 0,\n                projection: 4326, // WGS84\n                xmin: xMin,\n                ymin: yMin,\n                xmax: xMax,\n                ymax: yMax,\n                pixelWidth: (xMax - xMin) / width,\n                pixelHeight: (yMax - yMin) / height,\n                // mins: altMins.length > 0 ? altMins : undefined,\n                // maxs: altMaxs.length > 0 ? altMaxs : undefined,\n              });\n\n              console.log('Alternative GeoRaster created successfully:', alternativeGeoraster);\n\n              // Use the alternative georaster if it was created successfully\n              georaster = alternativeGeoraster;\n            } catch (alternativeError) {\n              console.warn('Could not create alternative GeoRaster, using the original one:', alternativeError);\n            }\n          }\n        } catch (geoRasterError) {\n          console.warn('Could not create GeoRaster, falling back to simple image overlay:', geoRasterError);\n        }\n      } catch (boundsError) {\n        console.warn('Could not extract bounds from image:', boundsError);\n\n        // If it's a Sentinel image and we have the UTM zone, use predefined bounds\n        if (isSentinel && sentinelInfo.utmZone && SENTINEL_UTM_ZONES[sentinelInfo.utmZone]) {\n          console.log(`Using predefined bounds for Sentinel-2 UTM zone ${sentinelInfo.utmZone}`);\n          bounds = SENTINEL_UTM_ZONES[sentinelInfo.utmZone];\n        } else {\n          // For non-Sentinel images or if we can't determine the UTM zone,\n          // default to a reasonable area (Europe)\n          console.log('Using default bounds (Europe)');\n          bounds = [-10, 35, 30, 60]; // Western Europe\n        }\n      }\n\n    // Create a unique ID for the image\n    const id = `image-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n\n    // Create a URL for the image only if we don't have a georaster\n    // If we have a georaster, we don't need the blob URL for rendering\n    let url: string | null = null;\n    if (!georaster) {\n      url = URL.createObjectURL(file);\n    }\n\n    return {\n      id,\n      name: file.name,\n      url,\n      bounds,\n      timestamp: Date.now(),\n      georaster,\n      // Store the original array buffer for GeoTIFF files (for OpenLayers)\n      arrayBuffer: arrayBuffer,\n      metadata: {\n        size: file.size,\n        type: file.type,\n        isSentinel,\n        isCOG,\n        sentinelInfo\n      }\n    };\n  } catch (error) {\n    console.error('Error processing satellite image:', error);\n    throw new Error(error instanceof Error ? error.message : 'Failed to process satellite image');\n  }\n}\n\n/**\n * Recreates a georaster object from stored ArrayBuffer data\n * This is used when retrieving images from IndexedDB where the georaster was excluded\n */\n/**\n * Recreates a georaster object from stored Blob data\n * This is used when retrieving images from IndexedDB where the georaster was excluded\n */\nexport async function recreateGeoRaster(blob: Blob, bounds: [number, number, number, number]): Promise<any> {\n  try {\n    if (!blob || !(blob instanceof Blob)) {\n      throw new Error('Invalid blob provided to recreateGeoRaster');\n    }\n\n    // Convert Blob back to ArrayBuffer\n    const arrayBuffer = await blob.arrayBuffer();\n    const [xMin, yMin, xMax, yMax] = bounds;\n    \n    // Parse the GeoTIFF to get dimensions\n    const tiff = await fromArrayBuffer(arrayBuffer);\n    const image = await tiff.getImage();\n    const width = image.getWidth();\n    const height = image.getHeight();\n\n    // Recreate the georaster using the same approach as in processSatelliteImage\n    const georasterResult = await parseGeoraster(arrayBuffer, {\n      noDataValue: 0,\n      projection: 4326, // WGS84\n      xmin: xMin,\n      ymin: yMin,\n      xmax: xMax,\n      ymax: yMax,\n      pixelWidth: (xMax - xMin) / width,\n      pixelHeight: (yMax - yMin) / height\n    });\n\n    console.log('GeoRaster recreated successfully from stored blob data');\n    return georasterResult;\n  } catch (error) {\n    console.error('Error recreating GeoRaster:', error);\n    throw new Error('Failed to recreate GeoRaster from stored data.');\n  }\n}\n\n/**\n * Releases resources associated with a processed image\n */\nexport function releaseProcessedImage(image: ProcessedImage): void {\n  // Revoke the object URL to free up memory\n  if (image.url) {\n    URL.revokeObjectURL(image.url);\n  }\n}\n","import { useState, useCallback, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ArrowLeftIcon, ArrowRightIcon, ArrowUpTrayIcon, XCircleIcon, PhotoIcon } from '@heroicons/react/24/outline';\nimport { processSatelliteImage, releaseProcessedImage } from '../services/imageProcessor';\nimport { indexedDBService } from '../services/indexedDBService';\nimport { ErrorAlert } from '../components/common/ErrorAlert';\nimport type { ProcessedImage } from '../services/imageProcessor';\n\nexport default function SatelliteImageUploadPage() {\n  const navigate = useNavigate();\n  const [images, setImages] = useState<ProcessedImage[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n\n  // Load any existing images from IndexedDB\n  useEffect(() => {\n    const loadImages = async () => {\n      try {\n        const savedImages = await indexedDBService.getAllSatelliteImages();\n        setImages(savedImages);\n      } catch (err) {\n        console.error('Error loading saved images:', err);\n        setError('Failed to load saved images. You can continue with new uploads.');\n      }\n    };\n\n    loadImages();\n\n    // Clean up object URLs when component unmounts\n    return () => {\n      images.forEach(image => {\n        releaseProcessedImage(image);\n      });\n    };\n  }, [images]);\n\n  const handleFileProcess = useCallback(async (file: File | null) => {\n    if (!file) return;\n\n    setError(null);\n    setLoading(true);\n\n    try {\n      const processedImage = await processSatelliteImage(file);\n\n      // Store the image in IndexedDB\n      await indexedDBService.storeSatelliteImage(processedImage.id, processedImage);\n\n      // Update the state with the new image\n      setImages(prevImages => [...prevImages, processedImage]);\n\n      console.log(\"Satellite image processed and stored successfully.\");\n    } catch (err) {\n      const message = err instanceof Error\n        ? err.message\n        : 'Failed to process satellite image. Ensure it is a valid georeferenced image file.';\n      setError(message);\n      console.error('Error processing satellite image:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (files && files.length > 0) {\n      // Process each file\n      Array.from(files).forEach(file => {\n        handleFileProcess(file);\n      });\n    }\n    e.target.value = '';\n  };\n\n  const handleDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragging(false);\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      // Process each file\n      Array.from(e.dataTransfer.files).forEach(file => {\n        handleFileProcess(file);\n      });\n      e.dataTransfer.clearData();\n    }\n  }, [handleFileProcess]);\n\n  const handleDragOver = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragging(true);\n  }, []);\n\n  const handleDragLeave = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragging(false);\n  }, []);\n\n  const handleRemoveImage = async (imageId: string) => {\n    try {\n      // Find the image to release its resources\n      const imageToRemove = images.find(img => img.id === imageId);\n      if (imageToRemove) {\n        releaseProcessedImage(imageToRemove);\n      }\n\n      // Remove from IndexedDB\n      await indexedDBService.deleteSatelliteImage(imageId);\n\n      // Update state\n      setImages(prevImages => prevImages.filter(img => img.id !== imageId));\n\n      console.log(`Image ${imageId} removed successfully.`);\n    } catch (err) {\n      console.error('Error removing image:', err);\n      setError('Failed to remove image. Please try again.');\n    }\n  };\n\n  const handleBack = () => {\n    navigate('/shoreline-source');\n  };\n\n  const handleContinue = () => {\n    if (images.length === 0) {\n      setError('Please upload at least one satellite image before continuing.');\n      return;\n    }\n\n    navigate('/enhanced-shoreline-digitization');\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto py-12 px-4 sm:px-6 lg:px-8\">\n      {/* Header */}\n      <div className=\"text-center mb-10\">\n        <h2 className=\"text-3xl font-extrabold text-primary-900 tracking-tight\">\n          Upload Satellite Images\n        </h2>\n        <p className=\"mt-3 text-lg text-gray-600\">\n          Upload georeferenced satellite images to digitize shorelines.\n        </p>\n      </div>\n\n      {/* Error Display */}\n      <ErrorAlert message={error} onClose={() => setError(null)} />\n\n      {/* File Format Info Alert */}\n      <div className=\"mb-6 bg-blue-50 border-l-4 border-blue-500 p-4 rounded-md\">\n        <div className=\"flex\">\n          <div className=\"flex-shrink-0\">\n            <svg className=\"h-5 w-5 text-blue-400\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2h-1V9z\" clipRule=\"evenodd\" />\n            </svg>\n          </div>\n          <div className=\"ml-3\">\n            <h3 className=\"text-sm font-medium text-blue-800\">About Supported File Formats</h3>\n            <div className=\"mt-2 text-sm text-blue-700\">\n              <p>\n                <span className=\"font-medium\">GeoTIFF & Cloud Optimized GeoTIFF (COG):</span>\n              </p>\n              <ul className=\"list-disc pl-5 mt-1 space-y-1\">\n                <li>Both standard GeoTIFF and COG formats are fully supported</li>\n                <li>COG files provide better performance for web-based viewing</li>\n                <li>Images will be displayed in their correct geographic location</li>\n                <li>Files must contain proper georeferencing information</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* File Upload Section */}\n      <div className=\"mt-6 mb-8 bg-white p-8 rounded-lg shadow-md border border-gray-200\">\n        <div\n          onDrop={handleDrop}\n          onDragOver={handleDragOver}\n          onDragLeave={handleDragLeave}\n          className={`relative block w-full rounded-lg border-2 ${\n            isDragging ? 'border-primary-500 bg-primary-50' : 'border-dashed border-gray-300'\n          } p-12 text-center hover:border-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 transition-colors duration-200`}\n        >\n          <input\n            type=\"file\"\n            id=\"satellite-image\"\n            accept=\".tif,.tiff\"\n            onChange={handleFileChange}\n            className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n            disabled={loading}\n            multiple\n          />\n          <ArrowUpTrayIcon className=\"mx-auto h-12 w-12 text-gray-400\" />\n          <span className=\"mt-2 block text-sm font-medium text-gray-900\">\n            Drag & drop your satellite images here\n          </span>\n          <span className=\"block text-xs text-gray-500\">\n            or click to browse files\n          </span>\n          <span className=\"mt-4 block text-xs text-gray-500\">\n            Supports GeoTIFF (.tif, .tiff) and Cloud Optimized GeoTIFF (COG) formats. Max 1GB per file.\n          </span>\n        </div>\n\n        {loading && (\n          <div className=\"text-center py-4 mt-4\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n            <p className=\"text-sm font-medium text-gray-700\">Processing image...</p>\n            <p className=\"text-xs text-gray-500\">This may take a moment for larger files.</p>\n          </div>\n        )}\n      </div>\n\n      {/* Uploaded Images List */}\n      {images.length > 0 && (\n        <div className=\"mt-8 bg-white p-6 rounded-lg shadow-md border border-gray-200\">\n          <h3 className=\"text-lg font-semibold text-gray-800 mb-4\">Uploaded Images ({images.length})</h3>\n          <div className=\"space-y-4\">\n            {images.map((image) => (\n              <div key={image.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-md border border-gray-200\">\n                <div className=\"flex items-center\">\n                  <PhotoIcon className=\"h-6 w-6 text-gray-500 mr-3\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-800\">{image.name}</p>\n                    <p className=\"text-xs text-gray-500\">\n                      Uploaded {new Date(image.timestamp).toLocaleString()}\n                    </p>\n                    <div className=\"text-xs text-gray-500 space-y-1\">\n                      {image.metadata?.isSentinel ? (\n                        <>\n                          <p className=\"font-medium text-primary-600\">\n                            {image.metadata?.sentinelInfo?.satellite || 'Sentinel-2'} Image\n                            {image.metadata?.sentinelInfo?.productType && ` - ${image.metadata.sentinelInfo.productType}`}\n                          </p>\n                          <p>\n                            {image.metadata?.sentinelInfo?.utmZone && `UTM Zone: ${image.metadata.sentinelInfo.utmZone}`}\n                            {image.metadata?.sentinelInfo?.band && ` • Band: ${image.metadata.sentinelInfo.band}`}\n                            {image.metadata?.sentinelInfo?.date && ` • Date: ${image.metadata.sentinelInfo.date}`}\n                          </p>\n                          <p>\n                            Bounds: {image.bounds[0].toFixed(2)}°W, {image.bounds[1].toFixed(2)}°S, {image.bounds[2].toFixed(2)}°E, {image.bounds[3].toFixed(2)}°N\n                          </p>\n                        </>\n                      ) : image.georaster ? (\n                        <>\n                          <p className=\"font-medium text-green-600\">GeoTIFF with embedded georeferencing</p>\n                          <p>\n                            Bounds: {image.bounds[0].toFixed(2)}°W, {image.bounds[1].toFixed(2)}°S, {image.bounds[2].toFixed(2)}°E, {image.bounds[3].toFixed(2)}°N\n                          </p>\n                        </>\n                      ) : (\n                        <>\n                          <p>\n                            Bounds: {image.bounds[0].toFixed(2)}°W, {image.bounds[1].toFixed(2)}°S, {image.bounds[2].toFixed(2)}°E, {image.bounds[3].toFixed(2)}°N\n                          </p>\n                        </>\n                      )}\n                      <p>\n                        Size: {(image.metadata?.size ? (image.metadata.size / (1024 * 1024)).toFixed(2) : '?')} MB\n                      </p>\n                    </div>\n                  </div>\n                </div>\n                <button\n                  onClick={() => handleRemoveImage(image.id)}\n                  className=\"text-gray-500 hover:text-red-500 transition-colors\"\n                  title=\"Remove image\"\n                >\n                  <XCircleIcon className=\"h-5 w-5\" />\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Action Buttons */}\n      <div className=\"flex justify-between mt-10\">\n        <button\n          onClick={handleBack}\n          className=\"inline-flex items-center justify-center bg-gray-100 text-gray-700 font-semibold px-6 py-3 text-base rounded-lg shadow-sm hover:bg-gray-200 transition duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-gray-300 focus:ring-offset-2\"\n        >\n          <ArrowLeftIcon className=\"mr-2 h-5 w-5\" />\n          Back\n        </button>\n\n        <button\n          onClick={handleContinue}\n          disabled={images.length === 0 || loading}\n          className=\"inline-flex items-center justify-center bg-primary-600 text-white font-semibold px-8 py-3 text-base rounded-lg shadow-md hover:bg-primary-700 transition duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          Continue to Enhanced Digitization\n          <ArrowRightIcon className=\"ml-2 h-5 w-5\" />\n        </button>\n      </div>\n    </div>\n  );\n}\n"],"names":["fileDirectory","sampleValues","isCopernicus","useState","useEffect","useCallback","jsxs","jsx","ArrowUpTrayIcon","PhotoIcon","Fragment","XCircleIcon","ArrowLeftIcon","ArrowRightIcon"],"mappings":"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"}