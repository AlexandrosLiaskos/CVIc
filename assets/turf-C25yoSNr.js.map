{"version":3,"file":"turf-C25yoSNr.js","sources":["../../node_modules/@turf/helpers/dist/es/index.js","../../node_modules/@turf/meta/dist/es/index.js","../../node_modules/@turf/bbox/dist/es/index.js","../../node_modules/@turf/invariant/dist/es/index.js","../../node_modules/@turf/boolean-point-in-polygon/dist/es/index.js","../../node_modules/@turf/distance/dist/es/index.js","../../node_modules/@turf/destination/dist/es/index.js","../../node_modules/@turf/bearing/dist/es/index.js","../../node_modules/@turf/line-segment/dist/es/index.js","../../node_modules/geojson-rbush/node_modules/rbush/rbush.min.js","../../node_modules/@turf/helpers/dist/js/index.js","../../node_modules/@turf/meta/dist/js/index.js","../../node_modules/@turf/bbox/dist/js/index.js","../../node_modules/geojson-rbush/index.js","../../node_modules/@turf/line-intersect/dist/es/index.js","../../node_modules/@turf/length/dist/es/index.js","../../node_modules/@turf/line-slice-along/dist/es/index.js","../../node_modules/@turf/polygon-to-line/dist/es/index.js","../../node_modules/@turf/boolean-disjoint/dist/es/index.js","../../node_modules/@turf/boolean-intersects/dist/es/index.js"],"sourcesContent":["/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexport var earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var factors = {\n    centimeters: earthRadius * 100,\n    centimetres: earthRadius * 100,\n    degrees: earthRadius / 111325,\n    feet: earthRadius * 3.28084,\n    inches: earthRadius * 39.37,\n    kilometers: earthRadius / 1000,\n    kilometres: earthRadius / 1000,\n    meters: earthRadius,\n    metres: earthRadius,\n    miles: earthRadius / 1609.344,\n    millimeters: earthRadius * 1000,\n    millimetres: earthRadius * 1000,\n    nauticalmiles: earthRadius / 1852,\n    radians: 1,\n    yards: earthRadius * 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.37,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / earthRadius,\n    yards: 1.0936133,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    hectares: 0.0001,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nexport function feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nexport function geometry(type, coordinates, _options) {\n    if (_options === void 0) { _options = {}; }\n    switch (type) {\n        case \"Point\":\n            return point(coordinates).geometry;\n        case \"LineString\":\n            return lineString(coordinates).geometry;\n        case \"Polygon\":\n            return polygon(coordinates).geometry;\n        case \"MultiPoint\":\n            return multiPoint(coordinates).geometry;\n        case \"MultiLineString\":\n            return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\":\n            return multiPolygon(coordinates).geometry;\n        default:\n            throw new Error(type + \" is invalid\");\n    }\n}\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nexport function point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (!coordinates) {\n        throw new Error(\"coordinates is required\");\n    }\n    if (!Array.isArray(coordinates)) {\n        throw new Error(\"coordinates must be an Array\");\n    }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be at least 2 numbers long\");\n    }\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n        throw new Error(\"coordinates must contain numbers\");\n    }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nexport function points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nexport function polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nexport function polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nexport function lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nexport function lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nexport function featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nexport function multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nexport function multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nexport function multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nexport function geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nexport function round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nexport function radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nexport function lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nexport function lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nexport function bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nexport function radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return (degrees * 180) / Math.PI;\n}\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nexport function degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return (radians * Math.PI) / 180;\n}\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nexport function convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted area\n */\nexport function convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nexport function isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nexport function isObject(input) {\n    return !!input && input.constructor === Object;\n}\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nexport function validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nexport function validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\n","import { feature, lineString, isObject, point } from '@turf/helpers';\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n  // Handles null Geometry -- Skips this GeoJSON\n  if (geojson === null) return;\n  var j,\n    k,\n    l,\n    geometry,\n    stopG,\n    coords,\n    geometryMaybeCollection,\n    wrapShrink = 0,\n    coordIndex = 0,\n    isGeometryCollection,\n    type = geojson.type,\n    isFeatureCollection = type === \"FeatureCollection\",\n    isFeature = type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[featureIndex].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n      var multiFeatureIndex = 0;\n      var geometryIndex = 0;\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[geomIndex]\n        : geometryMaybeCollection;\n\n      // Handles null Geometry -- Skips this geometry\n      if (geometry === null) continue;\n      coords = geometry.coordinates;\n      var geomType = geometry.type;\n\n      wrapShrink =\n        excludeWrapCoord &&\n        (geomType === \"Polygon\" || geomType === \"MultiPolygon\")\n          ? 1\n          : 0;\n\n      switch (geomType) {\n        case null:\n          break;\n        case \"Point\":\n          if (\n            callback(\n              coords,\n              coordIndex,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n          coordIndex++;\n          multiFeatureIndex++;\n          break;\n        case \"LineString\":\n        case \"MultiPoint\":\n          for (j = 0; j < coords.length; j++) {\n            if (\n              callback(\n                coords[j],\n                coordIndex,\n                featureIndex,\n                multiFeatureIndex,\n                geometryIndex\n              ) === false\n            )\n              return false;\n            coordIndex++;\n            if (geomType === \"MultiPoint\") multiFeatureIndex++;\n          }\n          if (geomType === \"LineString\") multiFeatureIndex++;\n          break;\n        case \"Polygon\":\n        case \"MultiLineString\":\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length - wrapShrink; k++) {\n              if (\n                callback(\n                  coords[j][k],\n                  coordIndex,\n                  featureIndex,\n                  multiFeatureIndex,\n                  geometryIndex\n                ) === false\n              )\n                return false;\n              coordIndex++;\n            }\n            if (geomType === \"MultiLineString\") multiFeatureIndex++;\n            if (geomType === \"Polygon\") geometryIndex++;\n          }\n          if (geomType === \"Polygon\") multiFeatureIndex++;\n          break;\n        case \"MultiPolygon\":\n          for (j = 0; j < coords.length; j++) {\n            geometryIndex = 0;\n            for (k = 0; k < coords[j].length; k++) {\n              for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                if (\n                  callback(\n                    coords[j][k][l],\n                    coordIndex,\n                    featureIndex,\n                    multiFeatureIndex,\n                    geometryIndex\n                  ) === false\n                )\n                  return false;\n                coordIndex++;\n              }\n              geometryIndex++;\n            }\n            multiFeatureIndex++;\n          }\n          break;\n        case \"GeometryCollection\":\n          for (j = 0; j < geometry.geometries.length; j++)\n            if (\n              coordEach(geometry.geometries[j], callback, excludeWrapCoord) ===\n              false\n            )\n              return false;\n          break;\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n  }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n  var previousValue = initialValue;\n  coordEach(\n    geojson,\n    function (\n      currentCoord,\n      coordIndex,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex\n    ) {\n      if (coordIndex === 0 && initialValue === undefined)\n        previousValue = currentCoord;\n      else\n        previousValue = callback(\n          previousValue,\n          currentCoord,\n          coordIndex,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    },\n    excludeWrapCoord\n  );\n  return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n  var i;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      for (i = 0; i < geojson.features.length; i++) {\n        if (callback(geojson.features[i].properties, i) === false) break;\n      }\n      break;\n    case \"Feature\":\n      callback(geojson.properties, 0);\n      break;\n  }\n}\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  propEach(geojson, function (currentProperties, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentProperties;\n    else\n      previousValue = callback(previousValue, currentProperties, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n  if (geojson.type === \"Feature\") {\n    callback(geojson, 0);\n  } else if (geojson.type === \"FeatureCollection\") {\n    for (var i = 0; i < geojson.features.length; i++) {\n      if (callback(geojson.features[i], i) === false) break;\n    }\n  }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  featureEach(geojson, function (currentFeature, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentFeature;\n    else previousValue = callback(previousValue, currentFeature, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n  var coords = [];\n  coordEach(geojson, function (coord) {\n    coords.push(coord);\n  });\n  return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n  var i,\n    j,\n    g,\n    geometry,\n    stopG,\n    geometryMaybeCollection,\n    isGeometryCollection,\n    featureProperties,\n    featureBBox,\n    featureId,\n    featureIndex = 0,\n    isFeatureCollection = geojson.type === \"FeatureCollection\",\n    isFeature = geojson.type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[i].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    featureProperties = isFeatureCollection\n      ? geojson.features[i].properties\n      : isFeature\n      ? geojson.properties\n      : {};\n    featureBBox = isFeatureCollection\n      ? geojson.features[i].bbox\n      : isFeature\n      ? geojson.bbox\n      : undefined;\n    featureId = isFeatureCollection\n      ? geojson.features[i].id\n      : isFeature\n      ? geojson.id\n      : undefined;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[g]\n        : geometryMaybeCollection;\n\n      // Handle null Geometry\n      if (geometry === null) {\n        if (\n          callback(\n            null,\n            featureIndex,\n            featureProperties,\n            featureBBox,\n            featureId\n          ) === false\n        )\n          return false;\n        continue;\n      }\n      switch (geometry.type) {\n        case \"Point\":\n        case \"LineString\":\n        case \"MultiPoint\":\n        case \"Polygon\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\": {\n          if (\n            callback(\n              geometry,\n              featureIndex,\n              featureProperties,\n              featureBBox,\n              featureId\n            ) === false\n          )\n            return false;\n          break;\n        }\n        case \"GeometryCollection\": {\n          for (j = 0; j < geometry.geometries.length; j++) {\n            if (\n              callback(\n                geometry.geometries[j],\n                featureIndex,\n                featureProperties,\n                featureBBox,\n                featureId\n              ) === false\n            )\n              return false;\n          }\n          break;\n        }\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n    // Only increase `featureIndex` per each feature\n    featureIndex++;\n  }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  geomEach(\n    geojson,\n    function (\n      currentGeometry,\n      featureIndex,\n      featureProperties,\n      featureBBox,\n      featureId\n    ) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentGeometry;\n      else\n        previousValue = callback(\n          previousValue,\n          currentGeometry,\n          featureIndex,\n          featureProperties,\n          featureBBox,\n          featureId\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n  geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n    // Callback for single geometry\n    var type = geometry === null ? null : geometry.type;\n    switch (type) {\n      case null:\n      case \"Point\":\n      case \"LineString\":\n      case \"Polygon\":\n        if (\n          callback(\n            feature(geometry, properties, { bbox: bbox, id: id }),\n            featureIndex,\n            0\n          ) === false\n        )\n          return false;\n        return;\n    }\n\n    var geomType;\n\n    // Callback for multi-geometry\n    switch (type) {\n      case \"MultiPoint\":\n        geomType = \"Point\";\n        break;\n      case \"MultiLineString\":\n        geomType = \"LineString\";\n        break;\n      case \"MultiPolygon\":\n        geomType = \"Polygon\";\n        break;\n    }\n\n    for (\n      var multiFeatureIndex = 0;\n      multiFeatureIndex < geometry.coordinates.length;\n      multiFeatureIndex++\n    ) {\n      var coordinate = geometry.coordinates[multiFeatureIndex];\n      var geom = {\n        type: geomType,\n        coordinates: coordinate,\n      };\n      if (\n        callback(feature(geom, properties), featureIndex, multiFeatureIndex) ===\n        false\n      )\n        return false;\n    }\n  });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  flattenEach(\n    geojson,\n    function (currentFeature, featureIndex, multiFeatureIndex) {\n      if (\n        featureIndex === 0 &&\n        multiFeatureIndex === 0 &&\n        initialValue === undefined\n      )\n        previousValue = currentFeature;\n      else\n        previousValue = callback(\n          previousValue,\n          currentFeature,\n          featureIndex,\n          multiFeatureIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    var segmentIndex = 0;\n\n    // Exclude null Geometries\n    if (!feature.geometry) return;\n    // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n    var type = feature.geometry.type;\n    if (type === \"Point\" || type === \"MultiPoint\") return;\n\n    // Generate 2-vertex line segments\n    var previousCoords;\n    var previousFeatureIndex = 0;\n    var previousMultiIndex = 0;\n    var prevGeomIndex = 0;\n    if (\n      coordEach(\n        feature,\n        function (\n          currentCoord,\n          coordIndex,\n          featureIndexCoord,\n          multiPartIndexCoord,\n          geometryIndex\n        ) {\n          // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n          if (\n            previousCoords === undefined ||\n            featureIndex > previousFeatureIndex ||\n            multiPartIndexCoord > previousMultiIndex ||\n            geometryIndex > prevGeomIndex\n          ) {\n            previousCoords = currentCoord;\n            previousFeatureIndex = featureIndex;\n            previousMultiIndex = multiPartIndexCoord;\n            prevGeomIndex = geometryIndex;\n            segmentIndex = 0;\n            return;\n          }\n          var currentSegment = lineString(\n            [previousCoords, currentCoord],\n            feature.properties\n          );\n          if (\n            callback(\n              currentSegment,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex,\n              segmentIndex\n            ) === false\n          )\n            return false;\n          segmentIndex++;\n          previousCoords = currentCoord;\n        }\n      ) === false\n    )\n      return false;\n  });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentIndex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  var started = false;\n  segmentEach(\n    geojson,\n    function (\n      currentSegment,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex,\n      segmentIndex\n    ) {\n      if (started === false && initialValue === undefined)\n        previousValue = currentSegment;\n      else\n        previousValue = callback(\n          previousValue,\n          currentSegment,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex,\n          segmentIndex\n        );\n      started = true;\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n  // validation\n  if (!geojson) throw new Error(\"geojson is required\");\n\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    if (feature.geometry === null) return;\n    var type = feature.geometry.type;\n    var coords = feature.geometry.coordinates;\n    switch (type) {\n      case \"LineString\":\n        if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false)\n          return false;\n        break;\n      case \"Polygon\":\n        for (\n          var geometryIndex = 0;\n          geometryIndex < coords.length;\n          geometryIndex++\n        ) {\n          if (\n            callback(\n              lineString(coords[geometryIndex], feature.properties),\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n        }\n        break;\n    }\n  });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  lineEach(\n    geojson,\n    function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentLine;\n      else\n        previousValue = callback(\n          previousValue,\n          currentLine,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var segmentIndex = options.segmentIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find SegmentIndex\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n      if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n      return lineString(\n        [coords[segmentIndex], coords[segmentIndex + 1]],\n        properties,\n        options\n      );\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n      return lineString(\n        [\n          coords[geometryIndex][segmentIndex],\n          coords[geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n      return lineString(\n        [\n          coords[multiFeatureIndex][segmentIndex],\n          coords[multiFeatureIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex =\n          coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n      return lineString(\n        [\n          coords[multiFeatureIndex][geometryIndex][segmentIndex],\n          coords[multiFeatureIndex][geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var coordIndex = options.coordIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find Coord Index\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n      return point(coords, properties, options);\n    case \"MultiPoint\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      return point(coords[multiFeatureIndex], properties, options);\n    case \"LineString\":\n      if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n      return point(coords[coordIndex], properties, options);\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[geometryIndex].length + coordIndex;\n      return point(coords[geometryIndex][coordIndex], properties, options);\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[multiFeatureIndex].length + coordIndex;\n      return point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex =\n          coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n      return point(\n        coords[multiFeatureIndex][geometryIndex][coordIndex],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\nexport { coordAll, coordEach, coordReduce, featureEach, featureReduce, findPoint, findSegment, flattenEach, flattenReduce, geomEach, geomReduce, lineEach, lineReduce, propEach, propReduce, segmentEach, segmentReduce };\n","import { coordEach } from \"@turf/meta\";\n/**\n * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.\n *\n * @name bbox\n * @param {GeoJSON} geojson any GeoJSON object\n * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);\n * var bbox = turf.bbox(line);\n * var bboxPolygon = turf.bboxPolygon(bbox);\n *\n * //addToMap\n * var addToMap = [line, bboxPolygon]\n */\nfunction bbox(geojson) {\n    var result = [Infinity, Infinity, -Infinity, -Infinity];\n    coordEach(geojson, function (coord) {\n        if (result[0] > coord[0]) {\n            result[0] = coord[0];\n        }\n        if (result[1] > coord[1]) {\n            result[1] = coord[1];\n        }\n        if (result[2] < coord[0]) {\n            result[2] = coord[0];\n        }\n        if (result[3] < coord[1]) {\n            result[3] = coord[1];\n        }\n    });\n    return result;\n}\nbbox[\"default\"] = bbox;\nexport default bbox;\n","import { isNumber, } from \"@turf/helpers\";\n/**\n * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.\n *\n * @name getCoord\n * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers\n * @returns {Array<number>} coordinates\n * @example\n * var pt = turf.point([10, 10]);\n *\n * var coord = turf.getCoord(pt);\n * //= [10, 10]\n */\nexport function getCoord(coord) {\n    if (!coord) {\n        throw new Error(\"coord is required\");\n    }\n    if (!Array.isArray(coord)) {\n        if (coord.type === \"Feature\" &&\n            coord.geometry !== null &&\n            coord.geometry.type === \"Point\") {\n            return coord.geometry.coordinates;\n        }\n        if (coord.type === \"Point\") {\n            return coord.coordinates;\n        }\n    }\n    if (Array.isArray(coord) &&\n        coord.length >= 2 &&\n        !Array.isArray(coord[0]) &&\n        !Array.isArray(coord[1])) {\n        return coord;\n    }\n    throw new Error(\"coord must be GeoJSON Point or an Array of numbers\");\n}\n/**\n * Unwrap coordinates from a Feature, Geometry Object or an Array\n *\n * @name getCoords\n * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array\n * @returns {Array<any>} coordinates\n * @example\n * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n *\n * var coords = turf.getCoords(poly);\n * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\n */\nexport function getCoords(coords) {\n    if (Array.isArray(coords)) {\n        return coords;\n    }\n    // Feature\n    if (coords.type === \"Feature\") {\n        if (coords.geometry !== null) {\n            return coords.geometry.coordinates;\n        }\n    }\n    else {\n        // Geometry\n        if (coords.coordinates) {\n            return coords.coordinates;\n        }\n    }\n    throw new Error(\"coords must be GeoJSON Feature, Geometry Object or an Array\");\n}\n/**\n * Checks if coordinates contains a number\n *\n * @name containsNumber\n * @param {Array<any>} coordinates GeoJSON Coordinates\n * @returns {boolean} true if Array contains a number\n */\nexport function containsNumber(coordinates) {\n    if (coordinates.length > 1 &&\n        isNumber(coordinates[0]) &&\n        isNumber(coordinates[1])) {\n        return true;\n    }\n    if (Array.isArray(coordinates[0]) && coordinates[0].length) {\n        return containsNumber(coordinates[0]);\n    }\n    throw new Error(\"coordinates must only contain numbers\");\n}\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @name geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nexport function geojsonType(value, type, name) {\n    if (!type || !name) {\n        throw new Error(\"type and name required\");\n    }\n    if (!value || value.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            value.type);\n    }\n}\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} error if value is not the expected type.\n */\nexport function featureOf(feature, type, name) {\n    if (!feature) {\n        throw new Error(\"No feature passed\");\n    }\n    if (!name) {\n        throw new Error(\".featureOf() requires a name\");\n    }\n    if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n        throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            feature.geometry.type);\n    }\n}\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name collectionOf\n * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nexport function collectionOf(featureCollection, type, name) {\n    if (!featureCollection) {\n        throw new Error(\"No featureCollection passed\");\n    }\n    if (!name) {\n        throw new Error(\".collectionOf() requires a name\");\n    }\n    if (!featureCollection || featureCollection.type !== \"FeatureCollection\") {\n        throw new Error(\"Invalid input to \" + name + \", FeatureCollection required\");\n    }\n    for (var _i = 0, _a = featureCollection.features; _i < _a.length; _i++) {\n        var feature = _a[_i];\n        if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n            throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n        }\n        if (!feature.geometry || feature.geometry.type !== type) {\n            throw new Error(\"Invalid input to \" +\n                name +\n                \": must be a \" +\n                type +\n                \", given \" +\n                feature.geometry.type);\n        }\n    }\n}\n/**\n * Get Geometry from Feature or Geometry Object\n *\n * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object\n * @returns {Geometry|null} GeoJSON Geometry Object\n * @throws {Error} if geojson is not a Feature or Geometry Object\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getGeom(point)\n * //={\"type\": \"Point\", \"coordinates\": [110, 40]}\n */\nexport function getGeom(geojson) {\n    if (geojson.type === \"Feature\") {\n        return geojson.geometry;\n    }\n    return geojson;\n}\n/**\n * Get GeoJSON object's type, Geometry type is prioritize.\n *\n * @param {GeoJSON} geojson GeoJSON object\n * @param {string} [name=\"geojson\"] name of the variable to display in error message (unused)\n * @returns {string} GeoJSON type\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getType(point)\n * //=\"Point\"\n */\nexport function getType(geojson, _name) {\n    if (geojson.type === \"FeatureCollection\") {\n        return \"FeatureCollection\";\n    }\n    if (geojson.type === \"GeometryCollection\") {\n        return \"GeometryCollection\";\n    }\n    if (geojson.type === \"Feature\" && geojson.geometry !== null) {\n        return geojson.geometry.type;\n    }\n    return geojson.type;\n}\n","import { getCoord, getGeom } from \"@turf/invariant\";\n// http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule\n// modified from: https://github.com/substack/point-in-polygon/blob/master/index.js\n// which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n/**\n * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point\n * resides inside the polygon. The polygon can be convex or concave. The function accounts for holes.\n *\n * @name booleanPointInPolygon\n * @param {Coord} point input point\n * @param {Feature<Polygon|MultiPolygon>} polygon input polygon or multipolygon\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.ignoreBoundary=false] True if polygon boundary should be ignored when determining if\n * the point is inside the polygon otherwise false.\n * @returns {boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon\n * @example\n * var pt = turf.point([-77, 44]);\n * var poly = turf.polygon([[\n *   [-81, 41],\n *   [-81, 47],\n *   [-72, 47],\n *   [-72, 41],\n *   [-81, 41]\n * ]]);\n *\n * turf.booleanPointInPolygon(pt, poly);\n * //= true\n */\nexport default function booleanPointInPolygon(point, polygon, options) {\n    if (options === void 0) { options = {}; }\n    // validation\n    if (!point) {\n        throw new Error(\"point is required\");\n    }\n    if (!polygon) {\n        throw new Error(\"polygon is required\");\n    }\n    var pt = getCoord(point);\n    var geom = getGeom(polygon);\n    var type = geom.type;\n    var bbox = polygon.bbox;\n    var polys = geom.coordinates;\n    // Quick elimination if point is not inside bbox\n    if (bbox && inBBox(pt, bbox) === false) {\n        return false;\n    }\n    // normalize to multipolygon\n    if (type === \"Polygon\") {\n        polys = [polys];\n    }\n    var insidePoly = false;\n    for (var i = 0; i < polys.length && !insidePoly; i++) {\n        // check if it is in the outer ring first\n        if (inRing(pt, polys[i][0], options.ignoreBoundary)) {\n            var inHole = false;\n            var k = 1;\n            // check for the point in any of the holes\n            while (k < polys[i].length && !inHole) {\n                if (inRing(pt, polys[i][k], !options.ignoreBoundary)) {\n                    inHole = true;\n                }\n                k++;\n            }\n            if (!inHole) {\n                insidePoly = true;\n            }\n        }\n    }\n    return insidePoly;\n}\n/**\n * inRing\n *\n * @private\n * @param {Array<number>} pt [x,y]\n * @param {Array<Array<number>>} ring [[x,y], [x,y],..]\n * @param {boolean} ignoreBoundary ignoreBoundary\n * @returns {boolean} inRing\n */\nfunction inRing(pt, ring, ignoreBoundary) {\n    var isInside = false;\n    if (ring[0][0] === ring[ring.length - 1][0] &&\n        ring[0][1] === ring[ring.length - 1][1]) {\n        ring = ring.slice(0, ring.length - 1);\n    }\n    for (var i = 0, j = ring.length - 1; i < ring.length; j = i++) {\n        var xi = ring[i][0];\n        var yi = ring[i][1];\n        var xj = ring[j][0];\n        var yj = ring[j][1];\n        var onBoundary = pt[1] * (xi - xj) + yi * (xj - pt[0]) + yj * (pt[0] - xi) === 0 &&\n            (xi - pt[0]) * (xj - pt[0]) <= 0 &&\n            (yi - pt[1]) * (yj - pt[1]) <= 0;\n        if (onBoundary) {\n            return !ignoreBoundary;\n        }\n        var intersect = yi > pt[1] !== yj > pt[1] &&\n            pt[0] < ((xj - xi) * (pt[1] - yi)) / (yj - yi) + xi;\n        if (intersect) {\n            isInside = !isInside;\n        }\n    }\n    return isInside;\n}\n/**\n * inBBox\n *\n * @private\n * @param {Position} pt point [x,y]\n * @param {BBox} bbox BBox [west, south, east, north]\n * @returns {boolean} true/false if point is inside BBox\n */\nfunction inBBox(pt, bbox) {\n    return (bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1]);\n}\n","import { getCoord } from \"@turf/invariant\";\nimport { radiansToLength, degreesToRadians, } from \"@turf/helpers\";\n//http://en.wikipedia.org/wiki/Haversine_formula\n//http://www.movable-type.co.uk/scripts/latlong.html\n/**\n * Calculates the distance between two {@link Point|points} in degrees, radians, miles, or kilometers.\n * This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.\n *\n * @name distance\n * @param {Coord | Point} from origin point or coordinate\n * @param {Coord | Point} to destination point or coordinate\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @returns {number} distance between the two points\n * @example\n * var from = turf.point([-75.343, 39.984]);\n * var to = turf.point([-75.534, 39.123]);\n * var options = {units: 'miles'};\n *\n * var distance = turf.distance(from, to, options);\n *\n * //addToMap\n * var addToMap = [from, to];\n * from.properties.distance = distance;\n * to.properties.distance = distance;\n */\nfunction distance(from, to, options) {\n    if (options === void 0) { options = {}; }\n    var coordinates1 = getCoord(from);\n    var coordinates2 = getCoord(to);\n    var dLat = degreesToRadians(coordinates2[1] - coordinates1[1]);\n    var dLon = degreesToRadians(coordinates2[0] - coordinates1[0]);\n    var lat1 = degreesToRadians(coordinates1[1]);\n    var lat2 = degreesToRadians(coordinates2[1]);\n    var a = Math.pow(Math.sin(dLat / 2), 2) +\n        Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);\n    return radiansToLength(2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)), options.units);\n}\nexport default distance;\n","// http://en.wikipedia.org/wiki/Haversine_formula\n// http://www.movable-type.co.uk/scripts/latlong.html\nimport { degreesToRadians, lengthToRadians, point, radiansToDegrees, } from \"@turf/helpers\";\nimport { getCoord } from \"@turf/invariant\";\n/**\n * Takes a {@link Point} and calculates the location of a destination point given a distance in\n * degrees, radians, miles, or kilometers; and bearing in degrees.\n * This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.\n *\n * @name destination\n * @param {Coord} origin starting point\n * @param {number} distance distance from the origin point\n * @param {number} bearing ranging from -180 to 180\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] miles, kilometers, degrees, or radians\n * @param {Object} [options.properties={}] Translate properties to Point\n * @returns {Feature<Point>} destination point\n * @example\n * var point = turf.point([-75.343, 39.984]);\n * var distance = 50;\n * var bearing = 90;\n * var options = {units: 'miles'};\n *\n * var destination = turf.destination(point, distance, bearing, options);\n *\n * //addToMap\n * var addToMap = [point, destination]\n * destination.properties['marker-color'] = '#f00';\n * point.properties['marker-color'] = '#0f0';\n */\nexport default function destination(origin, distance, bearing, options) {\n    if (options === void 0) { options = {}; }\n    // Handle input\n    var coordinates1 = getCoord(origin);\n    var longitude1 = degreesToRadians(coordinates1[0]);\n    var latitude1 = degreesToRadians(coordinates1[1]);\n    var bearingRad = degreesToRadians(bearing);\n    var radians = lengthToRadians(distance, options.units);\n    // Main\n    var latitude2 = Math.asin(Math.sin(latitude1) * Math.cos(radians) +\n        Math.cos(latitude1) * Math.sin(radians) * Math.cos(bearingRad));\n    var longitude2 = longitude1 +\n        Math.atan2(Math.sin(bearingRad) * Math.sin(radians) * Math.cos(latitude1), Math.cos(radians) - Math.sin(latitude1) * Math.sin(latitude2));\n    var lng = radiansToDegrees(longitude2);\n    var lat = radiansToDegrees(latitude2);\n    return point([lng, lat], options.properties);\n}\n","import { degreesToRadians, radiansToDegrees } from \"@turf/helpers\";\nimport { getCoord } from \"@turf/invariant\";\n// http://en.wikipedia.org/wiki/Haversine_formula\n// http://www.movable-type.co.uk/scripts/latlong.html\n/**\n * Takes two {@link Point|points} and finds the geographic bearing between them,\n * i.e. the angle measured in degrees from the north line (0 degrees)\n *\n * @name bearing\n * @param {Coord} start starting Point\n * @param {Coord} end ending Point\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.final=false] calculates the final bearing if true\n * @returns {number} bearing in decimal degrees, between -180 and 180 degrees (positive clockwise)\n * @example\n * var point1 = turf.point([-75.343, 39.984]);\n * var point2 = turf.point([-75.534, 39.123]);\n *\n * var bearing = turf.bearing(point1, point2);\n *\n * //addToMap\n * var addToMap = [point1, point2]\n * point1.properties['marker-color'] = '#f00'\n * point2.properties['marker-color'] = '#0f0'\n * point1.properties.bearing = bearing\n */\nexport default function bearing(start, end, options) {\n    if (options === void 0) { options = {}; }\n    // Reverse calculation\n    if (options.final === true) {\n        return calculateFinalBearing(start, end);\n    }\n    var coordinates1 = getCoord(start);\n    var coordinates2 = getCoord(end);\n    var lon1 = degreesToRadians(coordinates1[0]);\n    var lon2 = degreesToRadians(coordinates2[0]);\n    var lat1 = degreesToRadians(coordinates1[1]);\n    var lat2 = degreesToRadians(coordinates2[1]);\n    var a = Math.sin(lon2 - lon1) * Math.cos(lat2);\n    var b = Math.cos(lat1) * Math.sin(lat2) -\n        Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);\n    return radiansToDegrees(Math.atan2(a, b));\n}\n/**\n * Calculates Final Bearing\n *\n * @private\n * @param {Coord} start starting Point\n * @param {Coord} end ending Point\n * @returns {number} bearing\n */\nfunction calculateFinalBearing(start, end) {\n    // Swap start & end\n    var bear = bearing(end, start);\n    bear = (bear + 180) % 360;\n    return bear;\n}\n","import { featureCollection, lineString, } from \"@turf/helpers\";\nimport { getCoords } from \"@turf/invariant\";\nimport { flattenEach } from \"@turf/meta\";\n/**\n * Creates a {@link FeatureCollection} of 2-vertex {@link LineString} segments from a\n * {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon}.\n *\n * @name lineSegment\n * @param {GeoJSON} geojson GeoJSON Polygon or LineString\n * @returns {FeatureCollection<LineString>} 2-vertex line segments\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n * var segments = turf.lineSegment(polygon);\n *\n * //addToMap\n * var addToMap = [polygon, segments]\n */\nfunction lineSegment(geojson) {\n    if (!geojson) {\n        throw new Error(\"geojson is required\");\n    }\n    var results = [];\n    flattenEach(geojson, function (feature) {\n        lineSegmentFeature(feature, results);\n    });\n    return featureCollection(results);\n}\n/**\n * Line Segment\n *\n * @private\n * @param {Feature<LineString|Polygon>} geojson Line or polygon feature\n * @param {Array} results push to results\n * @returns {void}\n */\nfunction lineSegmentFeature(geojson, results) {\n    var coords = [];\n    var geometry = geojson.geometry;\n    if (geometry !== null) {\n        switch (geometry.type) {\n            case \"Polygon\":\n                coords = getCoords(geometry);\n                break;\n            case \"LineString\":\n                coords = [getCoords(geometry)];\n        }\n        coords.forEach(function (coord) {\n            var segments = createSegments(coord, geojson.properties);\n            segments.forEach(function (segment) {\n                segment.id = results.length;\n                results.push(segment);\n            });\n        });\n    }\n}\n/**\n * Create Segments from LineString coordinates\n *\n * @private\n * @param {Array<Array<number>>} coords LineString coordinates\n * @param {*} properties GeoJSON properties\n * @returns {Array<Feature<LineString>>} line segments\n */\nfunction createSegments(coords, properties) {\n    var segments = [];\n    coords.reduce(function (previousCoords, currentCoords) {\n        var segment = lineString([previousCoords, currentCoords], properties);\n        segment.bbox = bbox(previousCoords, currentCoords);\n        segments.push(segment);\n        return currentCoords;\n    });\n    return segments;\n}\n/**\n * Create BBox between two coordinates (faster than @turf/bbox)\n *\n * @private\n * @param {Array<number>} coords1 Point coordinate\n * @param {Array<number>} coords2 Point coordinate\n * @returns {BBox} [west, south, east, north]\n */\nfunction bbox(coords1, coords2) {\n    var x1 = coords1[0];\n    var y1 = coords1[1];\n    var x2 = coords2[0];\n    var y2 = coords2[1];\n    var west = x1 < x2 ? x1 : x2;\n    var south = y1 < y2 ? y1 : y2;\n    var east = x1 > x2 ? x1 : x2;\n    var north = y1 > y2 ? y1 : y2;\n    return [west, south, east, north];\n}\nexport default lineSegment;\n","!function(t,i){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=i():\"function\"==typeof define&&define.amd?define(i):(t=t||self).RBush=i()}(this,function(){\"use strict\";function t(t,r,e,a,h){!function t(n,r,e,a,h){for(;a>e;){if(a-e>600){var o=a-e+1,s=r-e+1,l=Math.log(o),f=.5*Math.exp(2*l/3),u=.5*Math.sqrt(l*f*(o-f)/o)*(s-o/2<0?-1:1),m=Math.max(e,Math.floor(r-s*f/o+u)),c=Math.min(a,Math.floor(r+(o-s)*f/o+u));t(n,r,m,c,h)}var p=n[r],d=e,x=a;for(i(n,e,r),h(n[a],p)>0&&i(n,e,a);d<x;){for(i(n,d,x),d++,x--;h(n[d],p)<0;)d++;for(;h(n[x],p)>0;)x--}0===h(n[e],p)?i(n,e,x):i(n,++x,a),x<=r&&(e=x+1),r<=x&&(a=x-1)}}(t,r,e||0,a||t.length-1,h||n)}function i(t,i,n){var r=t[i];t[i]=t[n],t[n]=r}function n(t,i){return t<i?-1:t>i?1:0}var r=function(t){void 0===t&&(t=9),this._maxEntries=Math.max(4,t),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear()};function e(t,i,n){if(!n)return i.indexOf(t);for(var r=0;r<i.length;r++)if(n(t,i[r]))return r;return-1}function a(t,i){h(t,0,t.children.length,i,t)}function h(t,i,n,r,e){e||(e=p(null)),e.minX=1/0,e.minY=1/0,e.maxX=-1/0,e.maxY=-1/0;for(var a=i;a<n;a++){var h=t.children[a];o(e,t.leaf?r(h):h)}return e}function o(t,i){return t.minX=Math.min(t.minX,i.minX),t.minY=Math.min(t.minY,i.minY),t.maxX=Math.max(t.maxX,i.maxX),t.maxY=Math.max(t.maxY,i.maxY),t}function s(t,i){return t.minX-i.minX}function l(t,i){return t.minY-i.minY}function f(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function u(t){return t.maxX-t.minX+(t.maxY-t.minY)}function m(t,i){return t.minX<=i.minX&&t.minY<=i.minY&&i.maxX<=t.maxX&&i.maxY<=t.maxY}function c(t,i){return i.minX<=t.maxX&&i.minY<=t.maxY&&i.maxX>=t.minX&&i.maxY>=t.minY}function p(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function d(i,n,r,e,a){for(var h=[n,r];h.length;)if(!((r=h.pop())-(n=h.pop())<=e)){var o=n+Math.ceil((r-n)/e/2)*e;t(i,o,n,r,a),h.push(n,o,o,r)}}return r.prototype.all=function(){return this._all(this.data,[])},r.prototype.search=function(t){var i=this.data,n=[];if(!c(t,i))return n;for(var r=this.toBBox,e=[];i;){for(var a=0;a<i.children.length;a++){var h=i.children[a],o=i.leaf?r(h):h;c(t,o)&&(i.leaf?n.push(h):m(t,o)?this._all(h,n):e.push(h))}i=e.pop()}return n},r.prototype.collides=function(t){var i=this.data;if(!c(t,i))return!1;for(var n=[];i;){for(var r=0;r<i.children.length;r++){var e=i.children[r],a=i.leaf?this.toBBox(e):e;if(c(t,a)){if(i.leaf||m(t,a))return!0;n.push(e)}}i=n.pop()}return!1},r.prototype.load=function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var i=0;i<t.length;i++)this.insert(t[i]);return this}var n=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else{if(this.data.height<n.height){var r=this.data;this.data=n,n=r}this._insert(n,this.data.height-n.height-1,!0)}else this.data=n;return this},r.prototype.insert=function(t){return t&&this._insert(t,this.data.height-1),this},r.prototype.clear=function(){return this.data=p([]),this},r.prototype.remove=function(t,i){if(!t)return this;for(var n,r,a,h=this.data,o=this.toBBox(t),s=[],l=[];h||s.length;){if(h||(h=s.pop(),r=s[s.length-1],n=l.pop(),a=!0),h.leaf){var f=e(t,h.children,i);if(-1!==f)return h.children.splice(f,1),s.push(h),this._condense(s),this}a||h.leaf||!m(h,o)?r?(n++,h=r.children[n],a=!1):h=null:(s.push(h),l.push(n),n=0,r=h,h=h.children[0])}return this},r.prototype.toBBox=function(t){return t},r.prototype.compareMinX=function(t,i){return t.minX-i.minX},r.prototype.compareMinY=function(t,i){return t.minY-i.minY},r.prototype.toJSON=function(){return this.data},r.prototype.fromJSON=function(t){return this.data=t,this},r.prototype._all=function(t,i){for(var n=[];t;)t.leaf?i.push.apply(i,t.children):n.push.apply(n,t.children),t=n.pop();return i},r.prototype._build=function(t,i,n,r){var e,h=n-i+1,o=this._maxEntries;if(h<=o)return a(e=p(t.slice(i,n+1)),this.toBBox),e;r||(r=Math.ceil(Math.log(h)/Math.log(o)),o=Math.ceil(h/Math.pow(o,r-1))),(e=p([])).leaf=!1,e.height=r;var s=Math.ceil(h/o),l=s*Math.ceil(Math.sqrt(o));d(t,i,n,l,this.compareMinX);for(var f=i;f<=n;f+=l){var u=Math.min(f+l-1,n);d(t,f,u,s,this.compareMinY);for(var m=f;m<=u;m+=s){var c=Math.min(m+s-1,u);e.children.push(this._build(t,m,c,r-1))}}return a(e,this.toBBox),e},r.prototype._chooseSubtree=function(t,i,n,r){for(;r.push(i),!i.leaf&&r.length-1!==n;){for(var e=1/0,a=1/0,h=void 0,o=0;o<i.children.length;o++){var s=i.children[o],l=f(s),u=(m=t,c=s,(Math.max(c.maxX,m.maxX)-Math.min(c.minX,m.minX))*(Math.max(c.maxY,m.maxY)-Math.min(c.minY,m.minY))-l);u<a?(a=u,e=l<e?l:e,h=s):u===a&&l<e&&(e=l,h=s)}i=h||i.children[0]}var m,c;return i},r.prototype._insert=function(t,i,n){var r=n?t:this.toBBox(t),e=[],a=this._chooseSubtree(r,this.data,i,e);for(a.children.push(t),o(a,r);i>=0&&e[i].children.length>this._maxEntries;)this._split(e,i),i--;this._adjustParentBBoxes(r,e,i)},r.prototype._split=function(t,i){var n=t[i],r=n.children.length,e=this._minEntries;this._chooseSplitAxis(n,e,r);var h=this._chooseSplitIndex(n,e,r),o=p(n.children.splice(h,n.children.length-h));o.height=n.height,o.leaf=n.leaf,a(n,this.toBBox),a(o,this.toBBox),i?t[i-1].children.push(o):this._splitRoot(n,o)},r.prototype._splitRoot=function(t,i){this.data=p([t,i]),this.data.height=t.height+1,this.data.leaf=!1,a(this.data,this.toBBox)},r.prototype._chooseSplitIndex=function(t,i,n){for(var r,e,a,o,s,l,u,m=1/0,c=1/0,p=i;p<=n-i;p++){var d=h(t,0,p,this.toBBox),x=h(t,p,n,this.toBBox),v=(e=d,a=x,o=void 0,s=void 0,l=void 0,u=void 0,o=Math.max(e.minX,a.minX),s=Math.max(e.minY,a.minY),l=Math.min(e.maxX,a.maxX),u=Math.min(e.maxY,a.maxY),Math.max(0,l-o)*Math.max(0,u-s)),M=f(d)+f(x);v<m?(m=v,r=p,c=M<c?M:c):v===m&&M<c&&(c=M,r=p)}return r||n-i},r.prototype._chooseSplitAxis=function(t,i,n){var r=t.leaf?this.compareMinX:s,e=t.leaf?this.compareMinY:l;this._allDistMargin(t,i,n,r)<this._allDistMargin(t,i,n,e)&&t.children.sort(r)},r.prototype._allDistMargin=function(t,i,n,r){t.children.sort(r);for(var e=this.toBBox,a=h(t,0,i,e),s=h(t,n-i,n,e),l=u(a)+u(s),f=i;f<n-i;f++){var m=t.children[f];o(a,t.leaf?e(m):m),l+=u(a)}for(var c=n-i-1;c>=i;c--){var p=t.children[c];o(s,t.leaf?e(p):p),l+=u(s)}return l},r.prototype._adjustParentBBoxes=function(t,i,n){for(var r=n;r>=0;r--)o(i[r],t)},r.prototype._condense=function(t){for(var i=t.length-1,n=void 0;i>=0;i--)0===t[i].children.length?i>0?(n=t[i-1].children).splice(n.indexOf(t[i]),1):this.clear():a(t[i],this.toBBox)},r});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexports.earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.factors = {\n    centimeters: exports.earthRadius * 100,\n    centimetres: exports.earthRadius * 100,\n    degrees: exports.earthRadius / 111325,\n    feet: exports.earthRadius * 3.28084,\n    inches: exports.earthRadius * 39.37,\n    kilometers: exports.earthRadius / 1000,\n    kilometres: exports.earthRadius / 1000,\n    meters: exports.earthRadius,\n    metres: exports.earthRadius,\n    miles: exports.earthRadius / 1609.344,\n    millimeters: exports.earthRadius * 1000,\n    millimetres: exports.earthRadius * 1000,\n    nauticalmiles: exports.earthRadius / 1852,\n    radians: 1,\n    yards: exports.earthRadius * 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.37,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / exports.earthRadius,\n    yards: 1.0936133,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    hectares: 0.0001,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\nexports.feature = feature;\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nfunction geometry(type, coordinates, _options) {\n    if (_options === void 0) { _options = {}; }\n    switch (type) {\n        case \"Point\":\n            return point(coordinates).geometry;\n        case \"LineString\":\n            return lineString(coordinates).geometry;\n        case \"Polygon\":\n            return polygon(coordinates).geometry;\n        case \"MultiPoint\":\n            return multiPoint(coordinates).geometry;\n        case \"MultiLineString\":\n            return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\":\n            return multiPolygon(coordinates).geometry;\n        default:\n            throw new Error(type + \" is invalid\");\n    }\n}\nexports.geometry = geometry;\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (!coordinates) {\n        throw new Error(\"coordinates is required\");\n    }\n    if (!Array.isArray(coordinates)) {\n        throw new Error(\"coordinates must be an Array\");\n    }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be at least 2 numbers long\");\n    }\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n        throw new Error(\"coordinates must contain numbers\");\n    }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.point = point;\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nfunction points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\nexports.points = points;\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.polygon = polygon;\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nfunction polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\nexports.polygons = polygons;\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nfunction lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.lineString = lineString;\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nfunction lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\nexports.lineStrings = lineStrings;\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nfunction featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\nexports.featureCollection = featureCollection;\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiLineString = multiLineString;\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPoint = multiPoint;\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPolygon = multiPolygon;\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nfunction geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\nexports.geometryCollection = geometryCollection;\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\nexports.round = round;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\nexports.radiansToLength = radiansToLength;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\nexports.lengthToRadians = lengthToRadians;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\nexports.lengthToDegrees = lengthToDegrees;\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\nexports.bearingToAzimuth = bearingToAzimuth;\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return (degrees * 180) / Math.PI;\n}\nexports.radiansToDegrees = radiansToDegrees;\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return (radians * Math.PI) / 180;\n}\nexports.degreesToRadians = degreesToRadians;\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nfunction convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\nexports.convertLength = convertLength;\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted area\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = exports.areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = exports.areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\nexports.convertArea = convertArea;\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\nexports.isNumber = isNumber;\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nfunction isObject(input) {\n    return !!input && input.constructor === Object;\n}\nexports.isObject = isObject;\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nfunction validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\nexports.validateBBox = validateBBox;\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nfunction validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\nexports.validateId = validateId;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar helpers = require('@turf/helpers');\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n  // Handles null Geometry -- Skips this GeoJSON\n  if (geojson === null) return;\n  var j,\n    k,\n    l,\n    geometry,\n    stopG,\n    coords,\n    geometryMaybeCollection,\n    wrapShrink = 0,\n    coordIndex = 0,\n    isGeometryCollection,\n    type = geojson.type,\n    isFeatureCollection = type === \"FeatureCollection\",\n    isFeature = type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[featureIndex].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n      var multiFeatureIndex = 0;\n      var geometryIndex = 0;\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[geomIndex]\n        : geometryMaybeCollection;\n\n      // Handles null Geometry -- Skips this geometry\n      if (geometry === null) continue;\n      coords = geometry.coordinates;\n      var geomType = geometry.type;\n\n      wrapShrink =\n        excludeWrapCoord &&\n        (geomType === \"Polygon\" || geomType === \"MultiPolygon\")\n          ? 1\n          : 0;\n\n      switch (geomType) {\n        case null:\n          break;\n        case \"Point\":\n          if (\n            callback(\n              coords,\n              coordIndex,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n          coordIndex++;\n          multiFeatureIndex++;\n          break;\n        case \"LineString\":\n        case \"MultiPoint\":\n          for (j = 0; j < coords.length; j++) {\n            if (\n              callback(\n                coords[j],\n                coordIndex,\n                featureIndex,\n                multiFeatureIndex,\n                geometryIndex\n              ) === false\n            )\n              return false;\n            coordIndex++;\n            if (geomType === \"MultiPoint\") multiFeatureIndex++;\n          }\n          if (geomType === \"LineString\") multiFeatureIndex++;\n          break;\n        case \"Polygon\":\n        case \"MultiLineString\":\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length - wrapShrink; k++) {\n              if (\n                callback(\n                  coords[j][k],\n                  coordIndex,\n                  featureIndex,\n                  multiFeatureIndex,\n                  geometryIndex\n                ) === false\n              )\n                return false;\n              coordIndex++;\n            }\n            if (geomType === \"MultiLineString\") multiFeatureIndex++;\n            if (geomType === \"Polygon\") geometryIndex++;\n          }\n          if (geomType === \"Polygon\") multiFeatureIndex++;\n          break;\n        case \"MultiPolygon\":\n          for (j = 0; j < coords.length; j++) {\n            geometryIndex = 0;\n            for (k = 0; k < coords[j].length; k++) {\n              for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                if (\n                  callback(\n                    coords[j][k][l],\n                    coordIndex,\n                    featureIndex,\n                    multiFeatureIndex,\n                    geometryIndex\n                  ) === false\n                )\n                  return false;\n                coordIndex++;\n              }\n              geometryIndex++;\n            }\n            multiFeatureIndex++;\n          }\n          break;\n        case \"GeometryCollection\":\n          for (j = 0; j < geometry.geometries.length; j++)\n            if (\n              coordEach(geometry.geometries[j], callback, excludeWrapCoord) ===\n              false\n            )\n              return false;\n          break;\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n  }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n  var previousValue = initialValue;\n  coordEach(\n    geojson,\n    function (\n      currentCoord,\n      coordIndex,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex\n    ) {\n      if (coordIndex === 0 && initialValue === undefined)\n        previousValue = currentCoord;\n      else\n        previousValue = callback(\n          previousValue,\n          currentCoord,\n          coordIndex,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    },\n    excludeWrapCoord\n  );\n  return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n  var i;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      for (i = 0; i < geojson.features.length; i++) {\n        if (callback(geojson.features[i].properties, i) === false) break;\n      }\n      break;\n    case \"Feature\":\n      callback(geojson.properties, 0);\n      break;\n  }\n}\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  propEach(geojson, function (currentProperties, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentProperties;\n    else\n      previousValue = callback(previousValue, currentProperties, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n  if (geojson.type === \"Feature\") {\n    callback(geojson, 0);\n  } else if (geojson.type === \"FeatureCollection\") {\n    for (var i = 0; i < geojson.features.length; i++) {\n      if (callback(geojson.features[i], i) === false) break;\n    }\n  }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  featureEach(geojson, function (currentFeature, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentFeature;\n    else previousValue = callback(previousValue, currentFeature, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n  var coords = [];\n  coordEach(geojson, function (coord) {\n    coords.push(coord);\n  });\n  return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n  var i,\n    j,\n    g,\n    geometry,\n    stopG,\n    geometryMaybeCollection,\n    isGeometryCollection,\n    featureProperties,\n    featureBBox,\n    featureId,\n    featureIndex = 0,\n    isFeatureCollection = geojson.type === \"FeatureCollection\",\n    isFeature = geojson.type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[i].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    featureProperties = isFeatureCollection\n      ? geojson.features[i].properties\n      : isFeature\n      ? geojson.properties\n      : {};\n    featureBBox = isFeatureCollection\n      ? geojson.features[i].bbox\n      : isFeature\n      ? geojson.bbox\n      : undefined;\n    featureId = isFeatureCollection\n      ? geojson.features[i].id\n      : isFeature\n      ? geojson.id\n      : undefined;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[g]\n        : geometryMaybeCollection;\n\n      // Handle null Geometry\n      if (geometry === null) {\n        if (\n          callback(\n            null,\n            featureIndex,\n            featureProperties,\n            featureBBox,\n            featureId\n          ) === false\n        )\n          return false;\n        continue;\n      }\n      switch (geometry.type) {\n        case \"Point\":\n        case \"LineString\":\n        case \"MultiPoint\":\n        case \"Polygon\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\": {\n          if (\n            callback(\n              geometry,\n              featureIndex,\n              featureProperties,\n              featureBBox,\n              featureId\n            ) === false\n          )\n            return false;\n          break;\n        }\n        case \"GeometryCollection\": {\n          for (j = 0; j < geometry.geometries.length; j++) {\n            if (\n              callback(\n                geometry.geometries[j],\n                featureIndex,\n                featureProperties,\n                featureBBox,\n                featureId\n              ) === false\n            )\n              return false;\n          }\n          break;\n        }\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n    // Only increase `featureIndex` per each feature\n    featureIndex++;\n  }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  geomEach(\n    geojson,\n    function (\n      currentGeometry,\n      featureIndex,\n      featureProperties,\n      featureBBox,\n      featureId\n    ) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentGeometry;\n      else\n        previousValue = callback(\n          previousValue,\n          currentGeometry,\n          featureIndex,\n          featureProperties,\n          featureBBox,\n          featureId\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n  geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n    // Callback for single geometry\n    var type = geometry === null ? null : geometry.type;\n    switch (type) {\n      case null:\n      case \"Point\":\n      case \"LineString\":\n      case \"Polygon\":\n        if (\n          callback(\n            helpers.feature(geometry, properties, { bbox: bbox, id: id }),\n            featureIndex,\n            0\n          ) === false\n        )\n          return false;\n        return;\n    }\n\n    var geomType;\n\n    // Callback for multi-geometry\n    switch (type) {\n      case \"MultiPoint\":\n        geomType = \"Point\";\n        break;\n      case \"MultiLineString\":\n        geomType = \"LineString\";\n        break;\n      case \"MultiPolygon\":\n        geomType = \"Polygon\";\n        break;\n    }\n\n    for (\n      var multiFeatureIndex = 0;\n      multiFeatureIndex < geometry.coordinates.length;\n      multiFeatureIndex++\n    ) {\n      var coordinate = geometry.coordinates[multiFeatureIndex];\n      var geom = {\n        type: geomType,\n        coordinates: coordinate,\n      };\n      if (\n        callback(helpers.feature(geom, properties), featureIndex, multiFeatureIndex) ===\n        false\n      )\n        return false;\n    }\n  });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  flattenEach(\n    geojson,\n    function (currentFeature, featureIndex, multiFeatureIndex) {\n      if (\n        featureIndex === 0 &&\n        multiFeatureIndex === 0 &&\n        initialValue === undefined\n      )\n        previousValue = currentFeature;\n      else\n        previousValue = callback(\n          previousValue,\n          currentFeature,\n          featureIndex,\n          multiFeatureIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    var segmentIndex = 0;\n\n    // Exclude null Geometries\n    if (!feature.geometry) return;\n    // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n    var type = feature.geometry.type;\n    if (type === \"Point\" || type === \"MultiPoint\") return;\n\n    // Generate 2-vertex line segments\n    var previousCoords;\n    var previousFeatureIndex = 0;\n    var previousMultiIndex = 0;\n    var prevGeomIndex = 0;\n    if (\n      coordEach(\n        feature,\n        function (\n          currentCoord,\n          coordIndex,\n          featureIndexCoord,\n          multiPartIndexCoord,\n          geometryIndex\n        ) {\n          // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n          if (\n            previousCoords === undefined ||\n            featureIndex > previousFeatureIndex ||\n            multiPartIndexCoord > previousMultiIndex ||\n            geometryIndex > prevGeomIndex\n          ) {\n            previousCoords = currentCoord;\n            previousFeatureIndex = featureIndex;\n            previousMultiIndex = multiPartIndexCoord;\n            prevGeomIndex = geometryIndex;\n            segmentIndex = 0;\n            return;\n          }\n          var currentSegment = helpers.lineString(\n            [previousCoords, currentCoord],\n            feature.properties\n          );\n          if (\n            callback(\n              currentSegment,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex,\n              segmentIndex\n            ) === false\n          )\n            return false;\n          segmentIndex++;\n          previousCoords = currentCoord;\n        }\n      ) === false\n    )\n      return false;\n  });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentIndex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  var started = false;\n  segmentEach(\n    geojson,\n    function (\n      currentSegment,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex,\n      segmentIndex\n    ) {\n      if (started === false && initialValue === undefined)\n        previousValue = currentSegment;\n      else\n        previousValue = callback(\n          previousValue,\n          currentSegment,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex,\n          segmentIndex\n        );\n      started = true;\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n  // validation\n  if (!geojson) throw new Error(\"geojson is required\");\n\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    if (feature.geometry === null) return;\n    var type = feature.geometry.type;\n    var coords = feature.geometry.coordinates;\n    switch (type) {\n      case \"LineString\":\n        if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false)\n          return false;\n        break;\n      case \"Polygon\":\n        for (\n          var geometryIndex = 0;\n          geometryIndex < coords.length;\n          geometryIndex++\n        ) {\n          if (\n            callback(\n              helpers.lineString(coords[geometryIndex], feature.properties),\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n        }\n        break;\n    }\n  });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  lineEach(\n    geojson,\n    function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentLine;\n      else\n        previousValue = callback(\n          previousValue,\n          currentLine,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!helpers.isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var segmentIndex = options.segmentIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find SegmentIndex\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n      if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n      return helpers.lineString(\n        [coords[segmentIndex], coords[segmentIndex + 1]],\n        properties,\n        options\n      );\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[geometryIndex][segmentIndex],\n          coords[geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[multiFeatureIndex][segmentIndex],\n          coords[multiFeatureIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex =\n          coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n      return helpers.lineString(\n        [\n          coords[multiFeatureIndex][geometryIndex][segmentIndex],\n          coords[multiFeatureIndex][geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!helpers.isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var coordIndex = options.coordIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find Coord Index\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n      return helpers.point(coords, properties, options);\n    case \"MultiPoint\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      return helpers.point(coords[multiFeatureIndex], properties, options);\n    case \"LineString\":\n      if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n      return helpers.point(coords[coordIndex], properties, options);\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[geometryIndex].length + coordIndex;\n      return helpers.point(coords[geometryIndex][coordIndex], properties, options);\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[multiFeatureIndex].length + coordIndex;\n      return helpers.point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex =\n          coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n      return helpers.point(\n        coords[multiFeatureIndex][geometryIndex][coordIndex],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\nexports.coordAll = coordAll;\nexports.coordEach = coordEach;\nexports.coordReduce = coordReduce;\nexports.featureEach = featureEach;\nexports.featureReduce = featureReduce;\nexports.findPoint = findPoint;\nexports.findSegment = findSegment;\nexports.flattenEach = flattenEach;\nexports.flattenReduce = flattenReduce;\nexports.geomEach = geomEach;\nexports.geomReduce = geomReduce;\nexports.lineEach = lineEach;\nexports.lineReduce = lineReduce;\nexports.propEach = propEach;\nexports.propReduce = propReduce;\nexports.segmentEach = segmentEach;\nexports.segmentReduce = segmentReduce;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar meta_1 = require(\"@turf/meta\");\n/**\n * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.\n *\n * @name bbox\n * @param {GeoJSON} geojson any GeoJSON object\n * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);\n * var bbox = turf.bbox(line);\n * var bboxPolygon = turf.bboxPolygon(bbox);\n *\n * //addToMap\n * var addToMap = [line, bboxPolygon]\n */\nfunction bbox(geojson) {\n    var result = [Infinity, Infinity, -Infinity, -Infinity];\n    meta_1.coordEach(geojson, function (coord) {\n        if (result[0] > coord[0]) {\n            result[0] = coord[0];\n        }\n        if (result[1] > coord[1]) {\n            result[1] = coord[1];\n        }\n        if (result[2] < coord[0]) {\n            result[2] = coord[0];\n        }\n        if (result[3] < coord[1]) {\n            result[3] = coord[1];\n        }\n    });\n    return result;\n}\nbbox[\"default\"] = bbox;\nexports.default = bbox;\n","var rbush = require('rbush');\nvar helpers = require('@turf/helpers');\nvar meta = require('@turf/meta');\nvar turfBBox = require('@turf/bbox').default;\nvar featureEach = meta.featureEach;\nvar coordEach = meta.coordEach;\nvar polygon = helpers.polygon;\nvar featureCollection = helpers.featureCollection;\n\n/**\n * GeoJSON implementation of [RBush](https://github.com/mourner/rbush#rbush) spatial index.\n *\n * @name rbush\n * @param {number} [maxEntries=9] defines the maximum number of entries in a tree node. 9 (used by default) is a\n * reasonable choice for most applications. Higher value means faster insertion and slower search, and vice versa.\n * @returns {RBush} GeoJSON RBush\n * @example\n * var geojsonRbush = require('geojson-rbush').default;\n * var tree = geojsonRbush();\n */\nfunction geojsonRbush(maxEntries) {\n    var tree = new rbush(maxEntries);\n    /**\n     * [insert](https://github.com/mourner/rbush#data-format)\n     *\n     * @param {Feature} feature insert single GeoJSON Feature\n     * @returns {RBush} GeoJSON RBush\n     * @example\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n     * tree.insert(poly)\n     */\n    tree.insert = function (feature) {\n        if (feature.type !== 'Feature') throw new Error('invalid feature');\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n        return rbush.prototype.insert.call(this, feature);\n    };\n\n    /**\n     * [load](https://github.com/mourner/rbush#bulk-inserting-data)\n     *\n     * @param {FeatureCollection|Array<Feature>} features load entire GeoJSON FeatureCollection\n     * @returns {RBush} GeoJSON RBush\n     * @example\n     * var polys = turf.polygons([\n     *     [[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]],\n     *     [[[-93, 32], [-83, 32], [-83, 39], [-93, 39], [-93, 32]]]\n     * ]);\n     * tree.load(polys);\n     */\n    tree.load = function (features) {\n        var load = [];\n        // Load an Array of Features\n        if (Array.isArray(features)) {\n            features.forEach(function (feature) {\n                if (feature.type !== 'Feature') throw new Error('invalid features');\n                feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n                load.push(feature);\n            });\n        } else {\n            // Load a FeatureCollection\n            featureEach(features, function (feature) {\n                if (feature.type !== 'Feature') throw new Error('invalid features');\n                feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n                load.push(feature);\n            });\n        }\n        return rbush.prototype.load.call(this, load);\n    };\n\n    /**\n     * [remove](https://github.com/mourner/rbush#removing-data)\n     *\n     * @param {Feature} feature remove single GeoJSON Feature\n     * @param {Function} equals Pass a custom equals function to compare by value for removal.\n     * @returns {RBush} GeoJSON RBush\n     * @example\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n     *\n     * tree.remove(poly);\n     */\n    tree.remove = function (feature, equals) {\n        if (feature.type !== 'Feature') throw new Error('invalid feature');\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n        return rbush.prototype.remove.call(this, feature, equals);\n    };\n\n    /**\n     * [clear](https://github.com/mourner/rbush#removing-data)\n     *\n     * @returns {RBush} GeoJSON Rbush\n     * @example\n     * tree.clear()\n     */\n    tree.clear = function () {\n        return rbush.prototype.clear.call(this);\n    };\n\n    /**\n     * [search](https://github.com/mourner/rbush#search)\n     *\n     * @param {BBox|FeatureCollection|Feature} geojson search with GeoJSON\n     * @returns {FeatureCollection} all features that intersects with the given GeoJSON.\n     * @example\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n     *\n     * tree.search(poly);\n     */\n    tree.search = function (geojson) {\n        var features = rbush.prototype.search.call(this, this.toBBox(geojson));\n        return featureCollection(features);\n    };\n\n    /**\n     * [collides](https://github.com/mourner/rbush#collisions)\n     *\n     * @param {BBox|FeatureCollection|Feature} geojson collides with GeoJSON\n     * @returns {boolean} true if there are any items intersecting the given GeoJSON, otherwise false.\n     * @example\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n     *\n     * tree.collides(poly);\n     */\n    tree.collides = function (geojson) {\n        return rbush.prototype.collides.call(this, this.toBBox(geojson));\n    };\n\n    /**\n     * [all](https://github.com/mourner/rbush#search)\n     *\n     * @returns {FeatureCollection} all the features in RBush\n     * @example\n     * tree.all()\n     */\n    tree.all = function () {\n        var features = rbush.prototype.all.call(this);\n        return featureCollection(features);\n    };\n\n    /**\n     * [toJSON](https://github.com/mourner/rbush#export-and-import)\n     *\n     * @returns {any} export data as JSON object\n     * @example\n     * var exported = tree.toJSON()\n     */\n    tree.toJSON = function () {\n        return rbush.prototype.toJSON.call(this);\n    };\n\n    /**\n     * [fromJSON](https://github.com/mourner/rbush#export-and-import)\n     *\n     * @param {any} json import previously exported data\n     * @returns {RBush} GeoJSON RBush\n     * @example\n     * var exported = {\n     *   \"children\": [\n     *     {\n     *       \"type\": \"Feature\",\n     *       \"geometry\": {\n     *         \"type\": \"Point\",\n     *         \"coordinates\": [110, 50]\n     *       },\n     *       \"properties\": {},\n     *       \"bbox\": [110, 50, 110, 50]\n     *     }\n     *   ],\n     *   \"height\": 1,\n     *   \"leaf\": true,\n     *   \"minX\": 110,\n     *   \"minY\": 50,\n     *   \"maxX\": 110,\n     *   \"maxY\": 50\n     * }\n     * tree.fromJSON(exported)\n     */\n    tree.fromJSON = function (json) {\n        return rbush.prototype.fromJSON.call(this, json);\n    };\n\n    /**\n     * Converts GeoJSON to {minX, minY, maxX, maxY} schema\n     *\n     * @private\n     * @param {BBox|FeatureCollection|Feature} geojson feature(s) to retrieve BBox from\n     * @returns {Object} converted to {minX, minY, maxX, maxY}\n     */\n    tree.toBBox = function (geojson) {\n        var bbox;\n        if (geojson.bbox) bbox = geojson.bbox;\n        else if (Array.isArray(geojson) && geojson.length === 4) bbox = geojson;\n        else if (Array.isArray(geojson) && geojson.length === 6) bbox = [geojson[0], geojson[1], geojson[3], geojson[4]];\n        else if (geojson.type === 'Feature') bbox = turfBBox(geojson);\n        else if (geojson.type === 'FeatureCollection') bbox = turfBBox(geojson);\n        else throw new Error('invalid geojson')\n\n        return {\n            minX: bbox[0],\n            minY: bbox[1],\n            maxX: bbox[2],\n            maxY: bbox[3]\n        };\n    };\n    return tree;\n}\n\nmodule.exports = geojsonRbush;\nmodule.exports.default = geojsonRbush;\n","import { feature, featureCollection, point, } from \"@turf/helpers\";\nimport { getCoords } from \"@turf/invariant\";\nimport lineSegment from \"@turf/line-segment\";\nimport { featureEach } from \"@turf/meta\";\nimport rbush from \"geojson-rbush\";\n/**\n * Takes any LineString or Polygon GeoJSON and returns the intersecting point(s).\n *\n * @name lineIntersect\n * @param {GeoJSON} line1 any LineString or Polygon\n * @param {GeoJSON} line2 any LineString or Polygon\n * @returns {FeatureCollection<Point>} point(s) that intersect both\n * @example\n * var line1 = turf.lineString([[126, -11], [129, -21]]);\n * var line2 = turf.lineString([[123, -18], [131, -14]]);\n * var intersects = turf.lineIntersect(line1, line2);\n *\n * //addToMap\n * var addToMap = [line1, line2, intersects]\n */\nfunction lineIntersect(line1, line2) {\n    var unique = {};\n    var results = [];\n    // First, normalize geometries to features\n    // Then, handle simple 2-vertex segments\n    if (line1.type === \"LineString\") {\n        line1 = feature(line1);\n    }\n    if (line2.type === \"LineString\") {\n        line2 = feature(line2);\n    }\n    if (line1.type === \"Feature\" &&\n        line2.type === \"Feature\" &&\n        line1.geometry !== null &&\n        line2.geometry !== null &&\n        line1.geometry.type === \"LineString\" &&\n        line2.geometry.type === \"LineString\" &&\n        line1.geometry.coordinates.length === 2 &&\n        line2.geometry.coordinates.length === 2) {\n        var intersect = intersects(line1, line2);\n        if (intersect) {\n            results.push(intersect);\n        }\n        return featureCollection(results);\n    }\n    // Handles complex GeoJSON Geometries\n    var tree = rbush();\n    tree.load(lineSegment(line2));\n    featureEach(lineSegment(line1), function (segment) {\n        featureEach(tree.search(segment), function (match) {\n            var intersect = intersects(segment, match);\n            if (intersect) {\n                // prevent duplicate points https://github.com/Turfjs/turf/issues/688\n                var key = getCoords(intersect).join(\",\");\n                if (!unique[key]) {\n                    unique[key] = true;\n                    results.push(intersect);\n                }\n            }\n        });\n    });\n    return featureCollection(results);\n}\n/**\n * Find a point that intersects LineStrings with two coordinates each\n *\n * @private\n * @param {Feature<LineString>} line1 GeoJSON LineString (Must only contain 2 coordinates)\n * @param {Feature<LineString>} line2 GeoJSON LineString (Must only contain 2 coordinates)\n * @returns {Feature<Point>} intersecting GeoJSON Point\n */\nfunction intersects(line1, line2) {\n    var coords1 = getCoords(line1);\n    var coords2 = getCoords(line2);\n    if (coords1.length !== 2) {\n        throw new Error(\"<intersects> line1 must only contain 2 coordinates\");\n    }\n    if (coords2.length !== 2) {\n        throw new Error(\"<intersects> line2 must only contain 2 coordinates\");\n    }\n    var x1 = coords1[0][0];\n    var y1 = coords1[0][1];\n    var x2 = coords1[1][0];\n    var y2 = coords1[1][1];\n    var x3 = coords2[0][0];\n    var y3 = coords2[0][1];\n    var x4 = coords2[1][0];\n    var y4 = coords2[1][1];\n    var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n    var numeA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n    var numeB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n    if (denom === 0) {\n        if (numeA === 0 && numeB === 0) {\n            return null;\n        }\n        return null;\n    }\n    var uA = numeA / denom;\n    var uB = numeB / denom;\n    if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n        var x = x1 + uA * (x2 - x1);\n        var y = y1 + uA * (y2 - y1);\n        return point([x, y]);\n    }\n    return null;\n}\nexport default lineIntersect;\n","import distance from \"@turf/distance\";\nimport { segmentReduce } from \"@turf/meta\";\n/**\n * Takes a {@link GeoJSON} and measures its length in the specified units, {@link (Multi)Point}'s distance are ignored.\n *\n * @name length\n * @param {Feature<LineString|MultiLineString>} geojson GeoJSON to measure\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units=kilometers] can be degrees, radians, miles, or kilometers\n * @returns {number} length of GeoJSON\n * @example\n * var line = turf.lineString([[115, -32], [131, -22], [143, -25], [150, -34]]);\n * var length = turf.length(line, {units: 'miles'});\n *\n * //addToMap\n * var addToMap = [line];\n * line.properties.distance = length;\n */\nexport default function length(geojson, options) {\n    if (options === void 0) { options = {}; }\n    // Calculate distance from 2-vertex line segments\n    return segmentReduce(geojson, function (previousValue, segment) {\n        var coords = segment.geometry.coordinates;\n        return previousValue + distance(coords[0], coords[1], options);\n    }, 0);\n}\n","import bearing from '@turf/bearing';\nimport distance from '@turf/distance';\nimport destination from '@turf/destination';\nimport { isObject, lineString } from '@turf/helpers';\n\n/**\n * Takes a {@link LineString|line}, a specified distance along the line to a start {@link Point},\n * and a specified  distance along the line to a stop point\n * and returns a subsection of the line in-between those points.\n *\n * This can be useful for extracting only the part of a route between two distances.\n *\n * @name lineSliceAlong\n * @param {Feature<LineString>|LineString} line input line\n * @param {number} startDist distance along the line to starting point\n * @param {number} stopDist distance along the line to ending point\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @returns {Feature<LineString>} sliced line\n * @example\n * var line = turf.lineString([[7, 45], [9, 45], [14, 40], [14, 41]]);\n * var start = 12.5;\n * var stop = 25;\n * var sliced = turf.lineSliceAlong(line, start, stop, {units: 'miles'});\n *\n * //addToMap\n * var addToMap = [line, start, stop, sliced]\n */\nfunction lineSliceAlong(line, startDist, stopDist, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n\n  var coords;\n  var slice = [];\n\n  // Validation\n  if (line.type === \"Feature\") coords = line.geometry.coordinates;\n  else if (line.type === \"LineString\") coords = line.coordinates;\n  else throw new Error(\"input must be a LineString Feature or Geometry\");\n  var origCoordsLength = coords.length;\n  var travelled = 0;\n  var overshot, direction, interpolated;\n  for (var i = 0; i < coords.length; i++) {\n    if (startDist >= travelled && i === coords.length - 1) break;\n    else if (travelled > startDist && slice.length === 0) {\n      overshot = startDist - travelled;\n      if (!overshot) {\n        slice.push(coords[i]);\n        return lineString(slice);\n      }\n      direction = bearing(coords[i], coords[i - 1]) - 180;\n      interpolated = destination(coords[i], overshot, direction, options);\n      slice.push(interpolated.geometry.coordinates);\n    }\n\n    if (travelled >= stopDist) {\n      overshot = stopDist - travelled;\n      if (!overshot) {\n        slice.push(coords[i]);\n        return lineString(slice);\n      }\n      direction = bearing(coords[i], coords[i - 1]) - 180;\n      interpolated = destination(coords[i], overshot, direction, options);\n      slice.push(interpolated.geometry.coordinates);\n      return lineString(slice);\n    }\n\n    if (travelled >= startDist) {\n      slice.push(coords[i]);\n    }\n\n    if (i === coords.length - 1) {\n      return lineString(slice);\n    }\n\n    travelled += distance(coords[i], coords[i + 1], options);\n  }\n\n  if (travelled < startDist && coords.length === origCoordsLength)\n    throw new Error(\"Start position is beyond line\");\n\n  var last = coords[coords.length - 1];\n  return lineString([last, last]);\n}\n\nexport default lineSliceAlong;\n","import { featureCollection, lineString, multiLineString } from \"@turf/helpers\";\nimport { getGeom } from \"@turf/invariant\";\n/**\n * Converts a {@link Polygon} to {@link LineString|(Multi)LineString} or {@link MultiPolygon} to a\n * {@link FeatureCollection} of {@link LineString|(Multi)LineString}.\n *\n * @name polygonToLine\n * @param {Feature<Polygon|MultiPolygon>} poly Feature to convert\n * @param {Object} [options={}] Optional parameters\n * @param {Object} [options.properties={}] translates GeoJSON properties to Feature\n * @returns {FeatureCollection|Feature<LineString|MultiLinestring>} converted (Multi)Polygon to (Multi)LineString\n * @example\n * var poly = turf.polygon([[[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]]);\n *\n * var line = turf.polygonToLine(poly);\n *\n * //addToMap\n * var addToMap = [line];\n */\nexport default function (poly, options) {\n    if (options === void 0) { options = {}; }\n    var geom = getGeom(poly);\n    if (!options.properties && poly.type === \"Feature\") {\n        options.properties = poly.properties;\n    }\n    switch (geom.type) {\n        case \"Polygon\":\n            return polygonToLine(geom, options);\n        case \"MultiPolygon\":\n            return multiPolygonToLine(geom, options);\n        default:\n            throw new Error(\"invalid poly\");\n    }\n}\n/**\n * @private\n */\nexport function polygonToLine(poly, options) {\n    if (options === void 0) { options = {}; }\n    var geom = getGeom(poly);\n    var coords = geom.coordinates;\n    var properties = options.properties\n        ? options.properties\n        : poly.type === \"Feature\"\n            ? poly.properties\n            : {};\n    return coordsToLine(coords, properties);\n}\n/**\n * @private\n */\nexport function multiPolygonToLine(multiPoly, options) {\n    if (options === void 0) { options = {}; }\n    var geom = getGeom(multiPoly);\n    var coords = geom.coordinates;\n    var properties = options.properties\n        ? options.properties\n        : multiPoly.type === \"Feature\"\n            ? multiPoly.properties\n            : {};\n    var lines = [];\n    coords.forEach(function (coord) {\n        lines.push(coordsToLine(coord, properties));\n    });\n    return featureCollection(lines);\n}\n/**\n * @private\n */\nexport function coordsToLine(coords, properties) {\n    if (coords.length > 1) {\n        return multiLineString(coords, properties);\n    }\n    return lineString(coords[0], properties);\n}\n","import booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport lineIntersect from \"@turf/line-intersect\";\nimport { flattenEach } from \"@turf/meta\";\nimport polygonToLine from \"@turf/polygon-to-line\";\n/**\n * Boolean-disjoint returns (TRUE) if the intersection of the two geometries is an empty set.\n *\n * @name booleanDisjoint\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\n * @returns {boolean} true/false\n * @example\n * var point = turf.point([2, 2]);\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n *\n * turf.booleanDisjoint(line, point);\n * //=true\n */\nfunction booleanDisjoint(feature1, feature2) {\n    var bool = true;\n    flattenEach(feature1, function (flatten1) {\n        flattenEach(feature2, function (flatten2) {\n            if (bool === false) {\n                return false;\n            }\n            bool = disjoint(flatten1.geometry, flatten2.geometry);\n        });\n    });\n    return bool;\n}\n/**\n * Disjoint operation for simple Geometries (Point/LineString/Polygon)\n *\n * @private\n * @param {Geometry<any>} geom1 GeoJSON Geometry\n * @param {Geometry<any>} geom2 GeoJSON Geometry\n * @returns {boolean} true/false\n */\nfunction disjoint(geom1, geom2) {\n    switch (geom1.type) {\n        case \"Point\":\n            switch (geom2.type) {\n                case \"Point\":\n                    return !compareCoords(geom1.coordinates, geom2.coordinates);\n                case \"LineString\":\n                    return !isPointOnLine(geom2, geom1);\n                case \"Polygon\":\n                    return !booleanPointInPolygon(geom1, geom2);\n            }\n            /* istanbul ignore next */\n            break;\n        case \"LineString\":\n            switch (geom2.type) {\n                case \"Point\":\n                    return !isPointOnLine(geom1, geom2);\n                case \"LineString\":\n                    return !isLineOnLine(geom1, geom2);\n                case \"Polygon\":\n                    return !isLineInPoly(geom2, geom1);\n            }\n            /* istanbul ignore next */\n            break;\n        case \"Polygon\":\n            switch (geom2.type) {\n                case \"Point\":\n                    return !booleanPointInPolygon(geom2, geom1);\n                case \"LineString\":\n                    return !isLineInPoly(geom1, geom2);\n                case \"Polygon\":\n                    return !isPolyInPoly(geom2, geom1);\n            }\n    }\n    return false;\n}\n// http://stackoverflow.com/a/11908158/1979085\nfunction isPointOnLine(lineString, pt) {\n    for (var i = 0; i < lineString.coordinates.length - 1; i++) {\n        if (isPointOnLineSegment(lineString.coordinates[i], lineString.coordinates[i + 1], pt.coordinates)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isLineOnLine(lineString1, lineString2) {\n    var doLinesIntersect = lineIntersect(lineString1, lineString2);\n    if (doLinesIntersect.features.length > 0) {\n        return true;\n    }\n    return false;\n}\nfunction isLineInPoly(polygon, lineString) {\n    for (var _i = 0, _a = lineString.coordinates; _i < _a.length; _i++) {\n        var coord = _a[_i];\n        if (booleanPointInPolygon(coord, polygon)) {\n            return true;\n        }\n    }\n    var doLinesIntersect = lineIntersect(lineString, polygonToLine(polygon));\n    if (doLinesIntersect.features.length > 0) {\n        return true;\n    }\n    return false;\n}\n/**\n * Is Polygon (geom1) in Polygon (geom2)\n * Only takes into account outer rings\n * See http://stackoverflow.com/a/4833823/1979085\n *\n * @private\n * @param {Geometry|Feature<Polygon>} feature1 Polygon1\n * @param {Geometry|Feature<Polygon>} feature2 Polygon2\n * @returns {boolean} true/false\n */\nfunction isPolyInPoly(feature1, feature2) {\n    for (var _i = 0, _a = feature1.coordinates[0]; _i < _a.length; _i++) {\n        var coord1 = _a[_i];\n        if (booleanPointInPolygon(coord1, feature2)) {\n            return true;\n        }\n    }\n    for (var _b = 0, _c = feature2.coordinates[0]; _b < _c.length; _b++) {\n        var coord2 = _c[_b];\n        if (booleanPointInPolygon(coord2, feature1)) {\n            return true;\n        }\n    }\n    var doLinesIntersect = lineIntersect(polygonToLine(feature1), polygonToLine(feature2));\n    if (doLinesIntersect.features.length > 0) {\n        return true;\n    }\n    return false;\n}\nfunction isPointOnLineSegment(lineSegmentStart, lineSegmentEnd, pt) {\n    var dxc = pt[0] - lineSegmentStart[0];\n    var dyc = pt[1] - lineSegmentStart[1];\n    var dxl = lineSegmentEnd[0] - lineSegmentStart[0];\n    var dyl = lineSegmentEnd[1] - lineSegmentStart[1];\n    var cross = dxc * dyl - dyc * dxl;\n    if (cross !== 0) {\n        return false;\n    }\n    if (Math.abs(dxl) >= Math.abs(dyl)) {\n        if (dxl > 0) {\n            return lineSegmentStart[0] <= pt[0] && pt[0] <= lineSegmentEnd[0];\n        }\n        else {\n            return lineSegmentEnd[0] <= pt[0] && pt[0] <= lineSegmentStart[0];\n        }\n    }\n    else if (dyl > 0) {\n        return lineSegmentStart[1] <= pt[1] && pt[1] <= lineSegmentEnd[1];\n    }\n    else {\n        return lineSegmentEnd[1] <= pt[1] && pt[1] <= lineSegmentStart[1];\n    }\n}\n/**\n * compareCoords\n *\n * @private\n * @param {Position} pair1 point [x,y]\n * @param {Position} pair2 point [x,y]\n * @returns {boolean} true/false if coord pairs match\n */\nfunction compareCoords(pair1, pair2) {\n    return pair1[0] === pair2[0] && pair1[1] === pair2[1];\n}\nexport default booleanDisjoint;\n","import booleanDisjoint from \"@turf/boolean-disjoint\";\nimport { flattenEach } from \"@turf/meta\";\n/**\n * Boolean-intersects returns (TRUE) two geometries intersect.\n *\n * @name booleanIntersects\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\n * @returns {boolean} true/false\n * @example\n * var point = turf.point([2, 2]);\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n *\n * turf.booleanIntersects(line, point);\n * //=true\n */\nexport default function booleanIntersects(feature1, feature2) {\n    var bool = false;\n    flattenEach(feature1, function (flatten1) {\n        flattenEach(feature2, function (flatten2) {\n            if (bool === true) {\n                return true;\n            }\n            bool = !booleanDisjoint(flatten1.geometry, flatten2.geometry);\n        });\n    });\n    return bool;\n}\n"],"names":["distance","bbox","feature","point","polygon","bearing","this","t","r","e","a","h","n","o","s","l","f","u","m","c","p","d","i","lineString","multiLineString","isNumber","featureCollection","radiansToLength","lengthToRadians","radiansToDegrees","degreesToRadians","length","isObject","js","require$$0","coordEach","featureEach","geomEach","flattenEach","segmentEach","segmentReduce","rbush","require$$1","require$$2","require$$3","geojsonRbush","geojsonRbushModule","intersect","polygonToLine"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]}