{"version":3,"file":"SegmentTablePage-DrQ6zHzL.js","sources":["../../node_modules/@heroicons/react/24/outline/esm/MagnifyingGlassIcon.js","../../node_modules/@heroicons/react/24/outline/esm/TableCellsIcon.js","../../src/pages/SegmentTablePage.tsx"],"sourcesContent":["import * as React from \"react\";\nfunction MagnifyingGlassIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(MagnifyingGlassIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction TableCellsIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M3.375 19.5h17.25m-17.25 0a1.125 1.125 0 0 1-1.125-1.125M3.375 19.5h7.5c.621 0 1.125-.504 1.125-1.125m-9.75 0V5.625m0 12.75v-1.5c0-.621.504-1.125 1.125-1.125m18.375 2.625V5.625m0 12.75c0 .621-.504 1.125-1.125 1.125m1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125m0 3.75h-7.5A1.125 1.125 0 0 1 12 18.375m9.75-12.75c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125m19.5 0v1.5c0 .621-.504 1.125-1.125 1.125M2.25 5.625v1.5c0 .621.504 1.125 1.125 1.125m0 0h17.25m-17.25 0h7.5c.621 0 1.125.504 1.125 1.125M3.375 8.25c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125m17.25-3.75h-7.5c-.621 0-1.125.504-1.125 1.125m8.625-1.125c.621 0 1.125.504 1.125 1.125v1.5c0 .621-.504 1.125-1.125 1.125m-17.25 0h7.5m-7.5 0c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125M12 10.875v-1.5m0 1.5c0 .621-.504 1.125-1.125 1.125M12 10.875c0 .621.504 1.125 1.125 1.125m-2.25 0c.621 0 1.125.504 1.125 1.125M13.125 12h7.5m-7.5 0c-.621 0-1.125.504-1.125 1.125M20.625 12c.621 0 1.125.504 1.125 1.125v1.5c0 .621-.504 1.125-1.125 1.125m-17.25 0h7.5M12 14.625v-1.5m0 1.5c0 .621-.504 1.125-1.125 1.125M12 14.625c0 .621.504 1.125 1.125 1.125m-2.25 0c.621 0 1.125.504 1.125 1.125m0 1.5v-1.5m0 0c0-.621.504-1.125 1.125-1.125m0 0h7.5\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(TableCellsIcon);\nexport default ForwardRef;","// ---- File: src/pages/SegmentTablePage.tsx ----\nimport { useState, useEffect, useMemo, useCallback } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport Map from '../components/maps/Map'\nimport { indexedDBService } from '../services/indexedDBService'\nimport type { ShorelineSegment } from '../types'\nimport type { LineString, MultiLineString } from 'geojson'\nimport * as turf from '@turf/turf'\nimport L from 'leaflet'\nimport { ErrorAlert } from '../components/common/ErrorAlert'\nimport {\n    ArrowLeftIcon,\n    ArrowRightIcon,\n    MagnifyingGlassIcon,\n    TableCellsIcon,\n    MapIcon as MapOutlineIcon,\n    CheckCircleIcon,\n} from '@heroicons/react/24/outline';\n\nconst ITEMS_PER_PAGE = 10;\n\nexport default function SegmentTablePage() {\n  const navigate = useNavigate();\n  const [segments, setSegments] = useState<ShorelineSegment[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedSegmentId, setSelectedSegmentId] = useState<string | null>(null);\n  const [sortField, setSortField] = useState<string>('properties.index');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [mapInitialBounds, setMapInitialBounds] = useState<L.LatLngBoundsExpression | null>(null);\n\n  useEffect(() => {\n    const loadSegments = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const data = await indexedDBService.getShorelineData('current-segments');\n        if (!data) {\n          setError('No segment data found. Please complete the segmentation step first.');\n          navigate('/segmentation');\n          return;\n        }\n\n        const loadedSegments = data.features\n          .filter(feature =>\n            feature && feature.geometry && (\n              feature.geometry.type === 'LineString' ||\n              feature.geometry.type === 'MultiLineString'\n            )\n          )\n          .map((feature, index) => {\n            const segmentId = feature.properties?.id || `segment-${index + 1}`;\n             let length = feature.properties?.length;\n             if (length === undefined || length === null) {\n               try {\n                 length = turf.length(turf.feature(feature.geometry), { units: 'meters' });\n               } catch (e) {\n                 console.warn(`Could not calculate length for segment ${segmentId}:`, e);\n                 length = 0;\n               }\n             }\n            return {\n              id: segmentId,\n              type: 'Feature' as const,\n              geometry: feature.geometry as LineString | MultiLineString,\n              properties: {\n                ...feature.properties,\n                id: segmentId,\n                index: index + 1,\n                length: length,\n              },\n              parameters: {}\n            };\n          });\n\n        if (loadedSegments.length === 0) {\n          throw new Error('No valid line segments found in the data.');\n        }\n\n        if (loadedSegments.length > 0) {\n          const featuresForBounds = loadedSegments.map(s => ({\n            type: 'Feature' as const,\n            geometry: s.geometry,\n            properties: {}\n          }));\n          const fc = turf.featureCollection(featuresForBounds);\n          try {\n            const bbox = turf.bbox(fc);\n            if (bbox && bbox.length === 4 && bbox.every((b: number) => isFinite(b)) && bbox[0] <= bbox[2] && bbox[1] <= bbox[3]) {\n              const bounds: L.LatLngBoundsExpression = [[bbox[1], bbox[0]], [bbox[3], bbox[2]]];\n              setMapInitialBounds(bounds);\n            } else { console.warn(\"SegmentTablePage: Could not calculate valid initial bounds.\"); }\n          } catch(e) { console.error(\"SegmentTablePage: Error calculating initial bounds:\", e); }\n        }\n\n        setSegments(loadedSegments);\n      } catch (err) {\n        console.error('Error loading segments:', err);\n        setError(`Failed to load segment data: ${err instanceof Error ? err.message : String(err)}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadSegments();\n  }, [navigate]);\n\n  const filteredSegments = useMemo(() => {\n    return segments.filter(segment => {\n      const searchStr = searchTerm.toLowerCase();\n      return (\n        segment.id.toLowerCase().includes(searchStr) || \n        String(segment.properties.index).includes(searchStr)\n      );\n    });\n  }, [segments, searchTerm]);\n\n  const sortedSegments = useMemo(() => {\n    return [...filteredSegments].sort((a, b) => {\n      let aValue: any = a;\n      let bValue: any = b;\n      const fields = sortField.split('.');\n      for (const field of fields) {\n        aValue = aValue?.[field];\n        bValue = bValue?.[field];\n      }\n      if (aValue === undefined || aValue === null) return sortDirection === 'asc' ? -1 : 1;\n      if (bValue === undefined || bValue === null) return sortDirection === 'asc' ? 1 : -1;\n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        aValue = aValue.toLowerCase();\n        bValue = bValue.toLowerCase();\n      }\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n  }, [filteredSegments, sortField, sortDirection]);\n\n  const paginatedSegments = useMemo(() => {\n    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;\n    return sortedSegments.slice(startIndex, startIndex + ITEMS_PER_PAGE);\n  }, [sortedSegments, currentPage]);\n\n  const totalPages = Math.ceil(filteredSegments.length / ITEMS_PER_PAGE);\n  const handleSegmentSelect = useCallback((segmentId: string) => {\n    const newSelectedId = segmentId === selectedSegmentId ? null : segmentId;\n    setSelectedSegmentId(newSelectedId);\n  }, [selectedSegmentId]);\n\n  const handleSortChange = useCallback((field: string) => {\n    if (field === sortField) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n    setCurrentPage(1);\n  }, [sortField]);\n\n  const handleBack = useCallback(() => navigate('/segmentation'), [navigate]);\n\n  const handleContinue = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      console.log(\"Continuing to parameter selection...\");\n      navigate('/parameter-selection');\n    } catch (err) {\n      console.error('Error preparing to continue:', err);\n      setError('Failed to proceed. Please try again.');\n      setLoading(false);\n    }\n  }, [navigate]);\n\n  const handlePageChange = (newPage: number) => {\n    if (newPage >= 1 && newPage <= totalPages) {\n        setCurrentPage(newPage);\n    }\n  }\n\n  const geoJSONForMap = useMemo(() => {\n    if (!segments || segments.length === 0) return null;\n    return {\n      type: 'FeatureCollection' as const,\n      features: segments.map(segment => ({\n        type: 'Feature' as const,\n        geometry: segment.geometry,\n        properties: { ...segment.properties, id: segment.id }\n      }))\n    };\n  }, [segments]);\n\n  const selectedSegmentIds = useMemo(() => {\n    return selectedSegmentId ? [selectedSegmentId] : [];\n  }, [selectedSegmentId]);\n\n  if (loading && segments.length === 0) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600\"></div>\n        <p className=\"ml-4 text-gray-600\">Loading segments...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8\"> {/* Use larger max-width for side-by-side */}\n\n      {/* Header */}\n      <div className=\"text-center mb-10\">\n        <h2 className=\"text-3xl font-extrabold text-primary-900 tracking-tight\">\n          3. Review Segments\n        </h2>\n        <p className=\"mt-3 text-lg text-gray-600\">\n          Review the generated shoreline segments. Click a row to view on map.\n        </p>\n        <p className=\"mt-1 text-sm text-gray-500\">\n          Total Segments: {segments.length.toLocaleString()}\n        </p>\n      </div>\n\n      {/* Error Display */}\n      <ErrorAlert message={error} onClose={() => setError(null)} />\n\n      {/* Grid Container */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mt-8\">\n\n        {/* Left Column: Table and Controls */}\n        <div className=\"lg:col-span-1 flex flex-col space-y-6\">\n          {/* Table Section */}\n          <div className=\"bg-white p-6 rounded-lg shadow-md border border-gray-200 flex-grow flex flex-col\"> {/* Added flex-grow and flex-col */}\n            <div className=\"flex flex-col sm:flex-row justify-between items-center mb-4 gap-4 flex-shrink-0\"> {/* Prevent shrinking */}\n              <h3 className=\"text-xl font-semibold text-gray-800 flex items-center\">\n                <TableCellsIcon className=\"h-6 w-6 mr-2 text-primary-700\"/> Segment List\n              </h3>\n              <div className=\"relative w-full sm:w-64\">\n                <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                  <MagnifyingGlassIcon className=\"h-5 w-5 text-gray-400\" aria-hidden=\"true\" />\n                </div>\n                <input\n                  type=\"text\"\n                  placeholder=\"Search by ID or #\"\n                  value={searchTerm}\n                  onChange={(e) => { setSearchTerm(e.target.value); setCurrentPage(1); }}\n                  className=\"block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-primary-500 focus:border-primary-500 sm:text-sm\"\n                />\n              </div>\n            </div>\n\n            {/* Table Container with scroll */}\n            <div className=\"flex-grow overflow-auto border border-gray-200 rounded-md\"> {/* Allow table to grow and scroll */}\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50 sticky top-0 z-10\"> {/* Make header sticky */}\n                  <tr>\n                    {/* Index Column */}\n                    <th\n                      scope=\"col\"\n                      className=\"px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\n                      onClick={() => handleSortChange('properties.index')}\n                    >\n                      #\n                      {sortField === 'properties.index' && (\n                        <span className=\"ml-1\">{sortDirection === 'asc' ? '↑' : '↓'}</span>\n                      )}\n                    </th>\n                    {/* Length Column */}\n                    <th\n                      scope=\"col\"\n                      className=\"px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\n                      onClick={() => handleSortChange('properties.length')}\n                    >\n                      Length (m)\n                      {sortField === 'properties.length' && (\n                        <span className=\"ml-1\">{sortDirection === 'asc' ? '↑' : '↓'}</span>\n                      )}\n                    </th>\n                    {/* REMOVED Segment ID Column Header */}\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {paginatedSegments.map((segment) => (\n                    <tr\n                      key={segment.id}\n                      onClick={() => handleSegmentSelect(segment.id)}\n                      className={`hover:bg-primary-50 cursor-pointer transition-colors duration-150 ${\n                        selectedSegmentId === segment.id ? 'bg-primary-100 font-medium' : ''\n                      }`}\n                    >\n                      <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center w-16\">\n                        {segment.properties.index}\n                      </td>\n                      <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center w-32\">\n                        {segment.properties?.length ? segment.properties.length.toFixed(1) : 'N/A'}\n                      </td>\n                       {/* REMOVED Segment ID Column Body Cell */}\n                    </tr>\n                  ))}\n                  {paginatedSegments.length === 0 && (\n                    <tr>\n                      {/* ADJUSTED COLSPAN */}\n                      <td colSpan={2} className=\"px-6 py-4 text-center text-sm text-gray-500\">\n                        {searchTerm ? 'No segments match search.' : 'No segments loaded.'}\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n\n            {/* Compact Pagination */}\n            {totalPages > 1 && (\n              <nav\n                className=\"mt-4 flex items-center justify-between border-t border-gray-200 px-1 pt-3 flex-shrink-0\" // Prevent shrinking\n                aria-label=\"Pagination\"\n              >\n                 <p className=\"text-sm text-gray-700 flex-shrink-0 mr-4\"> {/* Prevent shrinking */}\n                    Showing <span className=\"font-medium\">{(currentPage - 1) * ITEMS_PER_PAGE + 1}</span>\n                    - <span className=\"font-medium\">{Math.min(currentPage * ITEMS_PER_PAGE, filteredSegments.length)}</span>\n                    {' '}of{' '}\n                    <span className=\"font-medium\">{filteredSegments.length}</span>\n                 </p>\n                  <div className=\"flex space-x-1\"> {/* Use space-x for button spacing */}\n                    <button\n                      onClick={() => handlePageChange(currentPage - 1)}\n                      disabled={currentPage === 1}\n                      className=\"relative inline-flex items-center rounded-md border border-gray-300 bg-white px-3 py-1.5 text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n                    >\n                      Previous\n                    </button>\n                    <button\n                      onClick={() => handlePageChange(currentPage + 1)}\n                      disabled={currentPage === totalPages}\n                      className=\"relative inline-flex items-center rounded-md border border-gray-300 bg-white px-3 py-1.5 text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n                    >\n                      Next\n                    </button>\n                  </div>\n              </nav>\n            )}\n          </div> {/* End Table Section */}\n\n          {/* Navigation Buttons */}\n          <div className=\"flex justify-between items-center flex-shrink-0 mt-auto\"> {/* Pushes buttons down */}\n             <button\n               type=\"button\"\n               onClick={handleBack}\n               className=\"inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n               disabled={loading}\n             >\n               <ArrowLeftIcon className=\"h-4 w-4 mr-2\"/> Back\n             </button>\n\n             <button\n               type=\"button\"\n               onClick={handleContinue}\n               className=\"inline-flex items-center px-6 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n               disabled={loading || segments.length === 0}\n               title={segments.length === 0 ? \"No segments loaded\" : \"Confirm segments and proceed to parameter selection\"}\n             >\n               {loading ? 'Processing...' : 'Confirm & Continue'}\n               <ArrowRightIcon className=\"h-4 w-4 ml-2\"/>\n             </button>\n           </div>\n\n        </div> {/* End Left Column */}\n\n\n        {/* Right Column: Map */}\n        <div className=\"lg:col-span-1 flex flex-col\">\n           <h3 className=\"text-xl font-semibold text-gray-800 mb-4 flex items-center\">\n              <MapOutlineIcon className=\"h-6 w-6 mr-2 text-primary-700\"/> Map Preview\n            </h3>\n            {selectedSegmentId && (\n               <div className=\"mb-3 p-3 bg-blue-50 border border-blue-200 rounded-md text-sm text-blue-800 flex items-center\">\n                 <CheckCircleIcon className=\"h-5 w-5 mr-2 text-blue-600 flex-shrink-0\" />\n                 Highlighting segment #{segments.find(s => s.id === selectedSegmentId)?.properties.index || ''}. Map zoomed to selection.\n               </div>\n             )}\n          {/* Map container needs defined height */}\n          <div className=\"bg-gray-100 rounded-lg shadow-inner border border-gray-200 overflow-hidden h-[600px] lg:h-full lg:min-h-[600px] flex-grow\"> {/* Adjust height as needed, flex-grow */}\n             {geoJSONForMap ? (\n              <Map\n                geoJSON={geoJSONForMap}\n                segments={segments}\n                parameters={[]}\n                selectedParameter={null}\n                selectedSegments={selectedSegmentIds}\n                selectionPolygons={[]}\n                onSegmentSelect={handleSegmentSelect}\n                onSelectionDelete={() => {}}\n                onAreaSelect={() => {}}\n                isEditing={false}\n                initialBounds={mapInitialBounds}\n                zoomToFeatureId={selectedSegmentId}\n                stylingMode=\"parameter\"\n              />\n            ) : (\n              <div className=\"h-full flex items-center justify-center text-gray-500\">\n                {loading ? 'Loading map data...' : 'No shoreline data available'}\n              </div>\n            )}\n          </div>\n        </div> {/* End Right Column */}\n\n      </div> {/* End Grid Container */}\n\n    </div> \n  );\n}"],"names":["React.createElement","ForwardRef","React.forwardRef","useState","useEffect","feature","length","turf.length","turf.feature","turf.featureCollection","bbox","turf.bbox","useMemo","useCallback","jsxs","jsx","TableCellsIcon","MagnifyingGlassIcon","ArrowLeftIcon","ArrowRightIcon","MapOutlineIcon","CheckCircleIcon"],"mappings":"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","x_google_ignoreList":[0,1]}