{"version":3,"file":"indices-CCVn6S0N.js","sources":["../../src/types/indexSpecificTypes.ts","../../src/indices/cvi/parameters.ts","../../src/indices/cvi/validation.ts","../../src/indices/cvi/definition.ts","../../src/indices/icvi/parameters.ts","../../src/indices/icvi/validation.ts","../../src/indices/icvi/definition.ts","../../src/indices/registry.ts","../../src/config/indices.ts"],"sourcesContent":["// New index-specific parameter system\nexport interface IndexSpecificVulnerabilityRange {\n  value: number; // 1-5 vulnerability rank\n  criteria: string; // Specific criteria for this index\n  color: string;\n  label: string; // Very Low, Low, Moderate, High, Very High\n}\n\nexport interface IndexSpecificParameter {\n  id: string; // Unique identifier for this parameter in this index\n  standardName: string; // Consistent name across all indices (e.g., 'coastal_geomorphology')\n  indexId: string; // Which index this parameter belongs to\n  indexSpecificName: string; // How this specific index refers to this parameter\n  description: string;\n  type: 'numerical' | 'categorical';\n  unit?: string;\n  rankingTable: IndexSpecificVulnerabilityRange[]; // Index-specific 1-5 rankings\n  weight: number; // Default weight for this parameter in this index\n  required: boolean; // Whether this parameter is required for the index\n}\n\nexport interface ValidationRule {\n  type: 'parameter_count' | 'parameter_required' | 'weight_sum' | 'formula_compatibility';\n  message: string;\n  validate: (parameters: IndexSpecificParameter[], weights?: Record<string, number>) => boolean;\n}\n\nexport interface StandardizedCoastalIndex {\n  id: string;\n  name: string;\n  shortName: string;\n  description: string;\n  citation: string;\n  type: 'true-index' | 'composite-index';\n  formula: string; // Fixed formula for this index\n  requiredParameters: IndexSpecificParameter[];\n  validationRules: ValidationRule[];\n  requiresEqualWeights: boolean;\n  scalingFactor?: number; // For indices that don't use 1-5 scale\n  notes?: string;\n  resultClassification?: {\n    absoluteRanges?: Array<{\n      min: number;\n      max: number;\n      label: string;\n      color: string;\n    }>;\n    geometricRanges?: Array<{\n      min: number;\n      max: number;\n      label: string;\n      color: string;\n    }>;\n  };\n  availableFormulas?: Array<{\n    id: string;\n    name: string;\n    description: string;\n    type: string;\n  }>;\n}\n\n// Standard parameter names - consistent across all indices\nexport enum StandardParameterNames {\n  COASTAL_GEOMORPHOLOGY = 'coastal_geomorphology',\n  COASTAL_SLOPE = 'coastal_slope',\n  ROCK_TYPE = 'rock_type',\n  SEA_LEVEL_CHANGE = 'sea_level_change',\n  SHORELINE_CHANGE = 'shoreline_change',\n  MEAN_TIDE_RANGE = 'mean_tide_range',\n  MEAN_WAVE_HEIGHT = 'mean_wave_height',\n  BARRIER_TYPE = 'barrier_type',\n  SHORELINE_EXPOSURE = 'shoreline_exposure',\n  NATURAL_PROTECTION = 'natural_protection',\n  ECOSYSTEM_TYPE = 'ecosystem_type',\n  ENVIRONMENTAL_CONSERVANCY = 'environmental_conservancy',\n  INTEREST_SPECIES = 'interest_species',\n  LAND_USE = 'land_use',\n  BUILDING_COAST_RATIO = 'building_coast_ratio',\n  ECONOMIC_ACTIVITY = 'economic_activity',\n  ECONOMIC_VALUE = 'economic_value',\n  SOCIOCULTURAL_HERITAGE = 'sociocultural_heritage',\n  POPULATION_DENSITY = 'population_density',\n  INFRASTRUCTURE_DENSITY = 'infrastructure_density',\n  CULTURAL_HERITAGE = 'cultural_heritage',\n  USE_OF_TERRITORY = 'use_of_territory',\n  BEACH_WIDTH = 'beach_width',\n  DUNE_WIDTH = 'dune_width',\n  VEGETATION_DISTANCE = 'vegetation_distance',\n  DISTANCE_BUILT_STRUCTURES = 'distance_built_structures',\n  SEA_DEFENCES = 'sea_defences',\n  COMMERCIAL_PROPERTIES = 'commercial_properties',\n  RESIDENTIAL_PROPERTIES = 'residential_properties'\n}\n\n// Parameter mapping between indices\nexport interface ParameterMapping {\n  standardName: StandardParameterNames;\n  aliases: string[]; // Different names used in different papers\n  description: string;\n  commonUnit?: string;\n}\n\nexport const PARAMETER_MAPPINGS: ParameterMapping[] = [\n  {\n    standardName: StandardParameterNames.COASTAL_GEOMORPHOLOGY,\n    aliases: ['geomorphology', 'coastal_landforms', 'geomorphological_features', 'landform_type'],\n    description: 'Coastal landform characteristics affecting vulnerability to erosion and inundation'\n  },\n  {\n    standardName: StandardParameterNames.COASTAL_SLOPE,\n    aliases: ['slope', 'coastal_gradient', 'terrain_slope'],\n    description: 'Gradient of coastal terrain',\n    commonUnit: 'degrees'\n  },\n  {\n    standardName: StandardParameterNames.ROCK_TYPE,\n    aliases: ['geology', 'geological_composition', 'bedrock_type'],\n    description: 'Geological composition affecting erosion resistance'\n  },\n  {\n    standardName: StandardParameterNames.SEA_LEVEL_CHANGE,\n    aliases: ['relative_sea_level_rise', 'slr_rate', 'sea_level_rise'],\n    description: 'Rate of relative sea level change',\n    commonUnit: 'mm/yr'\n  },\n  {\n    standardName: StandardParameterNames.SHORELINE_CHANGE,\n    aliases: ['shoreline_erosion', 'coastal_change', 'erosion_rate'],\n    description: 'Historical rate of shoreline migration',\n    commonUnit: 'm/yr'\n  },\n  {\n    standardName: StandardParameterNames.MEAN_TIDE_RANGE,\n    aliases: ['tidal_range', 'tide_range'],\n    description: 'Mean tidal range affecting coastal processes',\n    commonUnit: 'm'\n  },\n  {\n    standardName: StandardParameterNames.MEAN_WAVE_HEIGHT,\n    aliases: ['wave_height', 'significant_wave_height'],\n    description: 'Mean significant wave height',\n    commonUnit: 'm'\n  },\n  {\n    standardName: StandardParameterNames.BARRIER_TYPE,\n    aliases: ['coastal_barrier', 'barrier_system'],\n    description: 'Type of coastal barrier system'\n  },\n  {\n    standardName: StandardParameterNames.SHORELINE_EXPOSURE,\n    aliases: ['wave_exposure', 'coastal_exposure'],\n    description: 'Degree of exposure to wave energy',\n    commonUnit: 'degrees'\n  }\n];\n","import type { IndexSpecificParameter } from '../../types';\nimport { StandardParameterNames } from '../../types/indexSpecificTypes';\n\n/**\n * CVI Parameters - 6 physical parameters with 1-5 vulnerability scale\n * No weights needed (equal weights used automatically)\n */\nexport const CVIParameters: IndexSpecificParameter[] = [\n  {\n    id: 'cvi_coastal_geomorphology',\n    standardName: StandardParameterNames.COASTAL_GEOMORPHOLOGY,\n    indexId: 'cvi-thieler-1999',\n    indexSpecificName: 'Geomorphology',\n    description: 'Coastal landform type',\n    type: 'categorical',\n    weight: 1/6, // Equal weights for CVI\n    required: true,\n    rankingTable: [\n      { value: 1, criteria: 'Rocky, cliffed coasts / Fiords / Fiards', color: '#1a9850', label: 'Very Low' },\n      { value: 2, criteria: 'Medium cliffs / Indented coasts', color: '#91cf60', label: 'Low' },\n      { value: 3, criteria: 'Low cliffs / Glacial drift / Alluvial plains', color: '#fee08b', label: 'Moderate' },\n      { value: 4, criteria: 'Cobble beaches / Estuary / Lagoon', color: '#fc8d59', label: 'High' },\n      { value: 5, criteria: 'Barrier beaches / Sand beaches / Salt marsh / Mud flats / Deltas / Mangrove / Coral reefs', color: '#d73027', label: 'Very High' }\n    ]\n  },\n  {\n    id: 'cvi_coastal_slope',\n    standardName: StandardParameterNames.COASTAL_SLOPE,\n    indexId: 'cvi-thieler-1999',\n    indexSpecificName: 'Coastal Slope',\n    description: 'Regional coastal slope',\n    type: 'numerical',\n    unit: '%',\n    weight: 1/6, // Equal weights for CVI\n    required: true,\n    rankingTable: [\n      { value: 1, criteria: '>14.7%', color: '#1a9850', label: 'Very Low' },\n      { value: 2, criteria: '10.9-14.6%', color: '#91cf60', label: 'Low' },\n      { value: 3, criteria: '7.2-10.8%', color: '#fee08b', label: 'Moderate' },\n      { value: 4, criteria: '3.6-7.1%', color: '#fc8d59', label: 'High' },\n      { value: 5, criteria: '<3.5%', color: '#d73027', label: 'Very High' }\n    ]\n  },\n  {\n    id: 'cvi_sea_level_change',\n    standardName: StandardParameterNames.SEA_LEVEL_CHANGE,\n    indexId: 'cvi-thieler-1999',\n    indexSpecificName: 'Relative Sea Level Change',\n    description: 'Historical rate of relative sea level change',\n    type: 'numerical',\n    unit: 'mm/yr',\n    weight: 1/6, // Equal weights for CVI\n    required: true,\n    rankingTable: [\n      { value: 1, criteria: '<1.8 mm/yr', color: '#1a9850', label: 'Very Low' },\n      { value: 2, criteria: '1.8-2.5 mm/yr', color: '#91cf60', label: 'Low' },\n      { value: 3, criteria: '2.5-3.4 mm/yr', color: '#fee08b', label: 'Moderate' },\n      { value: 4, criteria: '3.4-4.6 mm/yr', color: '#fc8d59', label: 'High' },\n      { value: 5, criteria: '>4.6 mm/yr', color: '#d73027', label: 'Very High' }\n    ]\n  },\n  {\n    id: 'cvi_shoreline_change',\n    standardName: StandardParameterNames.SHORELINE_CHANGE,\n    indexId: 'cvi-thieler-1999',\n    indexSpecificName: 'Shoreline Erosion/Accretion Rate',\n    description: 'Historical shoreline change rate',\n    type: 'numerical',\n    unit: 'm/yr',\n    weight: 1/6, // Equal weights for CVI\n    required: true,\n    rankingTable: [\n      { value: 1, criteria: '>2.0 m/yr (accretion)', color: '#1a9850', label: 'Very Low' },\n      { value: 2, criteria: '1.0-2.0 m/yr (accretion)', color: '#91cf60', label: 'Low' },\n      { value: 3, criteria: '-1.0 to +1.0 m/yr (stable)', color: '#fee08b', label: 'Moderate' },\n      { value: 4, criteria: '-2.0 to -1.0 m/yr (erosion)', color: '#fc8d59', label: 'High' },\n      { value: 5, criteria: '<-2.0 m/yr (erosion)', color: '#d73027', label: 'Very High' }\n    ]\n  },\n  {\n    id: 'cvi_mean_tide_range',\n    standardName: StandardParameterNames.MEAN_TIDE_RANGE,\n    indexId: 'cvi-thieler-1999',\n    indexSpecificName: 'Mean Tide Range',\n    description: 'Mean tidal range',\n    type: 'numerical',\n    unit: 'm',\n    weight: 1/6, // Equal weights for CVI\n    required: true,\n    rankingTable: [\n      { value: 1, criteria: '>6.0 m', color: '#1a9850', label: 'Very Low' },\n      { value: 2, criteria: '4.1-6.0 m', color: '#91cf60', label: 'Low' },\n      { value: 3, criteria: '2.1-4.0 m', color: '#fee08b', label: 'Moderate' },\n      { value: 4, criteria: '1.1-2.0 m', color: '#fc8d59', label: 'High' },\n      { value: 5, criteria: '0.0-1.0 m', color: '#d73027', label: 'Very High' }\n    ]\n  },\n  {\n    id: 'cvi_mean_wave_height',\n    standardName: StandardParameterNames.MEAN_WAVE_HEIGHT,\n    indexId: 'cvi-thieler-1999',\n    indexSpecificName: 'Mean Wave Height',\n    description: 'Mean significant wave height',\n    type: 'numerical',\n    unit: 'm',\n    weight: 1/6, // Equal weights for CVI\n    required: true,\n    rankingTable: [\n      { value: 1, criteria: '<0.55 m', color: '#1a9850', label: 'Very Low' },\n      { value: 2, criteria: '0.55-0.85 m', color: '#91cf60', label: 'Low' },\n      { value: 3, criteria: '0.85-1.05 m', color: '#fee08b', label: 'Moderate' },\n      { value: 4, criteria: '1.05-1.25 m', color: '#fc8d59', label: 'High' },\n      { value: 5, criteria: '>1.25 m', color: '#d73027', label: 'Very High' }\n    ]\n  }\n];","import type { ValidationRule } from '../../types';\n\n/**\n * CVI Validation Rules\n * Simple validation for 6 parameters with no weight requirements\n */\nexport const CVIValidationRules: ValidationRule[] = [\n  {\n    type: 'parameter_count',\n    message: 'CVI requires exactly 6 parameters',\n    validate: (parameters) => parameters.length === 6\n  },\n  {\n    type: 'formula_compatibility',\n    message: 'CVI uses true geometric mean with equal weights (no explicit weights needed)',\n    validate: () => true // Enforced by index definition\n  }\n];","import { CVIParameters } from './parameters';\nimport { CVIValidationRules } from './validation';\nimport type { StandardizedCoastalIndex } from '../../types/indexSpecificTypes';\n\n/**\n * CVI (Coastal Vulnerability Index) - Thieler et al. (1999)\n * Physical vulnerability index using 6 physical parameters\n */\nexport const CVIIndex: StandardizedCoastalIndex = {\n  id: 'cvi-thieler-1999',\n  name: 'Coastal Vulnerability Index (CVI)',\n  shortName: 'CVI',\n  description: 'Physical coastal vulnerability index developed by Thieler et al. (1999) using 6 physical parameters with geometric mean calculation.',\n  citation: `Thieler, E. R., & Hammar-Klose, E. S. (1999). National assessment of coastal vulnerability to sea-level rise: preliminary results for the US Atlantic coast. US Geological Survey Open-File Report 99-593.`,\n  type: 'true-index',\n  formula: 'cvi-geometric', // Default to geometric mean\n  requiredParameters: CVIParameters,\n  validationRules: CVIValidationRules,\n  requiresEqualWeights: true,\n  resultClassification: {\n    // Standard CVI classification ranges (1-5 scale)\n    absoluteRanges: [\n      { min: 1.0, max: 1.8, label: 'Very Low', color: '#1a9850' },\n      { min: 1.8, max: 2.6, label: 'Low', color: '#91cf60' },\n      { min: 2.6, max: 3.4, label: 'Moderate', color: '#fee08b' },\n      { min: 3.4, max: 4.2, label: 'High', color: '#fc8d59' },\n      { min: 4.2, max: 5.0, label: 'Very High', color: '#d73027' }\n    ]\n  },\n  availableFormulas: [\n    {\n      id: 'cvi-geometric',\n      name: 'Geometric Mean',\n      description: 'CVI = ⁿ√(∏Vi) - True geometric mean with equal weights for all parameters',\n      type: 'geometric'\n    }\n  ],\n  notes: `* Uses true geometric mean calculation: CVI = ⁿ√(∏Vi) where n=6 parameters.\n* All parameters have equal weights (1/6 each).\n* Focuses on physical vulnerability factors only.\n* Original methodology from Thieler & Hammar-Klose (1999).`\n};\n","import type { IndexSpecificParameter } from '../../types';\nimport { StandardParameterNames } from '../../types/indexSpecificTypes';\n\n/**\n * ICVI Parameters - 12 parameters total (6 EVI + 6 SVI) with 0.1-0.9 vulnerability scale\n * Equal weights (1/12 each)\n */\nexport const ICVIParameters: IndexSpecificParameter[] = [\n  // Environmental Vulnerability Index (EVI) Parameters - 6 parameters\n  {\n    id: 'icvi_geomorphological_features',\n    standardName: StandardParameterNames.COASTAL_GEOMORPHOLOGY,\n    indexId: 'icvi-alcantara-2024',\n    indexSpecificName: 'Geomorphological Features',\n    description: 'Coastal geomorphological characteristics',\n    type: 'categorical',\n    weight: 1/12, // 1/6 for EVI, then 1/2 for ICVI\n    required: true,\n    rankingTable: [\n      { value: 0.1, criteria: 'High cliffs, Cliff of coherent rocks', color: '#1a9850', label: 'Very Low' },\n      { value: 0.3, criteria: 'Medium cliffs, Cliff of medium resistance rocks', color: '#91cf60', label: 'Low' },\n      { value: 0.5, criteria: 'Low cliffs, Cliff on sedimentary formations, Cliff with high erodibility', color: '#fee08b', label: 'Moderate' },\n      { value: 0.7, criteria: 'Extensive beaches attached to low-elevation coastal sedimentary plains', color: '#fc8d59', label: 'High' },\n      { value: 0.9, criteria: 'Beaches attached to barrier island formations, tombolos, coastal arrows, deltas, Sectors in front of tidal or fluvial-tidal marshes', color: '#d73027', label: 'Very High' }\n    ]\n  },\n  {\n    id: 'icvi_slope',\n    standardName: StandardParameterNames.COASTAL_SLOPE,\n    indexId: 'icvi-alcantara-2024',\n    indexSpecificName: 'Slope',\n    description: 'Coastal slope percentage',\n    type: 'numerical',\n    unit: '%',\n    weight: 1/12,\n    required: true,\n    rankingTable: [\n      { value: 0.1, criteria: '> 8%', color: '#1a9850', label: 'Very Low' },\n      { value: 0.3, criteria: '4-8%', color: '#91cf60', label: 'Low' },\n      { value: 0.5, criteria: '2-4%', color: '#fee08b', label: 'Moderate' },\n      { value: 0.7, criteria: '1-2%', color: '#fc8d59', label: 'High' },\n      { value: 0.9, criteria: '0-1%', color: '#d73027', label: 'Very High' }\n    ]\n  },\n  {\n    id: 'icvi_shoreline_migration',\n    standardName: StandardParameterNames.SHORELINE_CHANGE,\n    indexId: 'icvi-alcantara-2024',\n    indexSpecificName: 'Shoreline Migration Rate',\n    description: 'Rate of shoreline migration',\n    type: 'numerical',\n    unit: 'm/yr',\n    weight: 1/12,\n    required: true,\n    rankingTable: [\n      { value: 0.1, criteria: '> +2.0 m/yr', color: '#1a9850', label: 'Very Low' },\n      { value: 0.3, criteria: '+1.0 to +2.0 m/yr', color: '#91cf60', label: 'Low' },\n      { value: 0.5, criteria: '-1.0 to +1.0 m/yr', color: '#fee08b', label: 'Moderate' },\n      { value: 0.7, criteria: '-2.0 to -1.0 m/yr', color: '#fc8d59', label: 'High' },\n      { value: 0.9, criteria: '≤ -2.0 m/yr', color: '#d73027', label: 'Very High' }\n    ]\n  },\n  {\n    id: 'icvi_ecosystem_type',\n    standardName: StandardParameterNames.ECOSYSTEM_TYPE,\n    indexId: 'icvi-alcantara-2024',\n    indexSpecificName: 'Ecosystem Type',\n    description: 'Type of coastal ecosystem',\n    type: 'categorical',\n    weight: 1/12,\n    required: true,\n    rankingTable: [\n      { value: 0.1, criteria: 'Without vegetation', color: '#1a9850', label: 'Very Low' },\n      { value: 0.3, criteria: 'Coastal plain and coastal cliffs', color: '#91cf60', label: 'Low' },\n      { value: 0.5, criteria: 'Shrub vegetation, stubble, grasslands', color: '#fee08b', label: 'Moderate' },\n      { value: 0.7, criteria: 'Forests', color: '#fc8d59', label: 'High' },\n      { value: 0.9, criteria: 'Strategic ecosystems: coastal lagoons, mangroves, coral reefs', color: '#d73027', label: 'Very High' }\n    ]\n  },\n  {\n    id: 'icvi_conservation_measures',\n    standardName: StandardParameterNames.ENVIRONMENTAL_CONSERVANCY,\n    indexId: 'icvi-alcantara-2024',\n    indexSpecificName: 'Environmental Conservancy Measures',\n    description: 'Level of environmental protection measures',\n    type: 'categorical',\n    weight: 1/12,\n    required: true,\n    rankingTable: [\n      { value: 0.1, criteria: 'None', color: '#1a9850', label: 'Very Low' },\n      { value: 0.3, criteria: 'Reserve zone for agrarian, fishing or hunting activities', color: '#91cf60', label: 'Low' },\n      { value: 0.5, criteria: 'Regional or local conservation parks', color: '#fee08b', label: 'Moderate' },\n      { value: 0.7, criteria: 'Biosphere reserve areas', color: '#fc8d59', label: 'High' },\n      { value: 0.9, criteria: 'National Parks, RAMSAR sites', color: '#d73027', label: 'Very High' }\n    ]\n  },\n  {\n    id: 'icvi_species_interest',\n    standardName: StandardParameterNames.INTEREST_SPECIES,\n    indexId: 'icvi-alcantara-2024',\n    indexSpecificName: 'Presence of Interest Species',\n    description: 'Presence of species of conservation interest',\n    type: 'categorical',\n    weight: 1/12,\n    required: true,\n    rankingTable: [\n      { value: 0.1, criteria: 'Ecosystems colonized by invasive species', color: '#1a9850', label: 'Very Low' },\n      { value: 0.3, criteria: 'Ecosystems with invasive species with a normal population growth', color: '#91cf60', label: 'Low' },\n      { value: 0.5, criteria: 'Ecosystems with normal population growth and high-value species', color: '#fee08b', label: 'Moderate' },\n      { value: 0.7, criteria: 'Ecosystems with endemism and threatened species (VU, EN, CR) with active conservation programs', color: '#fc8d59', label: 'High' },\n      { value: 0.9, criteria: 'Ecosystems with high quantity of endemism and high-value species', color: '#d73027', label: 'Very High' }\n    ]\n  },\n  \n  // Socioeconomic Vulnerability Index (SVI) Parameters - 6 parameters\n  {\n    id: 'icvi_land_use',\n    standardName: StandardParameterNames.LAND_USE,\n    indexId: 'icvi-alcantara-2024',\n    indexSpecificName: 'Use of Territory',\n    description: 'Type of land use in coastal areas',\n    type: 'categorical',\n    weight: 1/12,\n    required: true,\n    rankingTable: [\n      { value: 0.1, criteria: 'Natural areas, without buildings', color: '#1a9850', label: 'Very Low' },\n      { value: 0.3, criteria: 'Rural areas', color: '#91cf60', label: 'Low' },\n      { value: 0.5, criteria: 'Semi-urban areas with scattered buildings', color: '#fee08b', label: 'Moderate' },\n      { value: 0.7, criteria: 'Urban areas', color: '#fc8d59', label: 'High' },\n      { value: 0.9, criteria: 'Industrial areas', color: '#d73027', label: 'Very High' }\n    ]\n  },\n  {\n    id: 'icvi_building_coast_ratio',\n    standardName: StandardParameterNames.BUILDING_COAST_RATIO,\n    indexId: 'icvi-alcantara-2024',\n    indexSpecificName: 'Building Coast Ratio',\n    description: 'Ratio of built structures along the coast',\n    type: 'numerical',\n    unit: 'ratio',\n    weight: 1/12,\n    required: true,\n    rankingTable: [\n      { value: 0.1, criteria: '0', color: '#1a9850', label: 'Very Low' },\n      { value: 0.3, criteria: '0.0001-0.1', color: '#91cf60', label: 'Low' },\n      { value: 0.5, criteria: '0.1-0.5', color: '#fee08b', label: 'Moderate' },\n      { value: 0.7, criteria: '0.5-1.0', color: '#fc8d59', label: 'High' },\n      { value: 0.9, criteria: '> 1.0', color: '#d73027', label: 'Very High' }\n    ]\n  },\n  {\n    id: 'icvi_population_density',\n    standardName: StandardParameterNames.POPULATION_DENSITY,\n    indexId: 'icvi-alcantara-2024',\n    indexSpecificName: 'Population Density',\n    description: 'Population density in coastal areas',\n    type: 'numerical',\n    unit: 'pop/ha',\n    weight: 1/12,\n    required: true,\n    rankingTable: [\n      { value: 0.1, criteria: '≤ 20 pop/ha', color: '#1a9850', label: 'Very Low' },\n      { value: 0.3, criteria: '20-50 pop/ha', color: '#91cf60', label: 'Low' },\n      { value: 0.5, criteria: '50-80 pop/ha', color: '#fee08b', label: 'Moderate' },\n      { value: 0.7, criteria: '80-170 pop/ha', color: '#fc8d59', label: 'High' },\n      { value: 0.9, criteria: '> 170 pop/ha', color: '#d73027', label: 'Very High' }\n    ]\n  },\n  {\n    id: 'icvi_economic_activity',\n    standardName: StandardParameterNames.ECONOMIC_ACTIVITY,\n    indexId: 'icvi-alcantara-2024',\n    indexSpecificName: 'Socio-economic Activity',\n    description: 'Level of socio-economic activity',\n    type: 'categorical',\n    weight: 1/12,\n    required: true,\n    rankingTable: [\n      { value: 0.1, criteria: 'None', color: '#1a9850', label: 'Very Low' },\n      { value: 0.3, criteria: 'Low', color: '#91cf60', label: 'Low' },\n      { value: 0.5, criteria: 'Moderate', color: '#fee08b', label: 'Moderate' },\n      { value: 0.7, criteria: 'High', color: '#fc8d59', label: 'High' },\n      { value: 0.9, criteria: 'Very high', color: '#d73027', label: 'Very High' }\n    ]\n  },\n  {\n    id: 'icvi_economic_value',\n    standardName: StandardParameterNames.ECONOMIC_VALUE,\n    indexId: 'icvi-alcantara-2024',\n    indexSpecificName: 'Economic Value',\n    description: 'Economic value of coastal areas',\n    type: 'numerical',\n    unit: '€',\n    weight: 1/12,\n    required: true,\n    rankingTable: [\n      { value: 0.1, criteria: '0 - 10⁵ €', color: '#1a9850', label: 'Very Low' },\n      { value: 0.3, criteria: '10⁵ - 3.5×10⁵ €', color: '#91cf60', label: 'Low' },\n      { value: 0.5, criteria: '3.5×10⁵ - 6.5×10⁵ €', color: '#fee08b', label: 'Moderate' },\n      { value: 0.7, criteria: '6.5×10⁵ - 10⁶ €', color: '#fc8d59', label: 'High' },\n      { value: 0.9, criteria: '> 10⁶ €', color: '#d73027', label: 'Very High' }\n    ]\n  },\n  {\n    id: 'icvi_heritage',\n    standardName: StandardParameterNames.SOCIOCULTURAL_HERITAGE,\n    indexId: 'icvi-alcantara-2024',\n    indexSpecificName: 'Archeologic and Historic Heritage',\n    description: 'Presence of archaeological and historic heritage',\n    type: 'categorical',\n    weight: 1/12,\n    required: true,\n    rankingTable: [\n      { value: 0.1, criteria: 'None', color: '#1a9850', label: 'Very Low' },\n      { value: 0.3, criteria: 'Local relevance', color: '#91cf60', label: 'Low' },\n      { value: 0.5, criteria: 'Regional relevance', color: '#fee08b', label: 'Moderate' },\n      { value: 0.7, criteria: 'National relevance', color: '#fc8d59', label: 'High' },\n      { value: 0.9, criteria: 'World Heritage', color: '#d73027', label: 'Very High' }\n    ]\n  }\n];","import type { ValidationRule } from '../../types';\n\n/**\n * ICVI Validation Rules\n * Validates 12 parameters (6 EVI + 6 SVI) with equal weights\n */\nexport const ICVIValidationRules: ValidationRule[] = [\n  {\n    type: 'parameter_count',\n    message: 'ICVI requires exactly 12 parameters (6 environmental + 6 socioeconomic)',\n    validate: (parameters) => parameters.length === 12\n  },\n  {\n    type: 'weight_sum',\n    message: 'ICVI requires equal weights (1/12 each)',\n    validate: (parameters, weights) => {\n      if (!weights) return true;\n      const expectedWeight = 1/12;\n      const expectedCount = parameters.length;\n      const weightValues = Object.values(weights);\n\n      // Check if we have the right number of weights and all are equal to expected value\n      return weightValues.length === expectedCount &&\n             weightValues.every(w => Math.abs(w - expectedWeight) < 0.001);\n    }\n  },\n  {\n    type: 'formula_compatibility',\n    message: 'ICVI must use composite formula',\n    validate: () => true // Enforced by index definition\n  }\n];","import { ICVIParameters } from './parameters';\nimport { ICVIValidationRules } from './validation';\nimport type { StandardizedCoastalIndex } from '../../types/indexSpecificTypes';\n\n/**\n * ICVI (Integrated Coastal Vulnerability Index) - Alcántara-Carrió et al. (2024)\n * Composite index combining Environmental (EVI) and Socioeconomic (SVI) components\n */\nexport const ICVIIndex: StandardizedCoastalIndex = {\n  id: 'icvi-alcantara-2024',\n  name: 'Integrated Coastal Vulnerability Index (ICVI)',\n  shortName: 'ICVI',\n  description: 'Composite index combining Environmental Vulnerability Index (EVI) and Socioeconomic Vulnerability Index (SVI) developed by Alcántara-Carrió et al. (2024).',\n  citation: `Alcántara-Carrió, J., García Echavarría, L. M., & Jaramillo-Vélez, A. (2024). Is the coastal vulnerability index a suitable index? Review and proposal of alternative indices for coastal vulnerability to sea level rise. Geo-Marine Letters, 44(1), 8. https://doi.org/10.1007/s00367-024-00770-9`,\n  type: 'composite-index',\n  formula: 'icvi-arithmetic', // Default to arithmetic mean\n  requiredParameters: ICVIParameters,\n  validationRules: ICVIValidationRules,\n  requiresEqualWeights: true,\n  resultClassification: {\n    // Absolute range (global application) - Arithmetic mean formulas (Eq. I & III)\n    absoluteRanges: [\n      { min: 0, max: 0.2, label: 'Very Low', color: '#1a9850' },\n      { min: 0.2, max: 0.4, label: 'Low', color: '#91cf60' },\n      { min: 0.4, max: 0.6, label: 'Moderate', color: '#fee08b' },\n      { min: 0.6, max: 0.8, label: 'High', color: '#fc8d59' },\n      { min: 0.8, max: 1.0, label: 'Very High', color: '#d73027' }\n    ],\n    // Corrected geometric mean ranges for 0.1-0.9 scale\n    geometricRanges: [\n      { min: 0.1, max: 0.26, label: 'Very Low', color: '#1a9850' },\n      { min: 0.26, max: 0.42, label: 'Low', color: '#91cf60' },\n      { min: 0.42, max: 0.58, label: 'Moderate', color: '#fee08b' },\n      { min: 0.58, max: 0.74, label: 'High', color: '#fc8d59' },\n      { min: 0.74, max: 0.9, label: 'Very High', color: '#d73027' }\n    ]\n  },\n  availableFormulas: [\n    {\n      id: 'icvi-arithmetic',\n      name: 'Arithmetic Mean',\n      description: '',\n      type: 'arithmetic'\n    },\n    {\n      id: 'icvi-geometric',\n      name: 'Geometric Mean',\n      description: '',\n      type: 'geometric'\n    }\n  ],\n  notes: `* Two calculation methods available: arithmetic mean (global application) and geometric mean.\n* The classification of parameters into categories is derived from (Roukounis & Tsihrintzis, 2022).`\n};","import { CVIIndex } from './cvi';\nimport { ICVIIndex } from './icvi';\nimport type { StandardizedCoastalIndex, IndexSpecificParameter } from '../types/indexSpecificTypes';\n\n/**\n * Central registry for all coastal vulnerability indices\n * Provides a clean, modular way to access index definitions\n */\nexport class IndexRegistry {\n  private static indices = new Map<string, StandardizedCoastalIndex>([\n    [CVIIndex.id, CVIIndex],\n    [ICVIIndex.id, ICVIIndex]\n  ]);\n\n  /**\n   * Get all available indices\n   */\n  static getAllIndices(): StandardizedCoastalIndex[] {\n    return Array.from(this.indices.values());\n  }\n\n  /**\n   * Get index by ID\n   */\n  static getIndexById(id: string): StandardizedCoastalIndex | undefined {\n    return this.indices.get(id);\n  }\n\n  /**\n   * Get all parameters for all indices\n   */\n  static getAllParameters(): IndexSpecificParameter[] {\n    const allParameters: IndexSpecificParameter[] = [];\n    \n    for (const index of this.indices.values()) {\n      allParameters.push(...index.requiredParameters);\n    }\n    \n    return allParameters;\n  }\n\n  /**\n   * Get parameters for a specific index\n   */\n  static getParametersForIndex(indexId: string): IndexSpecificParameter[] {\n    const index = this.getIndexById(indexId);\n    return index ? index.requiredParameters : [];\n  }\n\n  /**\n   * Find parameter by standard name across all indices\n   */\n  static getParameterByStandardName(standardName: string): IndexSpecificParameter | undefined {\n    const allParameters = this.getAllParameters();\n    return allParameters.find(p => p.standardName === standardName);\n  }\n\n  /**\n   * Get vulnerability value from parameter value\n   */\n  static getVulnerabilityFromValue(parameter: IndexSpecificParameter, value: string | number): number {\n    const numericValue = typeof value === 'string' ? parseFloat(value) : value;\n    \n    // For categorical parameters, find exact match\n    if (parameter.type === 'categorical') {\n      const match = parameter.rankingTable.find(rank => \n        rank.criteria.toLowerCase().includes(value.toString().toLowerCase())\n      );\n      return match ? match.value : 1;\n    }\n    \n    // For numerical parameters, find appropriate range\n    for (const rank of parameter.rankingTable) {\n      // This is a simplified approach - in practice, you'd need more sophisticated range matching\n      if (numericValue <= rank.value) {\n        return rank.value;\n      }\n    }\n    \n    return parameter.rankingTable[parameter.rankingTable.length - 1].value;\n  }\n\n  /**\n   * Validate parameters for an index\n   */\n  static validateIndexParameters(indexId: string, parameters: IndexSpecificParameter[], weights?: Record<string, number>): { isValid: boolean; errors: string[] } {\n    const index = this.getIndexById(indexId);\n    if (!index) {\n      return { isValid: false, errors: ['Index not found'] };\n    }\n\n    const errors: string[] = [];\n    \n    for (const rule of index.validationRules) {\n      if (!rule.validate(parameters, weights)) {\n        errors.push(rule.message);\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Register a new index (for extensibility)\n   */\n  static registerIndex(index: StandardizedCoastalIndex): void {\n    this.indices.set(index.id, index);\n  }\n\n  /**\n   * Check if an index is registered\n   */\n  static hasIndex(id: string): boolean {\n    return this.indices.has(id);\n  }\n}","import { IndexRegistry } from '../indices';\n\n/**\n * Simplified index configuration using the modular registry\n * This replaces the old standardizedIndices.ts file\n */\n\n// Export all indices from the registry\nexport const STANDARDIZED_COASTAL_INDICES = IndexRegistry.getAllIndices();\n\n// Export all parameters from the registry\nexport const ALL_PARAMETERS = IndexRegistry.getAllParameters();\n\n// Helper functions\nexport const getStandardizedIndexById = (id: string) => IndexRegistry.getIndexById(id);\nexport const getParametersForIndex = (indexId: string) => IndexRegistry.getParametersForIndex(indexId);\nexport const validateIndexParameters = (indexId: string, parameters: any[], weights?: Record<string, number>) =>\n  IndexRegistry.validateIndexParameters(indexId, parameters, weights);"],"names":["StandardParameterNames"],"mappings":"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"}