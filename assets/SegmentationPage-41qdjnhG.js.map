{"version":3,"file":"SegmentationPage-41qdjnhG.js","sources":["../../node_modules/@heroicons/react/24/outline/esm/BeakerIcon.js","../../node_modules/@heroicons/react/24/outline/esm/Cog6ToothIcon.js","../../node_modules/@heroicons/react/24/outline/esm/CubeTransparentIcon.js","../../node_modules/@heroicons/react/24/outline/esm/ExclamationTriangleIcon.js","../../node_modules/@heroicons/react/24/outline/esm/InformationCircleIcon.js","../../node_modules/@heroicons/react/24/outline/esm/MapPinIcon.js","../../src/utils/geometry.ts","../../src/pages/SegmentationPage.tsx"],"sourcesContent":["import * as React from \"react\";\nfunction BeakerIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M9.75 3.104v5.714a2.25 2.25 0 0 1-.659 1.591L5 14.5M9.75 3.104c-.251.023-.501.05-.75.082m.75-.082a24.301 24.301 0 0 1 4.5 0m0 0v5.714c0 .597.237 1.17.659 1.591L19.8 15.3M14.25 3.104c.251.023.501.05.75.082M19.8 15.3l-1.57.393A9.065 9.065 0 0 1 12 15a9.065 9.065 0 0 0-6.23-.693L5 14.5m14.8.8 1.402 1.402c1.232 1.232.65 3.318-1.067 3.611A48.309 48.309 0 0 1 12 21c-2.773 0-5.491-.235-8.135-.687-1.718-.293-2.3-2.379-1.067-3.61L5 14.5\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(BeakerIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction Cog6ToothIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M9.594 3.94c.09-.542.56-.94 1.11-.94h2.593c.55 0 1.02.398 1.11.94l.213 1.281c.063.374.313.686.645.87.074.04.147.083.22.127.325.196.72.257 1.075.124l1.217-.456a1.125 1.125 0 0 1 1.37.49l1.296 2.247a1.125 1.125 0 0 1-.26 1.431l-1.003.827c-.293.241-.438.613-.43.992a7.723 7.723 0 0 1 0 .255c-.008.378.137.75.43.991l1.004.827c.424.35.534.955.26 1.43l-1.298 2.247a1.125 1.125 0 0 1-1.369.491l-1.217-.456c-.355-.133-.75-.072-1.076.124a6.47 6.47 0 0 1-.22.128c-.331.183-.581.495-.644.869l-.213 1.281c-.09.543-.56.94-1.11.94h-2.594c-.55 0-1.019-.398-1.11-.94l-.213-1.281c-.062-.374-.312-.686-.644-.87a6.52 6.52 0 0 1-.22-.127c-.325-.196-.72-.257-1.076-.124l-1.217.456a1.125 1.125 0 0 1-1.369-.49l-1.297-2.247a1.125 1.125 0 0 1 .26-1.431l1.004-.827c.292-.24.437-.613.43-.991a6.932 6.932 0 0 1 0-.255c.007-.38-.138-.751-.43-.992l-1.004-.827a1.125 1.125 0 0 1-.26-1.43l1.297-2.247a1.125 1.125 0 0 1 1.37-.491l1.216.456c.356.133.751.072 1.076-.124.072-.044.146-.086.22-.128.332-.183.582-.495.644-.869l.214-1.28Z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(Cog6ToothIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction CubeTransparentIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m21 7.5-2.25-1.313M21 7.5v2.25m0-2.25-2.25 1.313M3 7.5l2.25-1.313M3 7.5l2.25 1.313M3 7.5v2.25m9 3 2.25-1.313M12 12.75l-2.25-1.313M12 12.75V15m0 6.75 2.25-1.313M12 21.75V19.5m0 2.25-2.25-1.313m0-16.875L12 2.25l2.25 1.313M21 14.25v2.25l-2.25 1.313m-13.5 0L3 16.5v-2.25\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(CubeTransparentIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction ExclamationTriangleIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ExclamationTriangleIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction InformationCircleIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m11.25 11.25.041-.02a.75.75 0 0 1 1.063.852l-.708 2.836a.75.75 0 0 0 1.063.853l.041-.021M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9-3.75h.008v.008H12V8.25Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(InformationCircleIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction MapPinIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M15 10.5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1 1 15 0Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(MapPinIcon);\nexport default ForwardRef;","import { FeatureCollection, LineString, MultiLineString, Position } from 'geojson'\nimport { ShorelineSegment } from '../types'\nimport * as turf from '@turf/turf'\n\nexport function segmentShoreline(\n  shoreline: FeatureCollection<LineString | MultiLineString>,\n  resolution: number\n): ShorelineSegment[] {\n  const segments: ShorelineSegment[] = []\n  let segmentId = 1\n\n  shoreline.features.forEach(feature => {\n    const lines = feature.geometry.type === 'MultiLineString'\n      ? feature.geometry.coordinates.map(coords => turf.lineString(coords as Position[]))\n      : [turf.lineString(feature.geometry.coordinates as Position[])]\n\n    lines.forEach((line, lineIndex) => {\n      const length = turf.length(line, { units: 'meters' })\n      const numSegments = Math.ceil(length / resolution)\n      const actualResolution = length / numSegments\n\n      for (let i = 0; i < numSegments; i++) {\n        const start = i * actualResolution\n        const end = Math.min((i + 1) * actualResolution, length)\n        const segment = turf.lineSliceAlong(line, start, end, { units: 'meters' })\n        const segmentLength = turf.length(segment, { units: 'meters' })\n\n        segments.push({\n          type: 'Feature',\n          id: `segment-${segmentId++}`,\n          geometry: segment.geometry,\n          properties: {\n            id: `segment-${segmentId}`,\n            index: i,\n            lineIndex,\n            length: segmentLength,\n            values: {}\n          },\n          parameters: {}\n        })\n      }\n    })\n  })\n\n  return segments\n}","// ---- File: src/pages/SegmentationPage.tsx ----\nimport { useState, useEffect, useMemo, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport * as turf from '@turf/turf';\nimport L from 'leaflet';\nimport Map from '../components/maps/Map';\nimport { segmentShoreline } from '../utils/geometry';\nimport { indexedDBService } from '../services/indexedDBService';\nimport type { FeatureCollection, LineString, MultiLineString, Feature } from 'geojson';\nimport type { ShorelineSegment } from '../types';\nimport { ErrorAlert } from '../components/common/ErrorAlert';\nimport {\n    ArrowLeftIcon,\n    ArrowRightIcon,\n    InformationCircleIcon,\n    ExclamationTriangleIcon,\n    CheckCircleIcon,\n    BeakerIcon,\n    MapPinIcon,\n    CubeTransparentIcon,\n    Cog6ToothIcon\n} from '@heroicons/react/24/outline';\n\nexport default function SegmentationPage() {\n  const navigate = useNavigate();\n  const [originalGeoJSON, setOriginalGeoJSON] = useState<FeatureCollection<LineString | MultiLineString> | null>(null);\n  const [resolution, setResolution] = useState<number | ''>('');\n  const [segmentsPreview, setSegmentsPreview] = useState<ShorelineSegment[]>([]);\n  const [mapInitialBounds, setMapInitialBounds] = useState<L.LatLngBoundsExpression | null>(null);\n  const [totalShorelineLength, setTotalShorelineLength] = useState<number>(0);\n  const [estimatedSegments, setEstimatedSegments] = useState<number>(0);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [processing, setProcessing] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [isPreviewDone, setIsPreviewDone] = useState<boolean>(false);\n\n  useEffect(() => {\n    const loadShorelineData = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const shorelineId = 'current-shoreline';\n        const data = await indexedDBService.getShorelineData(shorelineId);\n        if (!data) {\n          setError('No shoreline data found. Please upload a shapefile first.');\n          navigate('/shoreline');\n          return;\n        }\n\n        if (data.features.every(feature => feature.geometry.type === 'LineString' || feature.geometry.type === 'MultiLineString')) {\n          const validGeoJSON = data as FeatureCollection<LineString | MultiLineString>;\n          setOriginalGeoJSON(validGeoJSON);\n\n          let totalLengthKm = 0;\n          validGeoJSON.features.forEach((feature: Feature<LineString | MultiLineString>) => {\n            try { totalLengthKm += turf.length(turf.feature(feature.geometry), { units: 'kilometers' }); }\n            catch (err) { console.warn('Error calculating length for a feature:', err); }\n          });\n          setTotalShorelineLength(totalLengthKm);\n\n           if (validGeoJSON.features.length > 0) {\n               try {\n                 const bbox = turf.bbox(validGeoJSON);\n                 if (bbox && bbox.length === 4 && bbox.every((b: number) => isFinite(b)) && bbox[0] <= bbox[2] && bbox[1] <= bbox[3]) {\n                     const bounds: L.LatLngBoundsExpression = [[bbox[1], bbox[0]], [bbox[3], bbox[2]]];\n                     setMapInitialBounds(bounds);\n                 } else { console.warn(\"SegmentationPage: Could not calculate valid initial bounds.\"); }\n               } catch(e) { console.error(\"SegmentationPage: Error calculating initial bounds:\", e); }\n           }\n\n        } else {\n          throw new Error('Invalid geometry type found in shoreline data. Only LineString or MultiLineString are supported.');\n        }\n      } catch (err) {\n        console.error('Error loading shoreline data:', err);\n        setError(`Failed to load shoreline data: ${err instanceof Error ? err.message : String(err)}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadShorelineData();\n  }, [navigate]);\n\n  useEffect(() => {\n    if (typeof resolution === 'number' && resolution > 0 && totalShorelineLength > 0) {\n      setEstimatedSegments(Math.ceil((totalShorelineLength * 1000) / resolution));\n    } else {\n      setEstimatedSegments(0);\n    }\n  }, [resolution, totalShorelineLength]);\n\n  const handleResolutionChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n    const numValue = value === '' ? '' : Number(value);\n    setResolution(numValue);\n    setError(null);\n    setIsPreviewDone(false);\n    setSegmentsPreview([]);\n  }, []);\n\n  const handlePreviewSegmentation = useCallback(() => {\n    if (!resolution || resolution <= 0) {\n      setError('Resolution must be a positive number (meters).');\n      return;\n    }\n    if (!originalGeoJSON) {\n      setError('Original shoreline data is not loaded.');\n      return;\n    }\n    setProcessing(true);\n    setError(null);\n    setSegmentsPreview([]);\n    setIsPreviewDone(false);\n    setTimeout(() => {\n        try {\n            console.time(\"Segmentation Calculation\");\n            const generatedSegments = segmentShoreline(originalGeoJSON, resolution);\n            console.timeEnd(\"Segmentation Calculation\");\n            setSegmentsPreview(generatedSegments);\n            setIsPreviewDone(true);\n            console.log(`Generated ${generatedSegments.length} segments for preview.`);\n        } catch (err) {\n            setError(err instanceof Error ? err.message : 'Failed to generate segment preview.');\n            console.error('Segmentation preview error:', err);\n        } finally {\n            setProcessing(false);\n        }\n    }, 10);\n  }, [originalGeoJSON, resolution]);\n\n  const handleContinue = useCallback(async () => {\n    if (!isPreviewDone || segmentsPreview.length === 0) {\n      setError(\"Please generate and preview the segmentation first using the 'Preview Segmentation' button.\");\n      return;\n    }\n    setProcessing(true);\n    setError(null);\n    try {\n      await indexedDBService.storeShorelineData('current-segments', {\n        type: 'FeatureCollection',\n        features: segmentsPreview.map(segment => ({\n          type: 'Feature',\n          geometry: segment.geometry,\n          properties: segment.properties\n        }))\n      });\n      console.log(\"Confirmed segments stored in IndexedDB.\");\n      navigate('/segment-table');\n    } catch (err) {\n      console.error('Error storing segments:', err);\n      setError(`Failed to save segments: ${err instanceof Error ? err.message : String(err)}`);\n    } finally {\n      setProcessing(false);\n    }\n  }, [isPreviewDone, segmentsPreview, navigate]);\n\n  const handleBack = useCallback(() => { navigate('/shoreline'); }, [navigate]);\n  const geoJSONForMap = useMemo(() => {\n    if (isPreviewDone && segmentsPreview.length > 0) {\n      return {\n        type: 'FeatureCollection' as const,\n        features: segmentsPreview.map(segment => ({\n          type: 'Feature' as const,\n          geometry: segment.geometry,\n          properties: { ...segment.properties, id: segment.id }\n        }))\n      };\n    }\n    return originalGeoJSON;\n  }, [originalGeoJSON, segmentsPreview, isPreviewDone]);\n\n  const mapStylingMode = useMemo(() => (isPreviewDone ? 'parameter' : undefined), [isPreviewDone]);\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600\"></div>\n        <p className=\"ml-4 text-gray-600\">Loading shoreline data...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8\">\n      {/* Header */}\n      <div className=\"text-center mb-10\">\n        <h2 className=\"text-3xl font-extrabold text-primary-900 tracking-tight\">\n          2. Segment Shoreline\n        </h2>\n        <p className=\"mt-3 text-lg text-gray-600\">\n          Define the resolution to divide the shoreline into analysis segments.\n        </p>\n      </div>\n\n      {/* Error Display */}\n      <ErrorAlert message={error} onClose={() => setError(null)} />\n\n      {/* Grid Container for Controls and Map */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mt-8\">\n\n        {/* Left Column: Controls Section */}\n        <div className=\"lg:col-span-1 flex flex-col\"> {/* Ensure flex-col for spacing */}\n           <h3 className=\"text-xl font-semibold text-gray-800 mb-4 flex items-center\">\n             <Cog6ToothIcon className=\"h-6 w-6 mr-2 text-primary-700\"/> Segmentation Settings\n           </h3>\n          <div className=\"bg-white p-6 sm:p-8 rounded-lg shadow-md border border-gray-200 space-y-6\"> {/* Use space-y for internal spacing */}\n            {/* Info Area */}\n            <div className=\"flex items-center text-sm text-gray-600 border-b border-gray-200 pb-4\">\n              <MapPinIcon className=\"h-5 w-5 mr-2 text-primary-600 flex-shrink-0\" />\n              <span>Total Shoreline Length: <span className=\"font-medium text-gray-800\">{totalShorelineLength.toFixed(2)} km</span></span>\n            </div>\n\n            {/* Resolution Input */}\n            <div>\n              <label htmlFor=\"resolution\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Segment Resolution/Length <span className=\"text-red-500\">*</span>\n              </label>\n              <div className=\"mt-1 relative rounded-md shadow-md border border-gray-200 bg-gray-50 p-1\">\n                <input\n                  type=\"number\"\n                  name=\"resolution\"\n                  id=\"resolution\"\n                  placeholder=\"Enter resolution (e.g., 10)\"\n                  value={resolution}\n                  onChange={handleResolutionChange}\n                  className=\"block w-full pr-16 py-3 px-3 text-base rounded-md border-gray-300 focus:border-primary-500 focus:ring-primary-500 disabled:bg-gray-100 bg-white\"\n                  disabled={processing}\n                  aria-describedby=\"resolution-unit\"\n                  min=\"1\"\n                  step=\"1\"\n                />\n                <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n                  <span className=\"text-gray-500 text-sm\" id=\"resolution-unit\">meters</span>\n                </div>\n              </div>\n              <p className=\"mt-2 text-sm text-gray-600\">\n                Enter the desired length for each shoreline segment.\n              </p>\n            </div>\n\n            {/* Estimation & Warning */}\n            <div className=\"p-4 bg-gray-50 rounded-md border border-gray-200 space-y-2\"> {/* Removed mb-6 */}\n              <div className=\"flex items-center text-sm\">\n                <InformationCircleIcon className=\"h-5 w-5 mr-2 text-blue-500 flex-shrink-0\" />\n                <p className=\"text-gray-700\">\n                  Estimated segments: <span className=\"font-semibold\">{estimatedSegments.toLocaleString()}</span>\n                </p>\n              </div>\n              {estimatedSegments > 300000 && (\n                <div className=\"flex items-start text-sm text-amber-600\">\n                  <ExclamationTriangleIcon className=\"h-5 w-5 mr-2 flex-shrink-0 mt-0.5\" />\n                  <span>Warning: High segment count (&gt;300k) may impact performance.</span>\n                </div>\n              )}\n            </div>\n\n            {/* Action Button: Preview */}\n            <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-start gap-4\">\n               <button\n                 type=\"button\"\n                 onClick={handlePreviewSegmentation}\n                 disabled={!resolution || resolution <= 0 || processing}\n                 className=\"w-full sm:w-auto inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n                 title={!resolution || resolution <= 0 ? \"Enter a positive resolution first\" : \"Generate segment preview on the map\"}\n               >\n                 <BeakerIcon className={`h-5 w-5 mr-2 ${processing && !isPreviewDone ? 'animate-spin' : ''}`} />\n                 {processing && !isPreviewDone ? 'Generating...' : 'Preview Segmentation'}\n               </button>\n\n               {/* Preview Done Feedback */}\n               {isPreviewDone && segmentsPreview.length > 0 && (\n                   <div className=\"flex items-center text-sm text-green-600\">\n                       <CheckCircleIcon className=\"h-5 w-5 mr-1.5\"/>\n                       <span>{segmentsPreview.length.toLocaleString()} segments ready.</span>\n                   </div>\n               )}\n               {isPreviewDone && segmentsPreview.length === 0 && (\n                   <div className=\"flex items-center text-sm text-red-600\">\n                       <ExclamationTriangleIcon className=\"h-5 w-5 mr-1.5\"/>\n                       <span>No segments generated.</span>\n                   </div>\n               )}\n            </div>\n          </div>\n        </div> {/* End Left Column */}\n\n\n        {/* Right Column: Map Preview Section */}\n        <div className=\"lg:col-span-1 flex flex-col\">\n            <h3 className=\"text-xl font-semibold text-gray-800 mb-4 flex items-center\">\n                <CubeTransparentIcon className=\"h-6 w-6 mr-2 text-primary-700\"/>\n                 Preview Map\n            </h3>\n             <p className=\"mb-3 text-sm text-gray-600\">\n               {isPreviewDone\n                 ? `Showing ${segmentsPreview.length.toLocaleString()} generated segments (${resolution}m).`\n                 : (originalGeoJSON ? 'Showing original shoreline. Enter resolution & click preview.' : 'Load shoreline data first.')}\n            </p>\n            <div className=\"bg-gray-100 rounded-lg shadow-inner border border-gray-200 overflow-hidden flex-grow min-h-[500px] relative\"> {/* Added flex-grow and min-h */}\n              {originalGeoJSON ? (\n                <Map\n                  geoJSON={geoJSONForMap}\n                  segments={segmentsPreview}\n                  parameters={[]}\n                  selectedParameter={null}\n                  selectedSegments={[]}\n                  selectionPolygons={[]}\n                  onSegmentSelect={() => {}}\n                  onSelectionDelete={() => {}}\n                  onAreaSelect={() => {}}\n                  isEditing={false}\n                  initialBounds={mapInitialBounds}\n                  stylingMode={mapStylingMode}\n                />\n              ) : (\n                <div className=\"absolute inset-0 flex items-center justify-center text-gray-500\">\n                  {loading ? 'Loading map data...' : 'No shoreline data loaded.'}\n                </div>\n              )}\n            </div>\n        </div> {/* End Right Column */}\n\n      </div> {/* End Grid Container */}\n\n\n      {/* Navigation Buttons (Below Grid) */}\n      <div className=\"mt-10 pt-6 border-t border-gray-200 flex justify-between items-center\">\n        <button\n          type=\"button\"\n          onClick={handleBack}\n          className=\"inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n        >\n          <ArrowLeftIcon className=\"h-4 w-4 mr-2\"/> Back\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={handleContinue}\n          disabled={!isPreviewDone || segmentsPreview.length === 0 || processing}\n          className=\"inline-flex items-center px-6 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n          title={!isPreviewDone || segmentsPreview.length === 0 ? \"Generate and preview segments first\" : \"Confirm segments and proceed\"}\n        >\n          {processing && isPreviewDone ? 'Saving...' : 'Confirm & Continue'}\n          <ArrowRightIcon className=\"h-4 w-4 ml-2\"/>\n        </button>\n      </div>\n    </div>\n  );\n}\n"],"names":["React.createElement","ForwardRef","React.forwardRef","feature","turf.lineString","length","turf.length","turf.lineSliceAlong","useState","useEffect","turf.feature","bbox","turf.bbox","useCallback","useMemo","jsxs","jsx","Cog6ToothIcon","MapPinIcon","InformationCircleIcon","ExclamationTriangleIcon","BeakerIcon","CheckCircleIcon","CubeTransparentIcon","ArrowLeftIcon","ArrowRightIcon"],"mappings":";;;;;;;;;;;;;AACA,SAAS,WAAW;AAAA,EAClB;AAAA,EACA;AAAA,EACA,GAAG;AACL,GAAG,QAAQ;AACT,SAAoBA,2CAAoB,OAAO,OAAO,OAAO;AAAA,IAC3D,OAAO;AAAA,IACP,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,IACb,QAAQ;AAAA,IACR,eAAe;AAAA,IACf,aAAa;AAAA,IACb,KAAK;AAAA,IACL,mBAAmB;AAAA,EACvB,GAAK,KAAK,GAAG,QAAqBA,6BAAAA,cAAoB,SAAS;AAAA,IAC3D,IAAI;AAAA,EACR,GAAK,KAAK,IAAI,MAAmBA,6BAAAA,cAAoB,QAAQ;AAAA,IACzD,eAAe;AAAA,IACf,gBAAgB;AAAA,IAChB,GAAG;AAAA,EACP,CAAG,CAAC;AACJ;AACA,MAAMC,eAA2BC,6BAAAA,WAAiB,UAAU;ACvB5D,SAAS,cAAc;AAAA,EACrB;AAAA,EACA;AAAA,EACA,GAAG;AACL,GAAG,QAAQ;AACT,SAAoBF,2CAAoB,OAAO,OAAO,OAAO;AAAA,IAC3D,OAAO;AAAA,IACP,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,IACb,QAAQ;AAAA,IACR,eAAe;AAAA,IACf,aAAa;AAAA,IACb,KAAK;AAAA,IACL,mBAAmB;AAAA,EACvB,GAAK,KAAK,GAAG,QAAqBA,6BAAAA,cAAoB,SAAS;AAAA,IAC3D,IAAI;AAAA,EACR,GAAK,KAAK,IAAI,MAAmBA,6BAAAA,cAAoB,QAAQ;AAAA,IACzD,eAAe;AAAA,IACf,gBAAgB;AAAA,IAChB,GAAG;AAAA,EACP,CAAG,GAAgBA,6BAAAA,cAAoB,QAAQ;AAAA,IAC3C,eAAe;AAAA,IACf,gBAAgB;AAAA,IAChB,GAAG;AAAA,EACP,CAAG,CAAC;AACJ;AACA,MAAMC,eAA2BC,6BAAAA,WAAiB,aAAa;AC3B/D,SAAS,oBAAoB;AAAA,EAC3B;AAAA,EACA;AAAA,EACA,GAAG;AACL,GAAG,QAAQ;AACT,SAAoBF,2CAAoB,OAAO,OAAO,OAAO;AAAA,IAC3D,OAAO;AAAA,IACP,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,IACb,QAAQ;AAAA,IACR,eAAe;AAAA,IACf,aAAa;AAAA,IACb,KAAK;AAAA,IACL,mBAAmB;AAAA,EACvB,GAAK,KAAK,GAAG,QAAqBA,6BAAAA,cAAoB,SAAS;AAAA,IAC3D,IAAI;AAAA,EACR,GAAK,KAAK,IAAI,MAAmBA,6BAAAA,cAAoB,QAAQ;AAAA,IACzD,eAAe;AAAA,IACf,gBAAgB;AAAA,IAChB,GAAG;AAAA,EACP,CAAG,CAAC;AACJ;AACA,MAAMC,eAA2BC,6BAAAA,WAAiB,mBAAmB;ACvBrE,SAAS,wBAAwB;AAAA,EAC/B;AAAA,EACA;AAAA,EACA,GAAG;AACL,GAAG,QAAQ;AACT,SAAoBF,2CAAoB,OAAO,OAAO,OAAO;AAAA,IAC3D,OAAO;AAAA,IACP,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,IACb,QAAQ;AAAA,IACR,eAAe;AAAA,IACf,aAAa;AAAA,IACb,KAAK;AAAA,IACL,mBAAmB;AAAA,EACvB,GAAK,KAAK,GAAG,QAAqBA,6BAAAA,cAAoB,SAAS;AAAA,IAC3D,IAAI;AAAA,EACR,GAAK,KAAK,IAAI,MAAmBA,6BAAAA,cAAoB,QAAQ;AAAA,IACzD,eAAe;AAAA,IACf,gBAAgB;AAAA,IAChB,GAAG;AAAA,EACP,CAAG,CAAC;AACJ;AACA,MAAMC,eAA2BC,6BAAAA,WAAiB,uBAAuB;ACvBzE,SAAS,sBAAsB;AAAA,EAC7B;AAAA,EACA;AAAA,EACA,GAAG;AACL,GAAG,QAAQ;AACT,SAAoBF,2CAAoB,OAAO,OAAO,OAAO;AAAA,IAC3D,OAAO;AAAA,IACP,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,IACb,QAAQ;AAAA,IACR,eAAe;AAAA,IACf,aAAa;AAAA,IACb,KAAK;AAAA,IACL,mBAAmB;AAAA,EACvB,GAAK,KAAK,GAAG,QAAqBA,6BAAAA,cAAoB,SAAS;AAAA,IAC3D,IAAI;AAAA,EACR,GAAK,KAAK,IAAI,MAAmBA,6BAAAA,cAAoB,QAAQ;AAAA,IACzD,eAAe;AAAA,IACf,gBAAgB;AAAA,IAChB,GAAG;AAAA,EACP,CAAG,CAAC;AACJ;AACA,MAAMC,eAA2BC,6BAAAA,WAAiB,qBAAqB;ACvBvE,SAAS,WAAW;AAAA,EAClB;AAAA,EACA;AAAA,EACA,GAAG;AACL,GAAG,QAAQ;AACT,SAAoBF,2CAAoB,OAAO,OAAO,OAAO;AAAA,IAC3D,OAAO;AAAA,IACP,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,IACb,QAAQ;AAAA,IACR,eAAe;AAAA,IACf,aAAa;AAAA,IACb,KAAK;AAAA,IACL,mBAAmB;AAAA,EACvB,GAAK,KAAK,GAAG,QAAqBA,6BAAAA,cAAoB,SAAS;AAAA,IAC3D,IAAI;AAAA,EACR,GAAK,KAAK,IAAI,MAAmBA,6BAAAA,cAAoB,QAAQ;AAAA,IACzD,eAAe;AAAA,IACf,gBAAgB;AAAA,IAChB,GAAG;AAAA,EACP,CAAG,GAAgBA,6BAAAA,cAAoB,QAAQ;AAAA,IAC3C,eAAe;AAAA,IACf,gBAAgB;AAAA,IAChB,GAAG;AAAA,EACP,CAAG,CAAC;AACJ;AACA,MAAM,aAA2BE,6BAAAA,WAAiB,UAAU;ACxBrD,SAAS,iBACd,WACA,YACoB;AACpB,QAAM,WAA+B,CAAA;AACrC,MAAI,YAAY;AAEhB,YAAU,SAAS,QAAQ,CAAAC,aAAW;AACpC,UAAM,QAAQA,SAAQ,SAAS,SAAS,oBACpCA,SAAQ,SAAS,YAAY,IAAI,CAAA,WAAUC,WAAgB,MAAoB,CAAC,IAChF,CAACA,WAAgBD,SAAQ,SAAS,WAAyB,CAAC;AAEhE,UAAM,QAAQ,CAAC,MAAM,cAAc;AACjC,YAAME,WAASC,OAAY,MAAM,EAAE,OAAO,UAAU;AACpD,YAAM,cAAc,KAAK,KAAKD,WAAS,UAAU;AACjD,YAAM,mBAAmBA,WAAS;AAElC,eAAS,IAAI,GAAG,IAAI,aAAa,KAAK;AACpC,cAAM,QAAQ,IAAI;AAClB,cAAM,MAAM,KAAK,KAAK,IAAI,KAAK,kBAAkBA,QAAM;AACvD,cAAM,UAAUE,eAAoB,MAAM,OAAO,KAAK,EAAE,OAAO,UAAU;AACzE,cAAM,gBAAgBD,OAAY,SAAS,EAAE,OAAO,UAAU;AAE9D,iBAAS,KAAK;AAAA,UACZ,MAAM;AAAA,UACN,IAAI,WAAW,WAAW;AAAA,UAC1B,UAAU,QAAQ;AAAA,UAClB,YAAY;AAAA,YACV,IAAI,WAAW,SAAS;AAAA,YACxB,OAAO;AAAA,YACP;AAAA,YACA,QAAQ;AAAA,YACR,QAAQ,CAAA;AAAA,UAAC;AAAA,UAEX,YAAY,CAAA;AAAA,QAAC,CACd;AAAA,MACH;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AAED,SAAO;AACT;ACtBA,SAAwB,mBAAmB;AACzC,QAAM,WAAW,YAAA;AACjB,QAAM,CAAC,iBAAiB,kBAAkB,IAAIE,aAAAA,SAAiE,IAAI;AACnH,QAAM,CAAC,YAAY,aAAa,IAAIA,aAAAA,SAAsB,EAAE;AAC5D,QAAM,CAAC,iBAAiB,kBAAkB,IAAIA,aAAAA,SAA6B,CAAA,CAAE;AAC7E,QAAM,CAAC,kBAAkB,mBAAmB,IAAIA,aAAAA,SAA0C,IAAI;AAC9F,QAAM,CAAC,sBAAsB,uBAAuB,IAAIA,aAAAA,SAAiB,CAAC;AAC1E,QAAM,CAAC,mBAAmB,oBAAoB,IAAIA,aAAAA,SAAiB,CAAC;AACpE,QAAM,CAAC,SAAS,UAAU,IAAIA,aAAAA,SAAkB,IAAI;AACpD,QAAM,CAAC,YAAY,aAAa,IAAIA,aAAAA,SAAkB,KAAK;AAC3D,QAAM,CAAC,OAAO,QAAQ,IAAIA,aAAAA,SAAwB,IAAI;AACtD,QAAM,CAAC,eAAe,gBAAgB,IAAIA,aAAAA,SAAkB,KAAK;AAEjEC,eAAAA,UAAU,MAAM;AACd,UAAM,oBAAoB,YAAY;AACpC,iBAAW,IAAI;AACf,eAAS,IAAI;AACb,UAAI;AACF,cAAM,cAAc;AACpB,cAAM,OAAO,MAAM,iBAAiB,iBAAiB,WAAW;AAChE,YAAI,CAAC,MAAM;AACT,mBAAS,2DAA2D;AACpE,mBAAS,YAAY;AACrB;AAAA,QACF;AAEA,YAAI,KAAK,SAAS,MAAM,CAAAN,aAAWA,SAAQ,SAAS,SAAS,gBAAgBA,SAAQ,SAAS,SAAS,iBAAiB,GAAG;AACzH,gBAAM,eAAe;AACrB,6BAAmB,YAAY;AAE/B,cAAI,gBAAgB;AACpB,uBAAa,SAAS,QAAQ,CAACA,cAAmD;AAChF,gBAAI;AAAE,+BAAiBG,OAAYI,QAAaP,UAAQ,QAAQ,GAAG,EAAE,OAAO,cAAc;AAAA,YAAG,SACtF,KAAK;AAAE,sBAAQ,KAAK,2CAA2C,GAAG;AAAA,YAAG;AAAA,UAC9E,CAAC;AACD,kCAAwB,aAAa;AAEpC,cAAI,aAAa,SAAS,SAAS,GAAG;AAClC,gBAAI;AACF,oBAAMQ,SAAOC,KAAU,YAAY;AACnC,kBAAID,UAAQA,OAAK,WAAW,KAAKA,OAAK,MAAM,CAAC,MAAc,SAAS,CAAC,CAAC,KAAKA,OAAK,CAAC,KAAKA,OAAK,CAAC,KAAKA,OAAK,CAAC,KAAKA,OAAK,CAAC,GAAG;AACjH,sBAAM,SAAmC,CAAC,CAACA,OAAK,CAAC,GAAGA,OAAK,CAAC,CAAC,GAAG,CAACA,OAAK,CAAC,GAAGA,OAAK,CAAC,CAAC,CAAC;AAChF,oCAAoB,MAAM;AAAA,cAC9B,OAAO;AAAE,wBAAQ,KAAK,6DAA6D;AAAA,cAAG;AAAA,YACxF,SAAQ,GAAG;AAAE,sBAAQ,MAAM,uDAAuD,CAAC;AAAA,YAAG;AAAA,UAC1F;AAAA,QAEH,OAAO;AACL,gBAAM,IAAI,MAAM,kGAAkG;AAAA,QACpH;AAAA,MACF,SAAS,KAAK;AACZ,gBAAQ,MAAM,iCAAiC,GAAG;AAClD,iBAAS,kCAAkC,eAAe,QAAQ,IAAI,UAAU,OAAO,GAAG,CAAC,EAAE;AAAA,MAC/F,UAAA;AACE,mBAAW,KAAK;AAAA,MAClB;AAAA,IACF;AACA,sBAAA;AAAA,EACF,GAAG,CAAC,QAAQ,CAAC;AAEbF,eAAAA,UAAU,MAAM;AACd,QAAI,OAAO,eAAe,YAAY,aAAa,KAAK,uBAAuB,GAAG;AAChF,2BAAqB,KAAK,KAAM,uBAAuB,MAAQ,UAAU,CAAC;AAAA,IAC5E,OAAO;AACL,2BAAqB,CAAC;AAAA,IACxB;AAAA,EACF,GAAG,CAAC,YAAY,oBAAoB,CAAC;AAErC,QAAM,yBAAyBI,yBAAY,CAAC,UAA+C;AACzF,UAAM,QAAQ,MAAM,OAAO;AAC3B,UAAM,WAAW,UAAU,KAAK,KAAK,OAAO,KAAK;AACjD,kBAAc,QAAQ;AACtB,aAAS,IAAI;AACb,qBAAiB,KAAK;AACtB,uBAAmB,CAAA,CAAE;AAAA,EACvB,GAAG,CAAA,CAAE;AAEL,QAAM,4BAA4BA,aAAAA,YAAY,MAAM;AAClD,QAAI,CAAC,cAAc,cAAc,GAAG;AAClC,eAAS,gDAAgD;AACzD;AAAA,IACF;AACA,QAAI,CAAC,iBAAiB;AACpB,eAAS,wCAAwC;AACjD;AAAA,IACF;AACA,kBAAc,IAAI;AAClB,aAAS,IAAI;AACb,uBAAmB,CAAA,CAAE;AACrB,qBAAiB,KAAK;AACtB,eAAW,MAAM;AACb,UAAI;AACA,gBAAQ,KAAK,0BAA0B;AACvC,cAAM,oBAAoB,iBAAiB,iBAAiB,UAAU;AACtE,gBAAQ,QAAQ,0BAA0B;AAC1C,2BAAmB,iBAAiB;AACpC,yBAAiB,IAAI;AACrB,gBAAQ,IAAI,aAAa,kBAAkB,MAAM,wBAAwB;AAAA,MAC7E,SAAS,KAAK;AACV,iBAAS,eAAe,QAAQ,IAAI,UAAU,qCAAqC;AACnF,gBAAQ,MAAM,+BAA+B,GAAG;AAAA,MACpD,UAAA;AACI,sBAAc,KAAK;AAAA,MACvB;AAAA,IACJ,GAAG,EAAE;AAAA,EACP,GAAG,CAAC,iBAAiB,UAAU,CAAC;AAEhC,QAAM,iBAAiBA,aAAAA,YAAY,YAAY;AAC7C,QAAI,CAAC,iBAAiB,gBAAgB,WAAW,GAAG;AAClD,eAAS,6FAA6F;AACtG;AAAA,IACF;AACA,kBAAc,IAAI;AAClB,aAAS,IAAI;AACb,QAAI;AACF,YAAM,iBAAiB,mBAAmB,oBAAoB;AAAA,QAC5D,MAAM;AAAA,QACN,UAAU,gBAAgB,IAAI,CAAA,aAAY;AAAA,UACxC,MAAM;AAAA,UACN,UAAU,QAAQ;AAAA,UAClB,YAAY,QAAQ;AAAA,QAAA,EACpB;AAAA,MAAA,CACH;AACD,cAAQ,IAAI,yCAAyC;AACrD,eAAS,gBAAgB;AAAA,IAC3B,SAAS,KAAK;AACZ,cAAQ,MAAM,2BAA2B,GAAG;AAC5C,eAAS,4BAA4B,eAAe,QAAQ,IAAI,UAAU,OAAO,GAAG,CAAC,EAAE;AAAA,IACzF,UAAA;AACE,oBAAc,KAAK;AAAA,IACrB;AAAA,EACF,GAAG,CAAC,eAAe,iBAAiB,QAAQ,CAAC;AAE7C,QAAM,aAAaA,aAAAA,YAAY,MAAM;AAAE,aAAS,YAAY;AAAA,EAAG,GAAG,CAAC,QAAQ,CAAC;AAC5E,QAAM,gBAAgBC,aAAAA,QAAQ,MAAM;AAClC,QAAI,iBAAiB,gBAAgB,SAAS,GAAG;AAC/C,aAAO;AAAA,QACL,MAAM;AAAA,QACN,UAAU,gBAAgB,IAAI,CAAA,aAAY;AAAA,UACxC,MAAM;AAAA,UACN,UAAU,QAAQ;AAAA,UAClB,YAAY,EAAE,GAAG,QAAQ,YAAY,IAAI,QAAQ,GAAA;AAAA,QAAG,EACpD;AAAA,MAAA;AAAA,IAEN;AACA,WAAO;AAAA,EACT,GAAG,CAAC,iBAAiB,iBAAiB,aAAa,CAAC;AAEpD,QAAM,iBAAiBA,aAAAA,QAAQ,MAAO,gBAAgB,cAAc,QAAY,CAAC,aAAa,CAAC;AAE/F,MAAI,SAAS;AACX,WACEC,kCAAAA,KAAC,OAAA,EAAI,WAAU,6CACb,UAAA;AAAA,MAAAC,kCAAAA,IAAC,OAAA,EAAI,WAAU,kEAAA,CAAkE;AAAA,MACjFA,kCAAAA,IAAC,KAAA,EAAE,WAAU,sBAAqB,UAAA,4BAAA,CAAyB;AAAA,IAAA,GAC7D;AAAA,EAEJ;AAEA,SACED,kCAAAA,KAAC,OAAA,EAAI,WAAU,gDAEb,UAAA;AAAA,IAAAA,kCAAAA,KAAC,OAAA,EAAI,WAAU,qBACb,UAAA;AAAA,MAAAC,kCAAAA,IAAC,MAAA,EAAG,WAAU,2DAA0D,UAAA,wBAExE;AAAA,MACAA,kCAAAA,IAAC,KAAA,EAAE,WAAU,8BAA6B,UAAA,wEAAA,CAE1C;AAAA,IAAA,GACF;AAAA,IAGAA,sCAAC,cAAW,SAAS,OAAO,SAAS,MAAM,SAAS,IAAI,GAAG;AAAA,IAG3DD,kCAAAA,KAAC,OAAA,EAAI,WAAU,8CAGb,UAAA;AAAA,MAAAA,kCAAAA,KAAC,OAAA,EAAI,WAAU,+BAA8B,UAAA;AAAA,QAAA;AAAA,QAC1CA,kCAAAA,KAAC,MAAA,EAAG,WAAU,8DACZ,UAAA;AAAA,UAAAC,kCAAAA,IAACC,cAAA,EAAc,WAAU,gCAAA,CAA+B;AAAA,UAAE;AAAA,QAAA,GAC5D;AAAA,QACDF,kCAAAA,KAAC,OAAA,EAAI,WAAU,6EAA4E,UAAA;AAAA,UAAA;AAAA,UAEzFA,kCAAAA,KAAC,OAAA,EAAI,WAAU,yEACb,UAAA;AAAA,YAAAC,kCAAAA,IAACE,YAAA,EAAW,WAAU,8CAAA,CAA8C;AAAA,mDACnE,QAAA,EAAK,UAAA;AAAA,cAAA;AAAA,cAAwBH,kCAAAA,KAAC,QAAA,EAAK,WAAU,6BAA6B,UAAA;AAAA,gBAAA,qBAAqB,QAAQ,CAAC;AAAA,gBAAE;AAAA,cAAA,EAAA,CAAG;AAAA,YAAA,EAAA,CAAO;AAAA,UAAA,GACvH;AAAA,iDAGC,OAAA,EACC,UAAA;AAAA,YAAAA,kCAAAA,KAAC,SAAA,EAAM,SAAQ,cAAa,WAAU,gDAA+C,UAAA;AAAA,cAAA;AAAA,cACzDC,kCAAAA,IAAC,QAAA,EAAK,WAAU,gBAAe,UAAA,IAAA,CAAC;AAAA,YAAA,GAC5D;AAAA,YACAD,kCAAAA,KAAC,OAAA,EAAI,WAAU,4EACb,UAAA;AAAA,cAAAC,kCAAAA;AAAAA,gBAAC;AAAA,gBAAA;AAAA,kBACC,MAAK;AAAA,kBACL,MAAK;AAAA,kBACL,IAAG;AAAA,kBACH,aAAY;AAAA,kBACZ,OAAO;AAAA,kBACP,UAAU;AAAA,kBACV,WAAU;AAAA,kBACV,UAAU;AAAA,kBACV,oBAAiB;AAAA,kBACjB,KAAI;AAAA,kBACJ,MAAK;AAAA,gBAAA;AAAA,cAAA;AAAA,cAEPA,kCAAAA,IAAC,OAAA,EAAI,WAAU,yEACb,UAAAA,kCAAAA,IAAC,QAAA,EAAK,WAAU,yBAAwB,IAAG,mBAAkB,UAAA,SAAA,CAAM,EAAA,CACrE;AAAA,YAAA,GACF;AAAA,YACAA,kCAAAA,IAAC,KAAA,EAAE,WAAU,8BAA6B,UAAA,uDAAA,CAE1C;AAAA,UAAA,GACF;AAAA,UAGAD,kCAAAA,KAAC,OAAA,EAAI,WAAU,8DAA6D,UAAA;AAAA,YAAA;AAAA,YAC1EA,kCAAAA,KAAC,OAAA,EAAI,WAAU,6BACb,UAAA;AAAA,cAAAC,kCAAAA,IAACG,cAAA,EAAsB,WAAU,2CAAA,CAA2C;AAAA,cAC5EJ,kCAAAA,KAAC,KAAA,EAAE,WAAU,iBAAgB,UAAA;AAAA,gBAAA;AAAA,sDACN,QAAA,EAAK,WAAU,iBAAiB,UAAA,kBAAkB,iBAAe,CAAE;AAAA,cAAA,EAAA,CAC1F;AAAA,YAAA,GACF;AAAA,YACC,oBAAoB,OACnBA,uCAAC,OAAA,EAAI,WAAU,2CACb,UAAA;AAAA,cAAAC,kCAAAA,IAACI,cAAA,EAAwB,WAAU,oCAAA,CAAoC;AAAA,cACvEJ,kCAAAA,IAAC,UAAK,UAAA,8DAAA,CAA8D;AAAA,YAAA,EAAA,CACtE;AAAA,UAAA,GAEJ;AAAA,UAGAD,kCAAAA,KAAC,OAAA,EAAI,WAAU,oEACZ,UAAA;AAAA,YAAAA,kCAAAA;AAAAA,cAAC;AAAA,cAAA;AAAA,gBACC,MAAK;AAAA,gBACL,SAAS;AAAA,gBACT,UAAU,CAAC,cAAc,cAAc,KAAK;AAAA,gBAC5C,WAAU;AAAA,gBACV,OAAO,CAAC,cAAc,cAAc,IAAI,sCAAsC;AAAA,gBAE9E,UAAA;AAAA,kBAAAC,kCAAAA,IAACK,cAAA,EAAW,WAAW,gBAAgB,cAAc,CAAC,gBAAgB,iBAAiB,EAAE,GAAA,CAAI;AAAA,kBAC5F,cAAc,CAAC,gBAAgB,kBAAkB;AAAA,gBAAA;AAAA,cAAA;AAAA,YAAA;AAAA,YAInD,iBAAiB,gBAAgB,SAAS,KACvCN,kCAAAA,KAAC,OAAA,EAAI,WAAU,4CACX,UAAA;AAAA,cAAAC,kCAAAA,IAACM,cAAA,EAAgB,WAAU,iBAAA,CAAgB;AAAA,qDAC1C,QAAA,EAAM,UAAA;AAAA,gBAAA,gBAAgB,OAAO,eAAA;AAAA,gBAAiB;AAAA,cAAA,EAAA,CAAgB;AAAA,YAAA,GACnE;AAAA,YAEH,iBAAiB,gBAAgB,WAAW,KACzCP,kCAAAA,KAAC,OAAA,EAAI,WAAU,0CACX,UAAA;AAAA,cAAAC,kCAAAA,IAACI,cAAA,EAAwB,WAAU,iBAAA,CAAgB;AAAA,cACnDJ,kCAAAA,IAAC,UAAK,UAAA,yBAAA,CAAsB;AAAA,YAAA,EAAA,CAChC;AAAA,UAAA,EAAA,CAEP;AAAA,QAAA,EAAA,CACF;AAAA,MAAA,GACF;AAAA,MAAM;AAAA,MAIND,kCAAAA,KAAC,OAAA,EAAI,WAAU,+BACX,UAAA;AAAA,QAAAA,kCAAAA,KAAC,MAAA,EAAG,WAAU,8DACV,UAAA;AAAA,UAAAC,kCAAAA,IAACO,cAAA,EAAoB,WAAU,gCAAA,CAA+B;AAAA,UAAE;AAAA,QAAA,GAEpE;AAAA,QACCP,sCAAC,KAAA,EAAE,WAAU,8BACV,0BACG,WAAW,gBAAgB,OAAO,eAAA,CAAgB,wBAAwB,UAAU,QACnF,kBAAkB,kEAAkE,8BAC5F;AAAA,QACAD,kCAAAA,KAAC,OAAA,EAAI,WAAU,+GAA8G,UAAA;AAAA,UAAA;AAAA,UAC1H,kBACCC,kCAAAA;AAAAA,YAAC;AAAA,YAAA;AAAA,cACC,SAAS;AAAA,cACT,UAAU;AAAA,cACV,YAAY,CAAA;AAAA,cACZ,mBAAmB;AAAA,cACnB,kBAAkB,CAAA;AAAA,cAClB,mBAAmB,CAAA;AAAA,cACnB,iBAAiB,MAAM;AAAA,cAAC;AAAA,cACxB,mBAAmB,MAAM;AAAA,cAAC;AAAA,cAC1B,cAAc,MAAM;AAAA,cAAC;AAAA,cACrB,WAAW;AAAA,cACX,eAAe;AAAA,cACf,aAAa;AAAA,YAAA;AAAA,UAAA,IAGfA,kCAAAA,IAAC,OAAA,EAAI,WAAU,mEACZ,UAAA,UAAU,wBAAwB,4BAAA,CACrC;AAAA,QAAA,EAAA,CAEJ;AAAA,MAAA,GACJ;AAAA,MAAM;AAAA,IAAA,GAER;AAAA,IAAM;AAAA,IAIND,kCAAAA,KAAC,OAAA,EAAI,WAAU,yEACb,UAAA;AAAA,MAAAA,kCAAAA;AAAAA,QAAC;AAAA,QAAA;AAAA,UACC,MAAK;AAAA,UACL,SAAS;AAAA,UACT,WAAU;AAAA,UAEV,UAAA;AAAA,YAAAC,kCAAAA,IAACQ,cAAA,EAAc,WAAU,eAAA,CAAc;AAAA,YAAE;AAAA,UAAA;AAAA,QAAA;AAAA,MAAA;AAAA,MAG3CT,kCAAAA;AAAAA,QAAC;AAAA,QAAA;AAAA,UACC,MAAK;AAAA,UACL,SAAS;AAAA,UACT,UAAU,CAAC,iBAAiB,gBAAgB,WAAW,KAAK;AAAA,UAC5D,WAAU;AAAA,UACV,OAAO,CAAC,iBAAiB,gBAAgB,WAAW,IAAI,wCAAwC;AAAA,UAE/F,UAAA;AAAA,YAAA,cAAc,gBAAgB,cAAc;AAAA,YAC7CC,kCAAAA,IAACS,cAAA,EAAe,WAAU,eAAA,CAAc;AAAA,UAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IAC1C,EAAA,CACF;AAAA,EAAA,GACF;AAEJ;","x_google_ignoreList":[0,1,2,3,4,5]}