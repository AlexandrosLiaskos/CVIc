{"version":3,"file":"ParameterAssignmentPage-CKXxYHQq.js","sources":["../../src/components/parameters/MapInteractionPanel.tsx","../../src/components/parameters/ParameterValuePanel.tsx","../../src/components/parameters/CviFormulaPanel.tsx","../../src/components/parameters/SegmentTablePanel.tsx","../../src/hooks/useParameterAssignmentData.ts","../../src/logic/valueAssignmentLogic.ts","../../src/calculators/cviCalculator.ts","../../src/calculators/icviCalculator.ts","../../src/calculators/indexCalculatorFactory.ts","../../src/utils/indexCalculations.ts","../../src/components/parameters/ParameterAssignmentHeader.tsx","../../src/pages/ParameterAssignmentPage.tsx"],"sourcesContent":["// src/components/parameters/MapInteractionPanel.tsx\nimport React from 'react';\nimport L from 'leaflet';\nimport type { FeatureCollection, Polygon as GeoJSONPolygon } from 'geojson';\nimport type { ShorelineSegment, Parameter, SelectionPolygon } from '../../types';\nimport Map from '../maps/Map';\n\ninterface MapInteractionPanelProps {\n  segments: ShorelineSegment[];\n  parameters: Parameter[];\n  selectedSegmentIds: string[];\n  selectedParameterId: string | null;\n  selectionPolygons: SelectionPolygon[];\n  onSegmentSelect: (segmentId: string) => void;\n  onSelectionDelete: (polygonId: string) => void;\n  onAreaSelect: (geometry: GeoJSONPolygon) => void;\n  initialBounds?: L.LatLngBoundsExpression | null;\n  geoJSON?: FeatureCollection | null;\n  onSelectAll: () => void;\n  onClearSelection: () => void;\n  mapContainerRef?: React.RefObject<HTMLDivElement>;\n  isReadOnly?: boolean; // Added isReadOnly prop\n}\n\nexport const MapInteractionPanel: React.FC<Omit<MapInteractionPanelProps, 'onSelectionCreate'>> = ({\n  segments,\n  parameters,\n  selectedSegmentIds,\n  selectedParameterId,\n  selectionPolygons,\n  onSegmentSelect,\n  onSelectionDelete,\n  onAreaSelect,\n  initialBounds,\n  geoJSON,\n  onSelectAll,\n  onClearSelection,\n  mapContainerRef,\n  isReadOnly = false, // Default to false if not provided\n}) => {\n  return (\n    <div className=\"bg-white p-4 rounded-lg shadow h-full flex flex-col\">\n      {/* Map Controls - Conditionally render if not read-only */}\n      {!isReadOnly && (\n        <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center mb-4 flex-shrink-0 gap-2\">\n          <div className=\"flex items-center gap-2 flex-shrink-0\">\n            <button\n              onClick={onSelectAll}\n              className=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 whitespace-nowrap\"\n              title=\"Select all visible segments\"\n              disabled={segments.length === 0}\n            >\n              Select All\n            </button>\n            <button\n              onClick={onClearSelection}\n              className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 whitespace-nowrap\"\n              title=\"Deselect all segments\"\n              disabled={selectedSegmentIds.length === 0}\n            >\n              Clear Selection\n            </button>\n          </div>\n          <div className=\"text-sm text-gray-600 hidden sm:block\">\n            Use drawing tools (polygon/rectangle) on map to select segments by area.\n          </div>\n        </div>\n      )}\n\n      {/* Map Container */}\n      <div className=\"flex-grow border rounded overflow-hidden\" ref={mapContainerRef}>\n        {segments.length > 0 && geoJSON ? (\n          <Map\n            segments={segments}\n            parameters={parameters}\n            geoJSON={geoJSON}\n            selectedSegments={selectedSegmentIds}\n            selectedParameter={selectedParameterId}\n            selectionPolygons={selectionPolygons}\n            // Pass through onSegmentSelect only if not read-only, otherwise pass a no-op\n            onSegmentSelect={!isReadOnly ? onSegmentSelect : () => {}}\n            onSelectionDelete={!isReadOnly ? onSelectionDelete : () => {}}\n            onAreaSelect={!isReadOnly ? onAreaSelect : () => {}}\n            // isEditing controls Leaflet.Draw initialization in the Map component\n            isEditing={!isReadOnly}\n            initialBounds={initialBounds}\n          />\n        ) : (\n          <div className=\"h-full flex items-center justify-center bg-gray-50 text-gray-500\">\n            <p className=\"text-gray-500\">\n              {segments.length === 0 ? \"No shoreline segments loaded.\" : \"Loading shoreline data...\"}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","// src/components/parameters/ParameterValuePanel.tsx\nimport { useMemo } from 'react';\nimport type { Parameter } from '../../types';\n\ninterface ParameterOption {\n  label: string;\n  value: string;\n  vulnerability: number;\n}\n\ninterface ParameterValuePanelProps {\n  parameters: Parameter[];\n  activeParameter: Parameter | null;\n  onParameterSelect: (parameterId: string) => void;\n  selectedValue: string | null;\n  selectedVulnerability: number;\n  onValueSelect: (value: string | null, vulnerability?: number) => void;\n  onApplyValue: () => Promise<void>;\n  selectedSegmentIds: string[];\n}\n\nexport const ParameterValuePanel: React.FC<ParameterValuePanelProps> = ({\n  parameters,\n  activeParameter,\n  onParameterSelect,\n  selectedValue,\n  selectedVulnerability,\n  onValueSelect,\n  onApplyValue,\n  selectedSegmentIds,\n}) => {\n\n  const parameterOptions = useMemo<ParameterOption[]>(() => {\n    if (!activeParameter) return [];\n\n    if (activeParameter.type === 'categorical' && activeParameter.options) {\n      const options = activeParameter.options.map(option => ({\n        label: option.label,\n        value: typeof option.value === 'string' ? option.value : String(option.value),\n        vulnerability: option.vulnerability\n      }));\n\n      const valuesSeen: Record<string, boolean> = {};\n      options.forEach(option => {\n          if (valuesSeen[option.value]) console.warn(`Duplicate option value detected for ${activeParameter.name}: ${option.value}`);\n          valuesSeen[option.value] = true;\n      });\n      return options;\n    }\n    else if (activeParameter.vulnerabilityRanges) {\n      // Use index-specific ranking table if available, otherwise fall back to generic ranges\n      const rangesToUse = activeParameter.indexSpecificRankingTable || activeParameter.vulnerabilityRanges;\n      const optionsFromRanges: ParameterOption[] = [];\n\n      rangesToUse.forEach((range: any) => {\n        // For index-specific ranking tables, use the exact criteria\n        let rangeLabel = `${range.label}`;\n        if (range.criteria) {\n          rangeLabel += ` - ${range.criteria}`;\n        } else if (range.min !== null && range.max !== null) {\n          rangeLabel += ` (${range.min} - ${range.max}${activeParameter.unit || ''})`;\n        } else if (range.min !== null) {\n          rangeLabel += ` (>= ${range.min}${activeParameter.unit || ''})`;\n        } else if (range.max !== null) {\n          rangeLabel += ` (< ${range.max}${activeParameter.unit || ''})`;\n        }\n\n        optionsFromRanges.push({\n          label: rangeLabel,\n          value: range.value.toString(),\n          vulnerability: range.value\n        });\n      });\n\n      // Sort by vulnerability level\n      optionsFromRanges.sort((a, b) => a.vulnerability - b.vulnerability);\n\n      return optionsFromRanges;\n    } else if (activeParameter.type === 'numerical') {\n      console.warn(`Numerical parameter \"${activeParameter.name}\" has no vulnerabilityRanges defined. Using generic 1-5 scale.`);\n      const vulnLabels = ['Very Low', 'Low', 'Moderate', 'High', 'Very High'];\n      return [1, 2, 3, 4, 5].map(i => ({\n        label: `${vulnLabels[i - 1]} (Score: ${i})`,\n        value: i.toString(),\n        vulnerability: i\n      }));\n    }\n\n    return [];\n  }, [activeParameter]);\n\n  const handleValueChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedOptionValue = event.target.value;\n\n    const selectedOption = parameterOptions.find(opt => opt.value === selectedOptionValue);\n\n    if (selectedOption) {\n      onValueSelect(selectedOption.value, selectedOption.vulnerability);\n    } else {\n      onValueSelect(null, 1);\n    }\n  };\n\n  const applyButtonText = useMemo(() => {\n    if (!activeParameter) return 'Select a Parameter First';\n    if (selectedValue === null) return 'Select a Value First';\n    if (selectedSegmentIds.length === 0) return 'Select Segments First';\n    return `Apply ${activeParameter.name}: ${selectedValue} to ${selectedSegmentIds.length} Segments`;\n  }, [activeParameter, selectedValue, selectedSegmentIds]);\n\n  return (\n    <div>\n      <h3 className=\"text-lg font-medium mb-4\">Parameter Values</h3>\n      <p className=\"mb-4 text-sm text-gray-600\">{selectedSegmentIds.length} selected</p>\n\n      {/* Parameter Selection Dropdown */}\n      <div className=\"mb-4\">\n        <label htmlFor=\"parameter-select\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n          Select Parameter\n        </label>\n        <select\n          id=\"parameter-select\"\n          value={activeParameter?.id || ''}\n          onChange={(e) => onParameterSelect(e.target.value)}\n          className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm\"\n        >\n          {parameters.length > 0 ? (\n            parameters.map(param => (\n              <option key={param.id} value={param.id}>{param.name}</option>\n            ))\n          ) : (\n            <option value=\"\">No parameters available</option>\n          )}\n        </select>\n      </div>\n\n      {/* Value Selection Dropdown */}\n      <div className=\"mb-4\">\n        <label htmlFor=\"value-select\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n          Select Value {activeParameter && `for ${activeParameter.name}`}\n        </label>\n        <select\n          id=\"value-select\"\n          value={selectedValue || ''}\n          onChange={handleValueChange}\n          className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm\"\n          disabled={!activeParameter || selectedSegmentIds.length === 0}\n        >\n          <option value=\"\">Select a value...</option>\n          {parameterOptions.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.label} (Vulnerability: {option.vulnerability})\n            </option>\n          ))}\n           {parameterOptions.length === 0 && activeParameter && (\n             <option value=\"\" disabled>No values available</option>\n           )}\n        </select>\n        {(!activeParameter || selectedSegmentIds.length === 0) && selectedValue === null && (\n          <p className=\"mt-1 text-sm text-red-500\">\n            {!activeParameter ? 'Select a parameter first' : 'Select segments on the map first'}\n          </p>\n        )}\n      </div>\n\n      {/* Vulnerability Preview */}\n      <div className=\"mb-6\">\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n          Vulnerability Preview\n        </label>\n        <div className=\"flex items-center\">\n          <span className=\"mr-2 text-gray-600\">Value:</span>\n          <span className=\"font-medium\">{selectedValue || '-'}</span>\n          <span className=\"mx-4 text-gray-600\">Vulnerability:</span>\n          <span\n            className=\"w-6 h-6 rounded-full text-white text-center flex items-center justify-center text-xs font-medium\"\n            style={{\n              backgroundColor: (() => {\n                // For ICVI parameters, use the result classification colors\n                if (selectedVulnerability >= 0 && selectedVulnerability < 1) {\n                  if (selectedVulnerability < 0.2) return '#1a9850'; // Very Low\n                  if (selectedVulnerability < 0.4) return '#91cf60'; // Low\n                  if (selectedVulnerability < 0.6) return '#fee08b'; // Moderate\n                  if (selectedVulnerability < 0.8) return '#fc8d59'; // High\n                  return '#d73027'; // Very High\n                }\n\n                // For traditional 1-5 scale parameters\n                const rank = Math.round(selectedVulnerability);\n                switch (rank) {\n                  case 1: return '#1a9850';\n                  case 2: return '#91cf60';\n                  case 3: return '#fee08b';\n                  case 4: return '#fc8d59';\n                  case 5: return '#d73027';\n                  default: return '#808080';\n                }\n              })()\n            }}\n          >\n            {selectedVulnerability || '?'}\n          </span>\n        </div>\n      </div>\n\n      {/* Apply Value Button */}\n      <button\n        onClick={onApplyValue}\n        disabled={!activeParameter || selectedValue === null || selectedSegmentIds.length === 0}\n        className=\"w-full px-4 py-2 text-sm font-medium text-white bg-green-600 rounded-md disabled:bg-gray-300 disabled:cursor-not-allowed\"\n      >\n        {applyButtonText}\n      </button>\n\n      {/* Selected Segments Info */}\n      <div className=\"mt-4 text-center\">\n        <p className=\"text-sm font-medium text-gray-600\">\n          {selectedSegmentIds.length > 0\n            ? `${selectedSegmentIds.length} segments selected`\n            : 'No segments selected. Click on the map or use Select All'}\n        </p>\n      </div>\n    </div>\n  );\n};\n","// src/components/parameters/CviFormulaPanel.tsx\nimport { useMemo } from 'react';\nimport type { Formula, ShorelineSegment } from '../../types';\nimport { getCviCategory } from '../../utils/vulnerabilityMapping';\n\ninterface CviStatistics {\n  min: string;\n  max: string;\n  avg: string;\n  count: number;\n  categories: {\n    veryLow: number;\n    low: number;\n    moderate: number;\n    high: number;\n    veryHigh: number;\n  };\n}\n\ninterface CviFormulaPanelProps {\n  selectedFormula: Formula | null;\n  onCalculateCvi: () => Promise<void>;\n  completionPercentage: number;\n  calculatingCvi: boolean;\n  cviScores: Record<string, number>;\n  segments: ShorelineSegment[];\n}\n\nexport const CviFormulaPanel: React.FC<CviFormulaPanelProps> = ({\n  selectedFormula,\n  onCalculateCvi,\n  completionPercentage,\n  calculatingCvi,\n  cviScores,\n  segments\n}) => {\n\n  const cviStatistics = useMemo<CviStatistics | null>(() => {\n    const scores = Object.values(cviScores);\n    if (scores.length === 0) return null;\n\n    const min = Math.min(...scores);\n    const max = Math.max(...scores);\n    const sum = scores.reduce((a, b) => a + b, 0);\n    const avg = sum / scores.length;\n\n    let veryLowCount = 0;\n    let lowCount = 0;\n    let moderateCount = 0;\n    let highCount = 0;\n    let veryHighCount = 0;\n    scores.forEach(score => {\n        const category = getCviCategory(score, selectedFormula?.type);\n        if (category === 'Very Low') veryLowCount++;\n        else if (category === 'Low') lowCount++;\n        else if (category === 'Moderate') moderateCount++;\n        else if (category === 'High') highCount++;\n        else if (category === 'Very High') veryHighCount++;\n    });\n\n    return {\n      min: min.toFixed(2),\n      max: max.toFixed(2),\n      avg: avg.toFixed(2),\n      count: scores.length,\n      categories: {\n        veryLow: veryLowCount,\n        low: lowCount,\n        moderate: moderateCount,\n        high: highCount,\n        veryHigh: veryHighCount\n      }\n    };\n  }, [cviScores, selectedFormula]);\n\n  const canCalculate = useMemo(() => {\n    return completionPercentage >= 100 && selectedFormula !== null && !calculatingCvi;\n  }, [completionPercentage, selectedFormula, calculatingCvi]);\n\n\n\n  return (\n    <div>\n      <h3 className=\"text-lg font-medium mb-4\">CVI Calculation</h3>\n\n      {/* Formula Information Section */}\n      <div className=\"mb-4\">\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n          Index Formula\n        </label>\n\n        {selectedFormula ? (\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <svg className=\"w-4 h-4 text-blue-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n              </svg>\n              <span className=\"font-medium text-blue-900\">{selectedFormula.name}</span>\n              <span className=\"text-xs bg-blue-100 text-blue-800 px-2 py-0.5 rounded-full\">Auto-selected</span>\n            </div>\n            <p className=\"text-xs text-blue-700 mb-2\">{selectedFormula.description}</p>\n            <p className=\"text-xs text-blue-600\">\n              ✓ Formula automatically determined by your selected coastal vulnerability index\n            </p>\n            {selectedFormula.name === 'CVI' && selectedFormula.type === 'geometric-mean' && (\n              <div className=\"mt-2 p-2 bg-amber-50 border border-amber-200 rounded\">\n                <p className=\"text-xs text-amber-800\">\n                  <strong>Note:</strong> Geometric mean formula preferred over traditional CVI formula to avoid distribution distortions and enable proper ranking of results.\n                </p>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-3\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <svg className=\"w-4 h-4 text-gray-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clipRule=\"evenodd\" />\n              </svg>\n              <span className=\"font-medium text-gray-700\">No Formula Selected</span>\n            </div>\n            <p className=\"text-xs text-gray-600\">\n              Please select a coastal vulnerability index in the parameter selection step to automatically set the appropriate formula.\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Calculate Button Section */}\n       <div className=\"mb-4\">\n        <button\n            onClick={onCalculateCvi}\n            disabled={!canCalculate}\n            className=\"w-full inline-flex justify-center items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n           {/* Icon: Shows spinner when calculating, calculator otherwise */}\n           <svg xmlns=\"http://www.w3.org/2000/svg\" className={`h-5 w-5 mr-2 ${calculatingCvi ? 'animate-spin' : ''}`} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\n                {calculatingCvi ? (\n                    // Spinner path (simplified)\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99\" />\n                ) : (\n                     // Calculator icon path\n                     <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9 7h6m0 10v-6m-6 2h6m-6-4h6M9 3a1 1 0 011-1h4a1 1 0 011 1v1H9V3zM15 21a2 2 0 01-2 2H11a2 2 0 01-2-2m4-18a2 2 0 00-2-2H11a2 2 0 00-2 2m4 18V7m-4 14V7\" />\n                )}\n            </svg>\n            {/* Button Text: Dynamic based on calculation state and selected formula */}\n            {calculatingCvi ? 'Calculating...' : `Calculate CVI ${selectedFormula ? `(${selectedFormula.name})` : ''}`}\n        </button>\n        {/* Feedback Messages below button */}\n         {!selectedFormula && completionPercentage >= 100 && !calculatingCvi && (\n             <p className=\"mt-1 text-sm text-red-600\">Please select a formula before calculating.</p>\n         )}\n         {completionPercentage < 100 && !calculatingCvi && (\n             <p className=\"mt-1 text-sm text-amber-600\">\n                 Complete all parameter values ({completionPercentage.toFixed(0)}%) before calculating CVI.\n             </p>\n         )}\n      </div>\n\n\n      {/* CVI Info & Stats Section */}\n      <div className=\"space-y-2\">\n         <h4 className=\"text-sm font-medium text-gray-700\">Calculation Status</h4>\n         {/* Display selected formula name */}\n         <div className=\"flex items-center text-sm\">\n           <span className=\"mr-2 text-gray-600 w-28 flex-shrink-0\">Selected Formula:</span>\n           <span className=\"font-medium\">{selectedFormula?.name || 'None Selected'}</span>\n         </div>\n         {/* Display number and percentage of segments with calculated CVI */}\n         <div className=\"flex items-center text-sm\">\n           <span className=\"mr-2 text-gray-600 w-28 flex-shrink-0\">Segments w/ CVI:</span>\n           <span className=\"font-medium\">{Object.keys(cviScores).length}</span>\n           {segments.length > 0 && (\n             <span className=\"ml-2 text-xs text-gray-500\">\n               ({Math.round((Object.keys(cviScores).length / segments.length) * 100)}% of {segments.length})\n             </span>\n           )}\n         </div>\n      </div>\n\n\n      {/* Display CVI Score Categories Legend and Statistics (only if scores exist) */}\n      {Object.keys(cviScores).length > 0 && cviStatistics && (\n        <div className=\"mt-4 pt-4 border-t border-gray-200\">\n          <h4 className=\"text-sm font-medium text-gray-700 mb-2\">CVI Score Categories & Stats</h4>\n          {/* Legend for vulnerability categories */}\n          <div className=\"flex flex-wrap space-x-4 mb-3\"> {/* Added flex-wrap for smaller screens */}\n            {/* Very Low Vulnerability */}\n            <div className=\"flex items-center text-xs whitespace-nowrap\"> {/* Added whitespace-nowrap */}\n              <span className=\"w-3 h-3 bg-green-600 rounded-full mr-1.5 border border-green-700 flex-shrink-0\"></span>\n              Very Low {`(1)`} [{cviStatistics.categories.veryLow}]\n            </div>\n            {/* Low Vulnerability */}\n            <div className=\"flex items-center text-xs whitespace-nowrap\"> {/* Added whitespace-nowrap */}\n              <span className=\"w-3 h-3 bg-lime-500 rounded-full mr-1.5 border border-lime-600 flex-shrink-0\"></span>\n              Low {`(2)`} [{cviStatistics.categories.low}]\n            </div>\n            {/* Moderate Vulnerability */}\n            <div className=\"flex items-center text-xs whitespace-nowrap\"> {/* Added whitespace-nowrap */}\n              <span className=\"w-3 h-3 bg-yellow-400 rounded-full mr-1.5 border border-yellow-500 flex-shrink-0\"></span>\n              Moderate {`(3)`} [{cviStatistics.categories.moderate}]\n            </div>\n            {/* High Vulnerability */}\n            <div className=\"flex items-center text-xs whitespace-nowrap\"> {/* Added whitespace-nowrap */}\n              <span className=\"w-3 h-3 bg-orange-500 rounded-full mr-1.5 border border-orange-600 flex-shrink-0\"></span>\n              High {`(4)`} [{cviStatistics.categories.high}]\n            </div>\n            {/* Very High Vulnerability */}\n            <div className=\"flex items-center text-xs whitespace-nowrap\"> {/* Added whitespace-nowrap */}\n              <span className=\"w-3 h-3 bg-red-600 rounded-full mr-1.5 border border-red-700 flex-shrink-0\"></span>\n              Very High {`(5)`} [{cviStatistics.categories.veryHigh}]\n            </div>\n          </div>\n\n          {/* Basic Statistics Display */}\n          <div className=\"text-xs text-gray-600 grid grid-cols-3 gap-x-2 gap-y-1\">\n            <div>Min: <span className=\"font-medium text-gray-800\">{cviStatistics.min}</span></div>\n            <div>Max: <span className=\"font-medium text-gray-800\">{cviStatistics.max}</span></div>\n            <div>Avg: <span className=\"font-medium text-gray-800\">{cviStatistics.avg}</span></div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","// src/components/parameters/SegmentTablePanel.tsx\nimport React, { useState, useMemo } from 'react';\nimport type { ShorelineSegment, Parameter, Formula } from '../../types';\nimport { getCviCategory, getCviRank } from '../../utils/vulnerabilityMapping'; // Assuming this utility exists\n\ninterface SegmentTablePanelProps {\n  segments: ShorelineSegment[];\n  parameters: Parameter[];\n  selectedSegmentIds: string[];\n  onSegmentSelect: (segmentId: string) => void;\n  cviScores: Record<string, number>;\n  selectedFormula: Formula | null;\n  cviStatistics: {\n    min: string;\n    max: string;\n    avg: string;\n    count: number;\n    categories: {\n      veryLow: number;\n      low: number;\n      moderate: number;\n      high: number;\n      veryHigh: number;\n    };\n  } | null;\n}\n\nconst SEGMENTS_PER_PAGE = 10;\n\nexport const SegmentTablePanel: React.FC<SegmentTablePanelProps> = ({\n  segments,\n  parameters: enabledParameters,\n  selectedSegmentIds,\n  onSegmentSelect,\n  cviScores,\n  selectedFormula,\n  cviStatistics\n}) => {\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const sortedSegments = useMemo(() => {\n    const segmentsCopy = [...segments];\n    const compareSegmentIds = (idA: string, idB: string) => {\n      const numA = parseInt(idA.split('-')[1] || '0', 10);\n      const numB = parseInt(idB.split('-')[1] || '0', 10);\n      return numA - numB;\n    };\n\n    segmentsCopy.sort((a, b) => {\n      const isSelectedA = selectedSegmentIds.includes(a.id);\n      const isSelectedB = selectedSegmentIds.includes(b.id);\n      if (isSelectedA !== isSelectedB) {\n        return isSelectedA ? -1 : 1;\n      }\n      return compareSegmentIds(a.id, b.id);\n    });\n    return segmentsCopy;\n  }, [segments, selectedSegmentIds]);\n\n  const paginatedSegments = useMemo(() => {\n    const startIndex = (currentPage - 1) * SEGMENTS_PER_PAGE;\n    return sortedSegments.slice(startIndex, startIndex + SEGMENTS_PER_PAGE);\n  }, [sortedSegments, currentPage]);\n\n  const totalPages = Math.ceil(sortedSegments.length / SEGMENTS_PER_PAGE);\n\n  const handlePageChange = (page: number) => {\n    if (page >= 1 && page <= totalPages) {\n      setCurrentPage(page);\n    }\n  };\n\n  const getDisplayId = (segmentId: string): string => {\n    return segmentId.includes('segment-') ? segmentId.split('-')[1] : segmentId;\n  }\n\n  const getVulnerabilityColor = (vulnerability: number | null | undefined): string => {\n    if (vulnerability === null || vulnerability === undefined) return '#808080';\n\n    // For ICVI parameters (0-1 scale), use result classification colors\n    if (vulnerability >= 0 && vulnerability < 1) {\n      if (vulnerability < 0.2) return '#1a9850'; // Very Low\n      if (vulnerability < 0.4) return '#91cf60'; // Low\n      if (vulnerability < 0.6) return '#fee08b'; // Moderate\n      if (vulnerability < 0.8) return '#fc8d59'; // High\n      return '#d73027'; // Very High\n    }\n\n    // For traditional 1-5 scale parameters\n    const rank = Math.round(vulnerability);\n    switch (rank) {\n      case 1: return '#1a9850';\n      case 2: return '#91cf60';\n      case 3: return '#fee08b';\n      case 4: return '#fc8d59';\n      case 5: return '#d73027';\n      default: return '#808080';\n    }\n  };\n\n   const getCviColor = (score: number | null | undefined, formula?: string): string => {\n     if (score === null || score === undefined || isNaN(score)) return '#808080';\n     const rank = getCviRank(score, formula);\n     if (rank <= 1) return '#1a9850';\n     if (rank === 2) return '#91cf60';\n     if (rank === 3) return '#fee08b';\n     if (rank === 4) return '#fc8d59';\n     if (rank >= 5) return '#d73027';\n     return '#808080';\n   };\n\n\n  return (\n    <div className=\"flex flex-col\"> {/* Natural flow, no height constraints */}\n      <h3 className=\"text-lg font-medium mb-4\">Segment Values</h3>\n\n      {/* CVI Statistics Display - Make it less tall */}\n      {selectedFormula && cviStatistics && Object.keys(cviScores).length > 0 && (\n        <div className=\"mb-4 p-3 bg-blue-50 border border-blue-200 rounded-md\">\n          <div className=\"flex items-center mb-2\">\n            <span className=\"font-medium text-blue-800 mr-2\">CVI Calculation:</span>\n            <span className=\"text-blue-700\">{selectedFormula.name}</span>\n          </div>\n          <p className=\"text-sm text-blue-600\">{selectedFormula.description}</p>\n          <div className=\"mt-2 grid grid-cols-3 gap-x-4 gap-y-1 text-sm\"> {/* Reduced gap and text size */}\n            <div>\n              <span className=\"text-blue-500\">Segments:</span> <span className=\"font-medium text-blue-800\">{cviStatistics.count} of {segments.length}</span>\n            </div>\n            <div>\n              <span className=\"text-blue-500\">Range:</span> <span className=\"font-medium text-blue-800\">{cviStatistics.min} - {cviStatistics.max}</span>\n            </div>\n            <div>\n              <span className=\"text-blue-500\">Average:</span> <span className=\"font-medium text-blue-800\">{cviStatistics.avg}</span>\n            </div>\n             <div className=\"col-span-3 pt-1 border-t border-blue-100 mt-1 text-xs\"> {/* Consolidated category counts */}\n              <span className=\"text-blue-500\">Counts:</span> Very Low: <span className=\"font-medium text-blue-800\">{cviStatistics.categories.veryLow}</span>, Low: <span className=\"font-medium text-blue-800\">{cviStatistics.categories.low}</span>, Moderate: <span className=\"font-medium text-blue-800\">{cviStatistics.categories.moderate}</span>, High: <span className=\"font-medium text-blue-800\">{cviStatistics.categories.high}</span>, Very High: <span className=\"font-medium text-blue-800\">{cviStatistics.categories.veryHigh}</span>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Segment Table */}\n      <div className=\"overflow-x-auto\"> {/* Allow horizontal scroll for better column visibility */}\n        <table className=\"w-full table-auto divide-y divide-gray-200 min-w-max\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              <th scope=\"col\" className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider min-w-[60px]\">\n                ID\n              </th>\n              <th scope=\"col\" className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider min-w-[80px]\">\n                Length (m)\n              </th>\n              {/* Parameter Columns */}\n              {enabledParameters.map(param => (\n                <th key={param.id} scope=\"col\" className=\"px-2 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider min-w-[100px]\" title={param.name}>\n                  <div className=\"flex flex-col items-center space-y-1\">\n                    <span className=\"text-center leading-tight break-words max-w-[90px]\">\n                      {param.name}\n                    </span>\n                  </div>\n                </th>\n              ))}\n              {/* CVI Column */}\n              <th scope=\"col\" className=\"px-3 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider min-w-[80px]\">\n                <div className=\"flex flex-col items-center space-y-1\">\n                  <span>CVI</span>\n                  {selectedFormula && (\n                    <span className=\"text-blue-500 text-xs normal-case\" title={selectedFormula.name}>\n                      ({selectedFormula.name.length > 15 ? selectedFormula.name.substring(0, 12) + '...' : selectedFormula.name})\n                    </span>\n                  )}\n                </div>\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {paginatedSegments.map((segment, index) => {\n              const displayId = getDisplayId(segment.id);\n              const isSelected = selectedSegmentIds.includes(segment.id);\n              return (\n                <tr\n                  key={segment.id}\n                  className={`${isSelected ? 'bg-blue-50 font-medium' : (index % 2 === 0 ? 'bg-white' : 'bg-gray-50')} hover:bg-blue-100 transition-colors duration-150`}\n                  onClick={() => onSegmentSelect(segment.id)}\n                  style={{ cursor: 'pointer' }}\n                >\n                  {/* ID and Checkbox Cell */}\n                  <td className=\"px-3 py-2 whitespace-nowrap text-xs text-gray-900\">\n                    <div className=\"flex items-center\">\n                      <input\n                        type=\"checkbox\"\n                        checked={isSelected}\n                        onChange={(e) => {\n                          e.stopPropagation(); // Prevent row click handler\n                          onSegmentSelect(segment.id);\n                        }}\n                        className=\"mr-2 h-3 w-3 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                        aria-label={`Select segment ${displayId}`}\n                      />\n                      <span className=\"text-xs\">{displayId}</span>\n                    </div>\n                  </td>\n                  {/* Length Cell */}\n                  <td className=\"px-3 py-2 whitespace-nowrap text-xs text-gray-900\">\n                    {typeof segment.properties?.length === 'number' ? segment.properties.length.toFixed(0) : 'N/A'}\n                  </td>\n                  {/* Parameter Vulnerability Cells */}\n                  {enabledParameters.map(param => {\n                    const paramValue = segment.parameters?.[param.id];\n                    const vulnerability = paramValue?.vulnerability ?? null;\n                    return (\n                      <td key={param.id} className=\"px-2 py-2 whitespace-nowrap text-xs text-center\">\n                        {vulnerability !== null ? (\n                          <div className=\"flex justify-center\" title={`Value: ${paramValue?.value ?? 'N/A'}, Vulnerability: ${vulnerability}`}>\n                             <span\n                               title={`Vulnerability: ${vulnerability}`}\n                               className=\"w-5 h-5 rounded-full flex items-center justify-center text-white text-xs font-medium\"\n                               style={{ backgroundColor: getVulnerabilityColor(vulnerability) }}\n                             >\n                              {vulnerability}\n                            </span>\n                          </div>\n                        ) : '-'}\n                      </td>\n                    );\n                  })}\n                  {/* CVI Score Cell */}\n                  <td className=\"px-3 py-2 whitespace-nowrap text-xs text-gray-900 text-center\">\n                    {cviScores[segment.id] !== undefined ? (\n                       <span\n                         title={`CVI Score: ${cviScores[segment.id].toFixed(2)} (${getCviCategory(cviScores[segment.id], segment.properties.vulnerabilityFormula)})`}\n                         className=\"w-6 h-6 rounded-full text-white flex items-center justify-center text-xs font-medium\"\n                         style={{ backgroundColor: getCviColor(cviScores[segment.id], segment.properties.vulnerabilityFormula) }}\n                       >\n                         {segment.properties.vulnerabilityFormula?.includes('icvi')\n                           ? cviScores[segment.id].toFixed(2)\n                           : getCviRank(cviScores[segment.id], segment.properties.vulnerabilityFormula)\n                         }\n                       </span>\n                    ) : '-'}\n                  </td>\n                </tr>\n              );\n            })}\n             {paginatedSegments.length === 0 && (\n                 <tr>\n                    <td colSpan={enabledParameters.length + 3} className=\"px-2 py-4 text-center text-xs text-gray-500\">\n                        No segments to display for the current page.\n                    </td>\n                 </tr>\n             )}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Pagination Controls */}\n      {totalPages > 1 && (\n        <div className=\"mt-4 flex items-center justify-between border-t pt-3\"> {/* Natural flow pagination */}\n          <div className=\"text-gray-500 text-sm\">\n            Showing {((currentPage - 1) * SEGMENTS_PER_PAGE) + 1} to {Math.min(currentPage * SEGMENTS_PER_PAGE, sortedSegments.length)} of {sortedSegments.length} segments\n          </div>\n          <div className=\"flex space-x-1 sm:space-x-2\">\n            <button\n              onClick={() => handlePageChange(currentPage - 1)}\n              disabled={currentPage === 1}\n              className=\"px-3 py-1 border border-gray-300 rounded-md text-xs disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50\" // Smaller text/padding\n              aria-label=\"Previous page\"\n            >\n              Previous\n            </button>\n            {/* Simplified Pagination Numbers */}\n            <span className=\"text-xs p-1 text-gray-700\"> {/* Smaller text */}\n              Page {currentPage} of {totalPages}\n            </span>\n            <button\n              onClick={() => handlePageChange(currentPage + 1)}\n              disabled={currentPage === totalPages}\n              className=\"px-3 py-1 border border-gray-300 rounded-md text-xs disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50\" // Smaller text/padding\n              aria-label=\"Next page\"\n            >\n              Next\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { indexedDBService } from '../services/indexedDBService';\nimport type { Parameter, ShorelineSegment, ShorelineSegmentProperties, Formula, ParameterValue } from '../types';\nimport type { LineString, MultiLineString } from 'geojson';\nimport * as turf from '@turf/turf';\nimport L from 'leaflet';\nimport { availableFormulas } from '../config/formulas';\n\nexport const useParameterAssignmentData = () => {\n  const navigate = useNavigate();\n  const [segments, setSegments] = useState<ShorelineSegment[]>([]);\n  const [parameters, setParameters] = useState<Parameter[]>([]);\n  const [mapBounds, setMapBounds] = useState<L.LatLngBoundsExpression | null>(null);\n  const [initialCviScores, setInitialCviScores] = useState<Record<string, number>>({});\n  const [initialFormula, setInitialFormula] = useState<Formula | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const loadData = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      console.log(\"Loading data for Parameter Assignment...\");\n      const segmentData = await indexedDBService.getShorelineData('current-segments');\n      if (!segmentData || !segmentData.features || segmentData.features.length === 0) {\n        setError('No segments found. Please complete the segmentation step first.');\n        navigate('/segment-table');\n        setLoading(false);\n        return;\n      }\n      const parameterData = await indexedDBService.getShorelineData('current-parameters');\n      console.log('Raw parameter data from IndexedDB:', parameterData);\n      if (!parameterData || !parameterData.features || parameterData.features.length === 0) {\n        console.log('No parameter data found in IndexedDB');\n        setError('No parameters found. Please complete the parameter selection step first.');\n        navigate('/parameter-selection');\n        setLoading(false);\n        return;\n      }\n\n      // Load the selected index to get the formula\n      const indexData = await indexedDBService.getShorelineData('current-index');\n      console.log('Raw index data from IndexedDB:', indexData);\n      let indexFormula: Formula | null = null;\n\n      if (indexData && indexData.features && indexData.features.length > 0) {\n        const savedIndex = indexData.features[0].properties;\n        console.log('Loaded saved index:', savedIndex);\n\n        // Map index formula to Formula object\n        if (savedIndex && savedIndex.formula) {\n          const formulaType = savedIndex.formula;\n          const formulaName = savedIndex.shortName || savedIndex.name || 'Unknown Index';\n          const formulaDescription = `${formulaName} formula`;\n\n          // Create the formula object based on the index\n          indexFormula = {\n            type: formulaType as Formula['type'],\n            name: formulaName,\n            description: formulaDescription\n          };\n\n          console.log('Set formula from index:', indexFormula);\n        }\n      } else {\n        console.warn('No index data found - formula will need to be selected manually');\n      }\n\n      const loadedSegments = segmentData.features\n        .filter(feature => feature && feature.geometry && (feature.geometry.type === 'LineString' || feature.geometry.type === 'MultiLineString'))\n        .map((feature, index) => {\n          const segmentId = feature.properties?.id || `segment-${index + 1}`;\n          const propertiesBase = feature.properties || {};\n          const parametersFromProperties: Record<string, ParameterValue> =\n            propertiesBase.parameters && typeof propertiesBase.parameters === 'object'\n            ? propertiesBase.parameters\n            : {};\n\n          let length = propertiesBase.length;\n          if (length === undefined || length === null || typeof length !== 'number') {\n              try {\n                length = turf.length(feature.geometry, { units: 'meters' });\n              } catch (e) {\n                 console.warn(`Could not calculate length for segment ${segmentId}:`, e);\n                 length = 0;\n              }\n          }\n\n\n          const finalProperties: ShorelineSegmentProperties = {\n             ...propertiesBase,\n             id: segmentId,\n             length: length,\n             parameters: parametersFromProperties,\n             index: propertiesBase.index ?? index + 1,\n             vulnerabilityIndex: propertiesBase.vulnerabilityIndex,\n             vulnerabilityFormula: propertiesBase.vulnerabilityFormula\n          };\n\n          return {\n            id: segmentId,\n            type: 'Feature' as const,\n            geometry: feature.geometry as LineString | MultiLineString,\n            properties: finalProperties,\n            parameters: parametersFromProperties\n          };\n        });\n\n      if (loadedSegments.length === 0) throw new Error('No valid line segments found after filtering');\n      console.log(`Processed ${loadedSegments.length} segments`);\n      setSegments(loadedSegments as ShorelineSegment[]);\n\n      if (loadedSegments.length > 0) {\n        const featuresForBounds = loadedSegments.map(s => ({ type: 'Feature' as const, geometry: s.geometry, properties: {} }));\n        const fc = turf.featureCollection(featuresForBounds);\n        try {\n          const bbox = turf.bbox(fc);\n          if (bbox && bbox.length === 4 && bbox.every(b => isFinite(b)) && bbox[0] <= bbox[2] && bbox[1] <= bbox[3]) {\n            const bounds: L.LatLngBoundsExpression = [[bbox[1], bbox[0]], [bbox[3], bbox[2]]];\n            setMapBounds(bounds);\n            console.log(\"Calculated map bounds:\", bounds);\n          } else { console.warn(\"Could not calculate valid bounds from segments.\"); }\n        } catch (e) { console.error(\"Error calculating bounds:\", e); }\n      }\n\n      console.log('Parameter features from IndexedDB:', parameterData.features);\n      const mappedParameters = parameterData.features.map(feature => {\n        console.log('Feature properties:', feature.properties);\n        return feature.properties as Parameter;\n      });\n      console.log('Mapped parameters:', mappedParameters);\n\n      const loadedParameters = mappedParameters.filter((p): p is Parameter => {\n        console.log(`Parameter ${p?.name}: enabled=${p?.enabled}, p !== null: ${p !== null}`);\n        return p !== null && p.enabled === true;\n      });\n      console.log(`Processed ${loadedParameters.length} enabled parameters out of ${mappedParameters.length} total`);\n      console.log('Final loaded parameters:', loadedParameters);\n      setParameters(loadedParameters);\n\n      const existingScores = loadedSegments.reduce((acc, seg) => {\n        if (seg.properties.vulnerabilityIndex !== undefined && seg.properties.vulnerabilityIndex !== null) {\n          acc[seg.id] = seg.properties.vulnerabilityIndex;\n        }\n        return acc;\n      }, {} as Record<string, number>);\n\n      if (Object.keys(existingScores).length > 0) {\n          console.log(`Loaded ${Object.keys(existingScores).length} pre-existing CVI scores`);\n          setInitialCviScores(existingScores);\n      }\n\n      // Set the formula from the saved index (prioritize index formula over segment formula)\n      if (indexFormula) {\n          console.log(`Setting formula from saved index: ${indexFormula.name}`);\n          setInitialFormula(indexFormula);\n      } else {\n          // Fallback: try to get formula from segments if no index formula found\n          const firstSegmentWithFormula = loadedSegments.find(seg => seg.properties.vulnerabilityFormula);\n          if (firstSegmentWithFormula?.properties.vulnerabilityFormula) {\n              const formula = availableFormulas.find(f => f.type === firstSegmentWithFormula.properties.vulnerabilityFormula);\n              if (formula) {\n                  console.log(`Setting fallback formula from segment: ${formula.name}`);\n                  setInitialFormula(formula);\n              } else {\n                   console.warn(`Segment ${firstSegmentWithFormula.id} has unknown formula type: ${firstSegmentWithFormula.properties.vulnerabilityFormula}`);\n              }\n          }\n      }\n\n    } catch (err) {\n      console.error('Error loading data:', err);\n      setError(`Failed to load assignment data: ${err instanceof Error ? err.message : String(err)}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [navigate]);\n\n  useEffect(() => {\n    loadData();\n  }, [loadData]);\n\n  return {\n    segments,\n    setSegments,\n    parameters,\n    mapBounds,\n    initialCviScores,\n    initialFormula,\n    loading,\n    error,\n    setError\n  };\n};\n","import { indexedDBService } from '../services/indexedDBService';\nimport type { Parameter, ShorelineSegment, ParameterValue, ShorelineSegmentProperties } from '../types';\n\nexport const applyParameterValueToSegments = async (\n    segments: ShorelineSegment[],\n    selectedSegmentIds: string[],\n    activeParameter: Parameter,\n    valueToApply: string,\n    vulnerabilityToApply: number\n): Promise<ShorelineSegment[]> => {\n    console.log(`Applying value \"${valueToApply}\" (vuln: ${vulnerabilityToApply}) for \"${activeParameter.name}\" to ${selectedSegmentIds.length} segments`);\n\n    let updateOccurred = false;\n    const updatedSegments = segments.map(segment => {\n        if (selectedSegmentIds.includes(segment.id)) {\n            let paramValue: ParameterValue;\n            let segmentNeedsUpdate = false;\n            if (activeParameter.type === 'numerical') {\n                const numValue = parseFloat(valueToApply);\n                if (!isNaN(numValue)) {\n                    paramValue = { type: 'numerical', value: numValue, vulnerability: vulnerabilityToApply };\n                } else {\n                    console.error(`Skipping segment ${segment.id}: Invalid numerical value ${valueToApply}`);\n                    return segment; \n                }\n            } else { \n                paramValue = { type: 'categorical', value: valueToApply, vulnerability: vulnerabilityToApply };\n            }\n\n            const existingValue = segment.parameters?.[activeParameter.id];\n            if (\n                !existingValue ||\n                existingValue.value !== paramValue.value ||\n                existingValue.vulnerability !== paramValue.vulnerability\n            ) {\n                segmentNeedsUpdate = true;\n            }\n\n\n            if (segmentNeedsUpdate) {\n                updateOccurred = true;\n                const updatedDirectParameters = { ...segment.parameters, [activeParameter.id]: paramValue };\n                const currentProperties = segment.properties || { id: segment.id } as ShorelineSegmentProperties;\n                const currentPropertiesParams = currentProperties.parameters && typeof currentProperties.parameters === 'object'\n                                               ? currentProperties.parameters\n                                               : {};\n                const updatedProperties: ShorelineSegmentProperties = {\n                    ...currentProperties,\n                    parameters: { ...currentPropertiesParams, [activeParameter.id]: paramValue }\n                };\n                return { ...segment, parameters: updatedDirectParameters, properties: updatedProperties };\n            }\n        }\n        return segment; \n    });\n    if (updateOccurred) {\n        try {\n             const featuresToStore = updatedSegments.map(seg => ({\n                type: 'Feature' as const,\n                geometry: seg.geometry,\n                properties: seg.properties,\n             }));\n\n            await indexedDBService.storeShorelineData('current-segments', {\n                type: 'FeatureCollection',\n                features: featuresToStore\n            });\n            console.log(\"Stored updated segments after value application\");\n        } catch (error) {\n            console.error('Failed to store updated segments:', error);\n            throw new Error(`Failed to save changes: ${error instanceof Error ? error.message : String(error)}`);\n        }\n    } else {\n        console.log(\"No actual segment values changed, skipping database update.\");\n    }\n    return updatedSegments;\n};","import type { Parameter, ShorelineSegment } from '../types';\n\n/**\n * CVI Calculator - Handles Coastal Vulnerability Index calculations\n * Uses true geometric mean: CVI = ⁿ√(∏Vi)\n */\nexport class CVICalculator {\n  /**\n   * Calculate CVI for a single set of values\n   */\n  static calculate(values: number[]): number {\n    if (values.length === 0) return 0;\n    \n    // True geometric mean: CVI = ⁿ√(∏Vi) = (∏Vi)^(1/n)\n    let product = 1.0;\n    for (let i = 0; i < values.length; i++) {\n      const value = Math.max(1e-9, values[i]); // Prevent log(0) issues\n      product *= value;\n    }\n    \n    // Return nth root of product (true geometric mean)\n    return Math.pow(product, 1 / values.length);\n  }\n\n  /**\n   * Extract CVI parameter values from a segment\n   */\n  static extractValues(segment: ShorelineSegment, parameters: Parameter[]): number[] {\n    const values: number[] = [];\n    \n    parameters.forEach(param => {\n      const paramValue = segment.parameters?.[param.id];\n      if (paramValue) {\n        const vulnerability = Math.max(1, Math.min(5, paramValue.vulnerability));\n        values.push(vulnerability);\n      }\n    });\n    \n    return values;\n  }\n\n  /**\n   * Validate that segment has all required CVI parameters\n   */\n  static hasAllParameters(segment: ShorelineSegment, parameters: Parameter[]): boolean {\n    return parameters.every(param => \n      segment.parameters && segment.parameters[param.id] !== undefined\n    );\n  }\n}","import type { Parameter, ShorelineSegment } from '../types';\n\nexport interface ICVIResult {\n  value: number;\n  formula: string;\n  components: {\n    evi: number;\n    svi: number;\n  };\n}\n\n/**\n * ICVI Calculator - Handles Integrated Coastal Vulnerability Index calculations\n * Supports both arithmetic and geometric mean approaches\n */\nexport class ICVICalculator {\n  /**\n   * Calculate ICVI using arithmetic mean approach\n   * EVI = (a+b+c+d+e+f)/6, SVI = (g+h+i+j+k+l)/6, ICVI = (EVI+SVI)/2\n   */\n  static calculateArithmetic(parameters: Parameter[]): ICVIResult {\n    const { eviValues, sviValues } = this.extractEVISVIValues(parameters);\n    \n    // Calculate EVI: Arithmetic mean of 0.1-0.9 values\n    const eviValue = eviValues.reduce((acc, val) => acc + val, 0) / eviValues.length;\n    \n    // Calculate SVI: Arithmetic mean of 0.1-0.9 values\n    const sviValue = sviValues.reduce((acc, val) => acc + val, 0) / sviValues.length;\n    \n    // ICVI = (EVI + SVI)/2\n    const icviValue = (eviValue + sviValue) / 2;\n    \n    return {\n      value: icviValue,\n      formula: `ICVI = (EVI + SVI)/2 = (${eviValue.toFixed(3)} + ${sviValue.toFixed(3)})/2 = ${icviValue.toFixed(3)}`,\n      components: {\n        evi: eviValue,\n        svi: sviValue\n      }\n    };\n  }\n\n  /**\n   * Calculate ICVI using geometric mean approach\n   * EVI = ⁶√(a×b×c×d×e×f), SVI = ⁶√(g×h×i×j×k×l), ICVI = (EVI+SVI)/2\n   */\n  static calculateGeometric(parameters: Parameter[]): ICVIResult {\n    const { eviValues, sviValues } = this.extractEVISVIValues(parameters);\n    \n    // Calculate EVI: Geometric mean (6th root of product) of 0.1-0.9 values\n    const eviProduct = eviValues.reduce((acc, val) => acc * val, 1);\n    const eviValue = Math.pow(eviProduct, 1 / eviValues.length);\n    \n    // Calculate SVI: Geometric mean (6th root of product) of 0.1-0.9 values\n    const sviProduct = sviValues.reduce((acc, val) => acc * val, 1);\n    const sviValue = Math.pow(sviProduct, 1 / sviValues.length);\n    \n    // ICVI = (EVI + SVI)/2\n    const icviValue = (eviValue + sviValue) / 2;\n    \n    return {\n      value: icviValue,\n      formula: `ICVI = (EVI + SVI)/2 = (${eviValue.toFixed(4)} + ${sviValue.toFixed(4)})/2 = ${icviValue.toFixed(4)}`,\n      components: {\n        evi: eviValue,\n        svi: sviValue\n      }\n    };\n  }\n\n  /**\n   * Extract EVI and SVI parameter values from parameters\n   */\n  private static extractEVISVIValues(parameters: Parameter[]) {\n    // EVI parameters (6 parameters)\n    const eviParams = parameters.filter(p =>\n      ['icvi_geomorphological_features', 'icvi_slope', 'icvi_shoreline_migration', \n       'icvi_ecosystem_type', 'icvi_conservation_measures', 'icvi_species_interest'].includes(p.id)\n    );\n\n    // SVI parameters (6 parameters)\n    const sviParams = parameters.filter(p =>\n      ['icvi_land_use', 'icvi_building_coast_ratio', 'icvi_population_density', \n       'icvi_economic_activity', 'icvi_economic_value', 'icvi_heritage'].includes(p.id)\n    );\n\n    const eviValues = eviParams.map(p => p.vulnerabilityValue || 0.1);\n    const sviValues = sviParams.map(p => p.vulnerabilityValue || 0.1);\n    \n    return { eviValues, sviValues };\n  }\n\n  /**\n   * Extract ICVI parameter values from a segment\n   */\n  static extractValues(segment: ShorelineSegment, parameters: Parameter[]): Parameter[] {\n    return parameters.map(param => {\n      const segmentValue = segment.parameters?.[param.id];\n      return {\n        ...param,\n        vulnerabilityValue: segmentValue?.vulnerability || 0.1\n      };\n    });\n  }\n\n  /**\n   * Validate that segment has all required ICVI parameters\n   */\n  static hasAllParameters(segment: ShorelineSegment, parameters: Parameter[]): boolean {\n    return parameters.every(param => \n      segment.parameters && segment.parameters[param.id] !== undefined\n    );\n  }\n}","import type { Parameter, ShorelineSegment, Formula } from '../types/index';\nimport { CVICalculator } from './cviCalculator';\nimport { ICVICalculator } from './icviCalculator';\n\nexport interface CalculationResult {\n  value: number;\n  formula?: string;\n  components?: Record<string, number>;\n}\n\n/**\n * Factory for creating and managing different index calculators\n * Provides a clean interface for calculating any supported index\n */\nexport class IndexCalculatorFactory {\n  /**\n   * Calculate index value for a segment using the specified formula\n   */\n  static calculate(\n    segment: ShorelineSegment,\n    parameters: Parameter[],\n    formula: Formula\n  ): CalculationResult {\n    switch (formula.type) {\n      case 'cvi-geometric':\n        return this.calculateCVI(segment, parameters);\n        \n      case 'icvi-arithmetic':\n        return this.calculateICVIArithmetic(segment, parameters);\n        \n      case 'icvi-geometric':\n        return this.calculateICVIGeometric(segment, parameters);\n        \n      default:\n        throw new Error(`Unsupported formula type: ${formula.type}`);\n    }\n  }\n\n  /**\n   * Check if segment has all required parameters for the formula\n   */\n  static hasAllParameters(\n    segment: ShorelineSegment,\n    parameters: Parameter[],\n    formula: Formula\n  ): boolean {\n    switch (formula.type) {\n      case 'cvi-geometric':\n        return CVICalculator.hasAllParameters(segment, parameters);\n        \n      case 'icvi-arithmetic':\n      case 'icvi-geometric':\n        return ICVICalculator.hasAllParameters(segment, parameters);\n        \n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Calculate CVI for a segment\n   */\n  private static calculateCVI(segment: ShorelineSegment, parameters: Parameter[]): CalculationResult {\n    const values = CVICalculator.extractValues(segment, parameters);\n    const result = CVICalculator.calculate(values);\n    \n    return {\n      value: result,\n      formula: `CVI = ⁿ√(∏Vi) = ${result.toFixed(3)}`\n    };\n  }\n\n  /**\n   * Calculate ICVI using arithmetic mean\n   */\n  private static calculateICVIArithmetic(segment: ShorelineSegment, parameters: Parameter[]): CalculationResult {\n    const parametersWithValues = ICVICalculator.extractValues(segment, parameters);\n    const result = ICVICalculator.calculateArithmetic(parametersWithValues);\n    \n    return {\n      value: result.value,\n      formula: result.formula,\n      components: {\n        'EVI (50%)': result.components.evi,\n        'SVI (50%)': result.components.svi\n      }\n    };\n  }\n\n  /**\n   * Calculate ICVI using geometric mean\n   */\n  private static calculateICVIGeometric(segment: ShorelineSegment, parameters: Parameter[]): CalculationResult {\n    const parametersWithValues = ICVICalculator.extractValues(segment, parameters);\n    const result = ICVICalculator.calculateGeometric(parametersWithValues);\n    \n    return {\n      value: result.value,\n      formula: result.formula,\n      components: {\n        'EVI (50%)': result.components.evi,\n        'SVI (50%)': result.components.svi\n      }\n    };\n  }\n}","import type { Parameter, ShorelineSegment, Formula } from '../types';\nimport { indexedDBService } from '../services/indexedDBService';\nimport { IndexCalculatorFactory } from '../calculators/indexCalculatorFactory';\n\n/**\n * Calculate and save index values for all segments\n * Simplified, modular approach using the calculator factory\n */\nexport const calculateAndSaveIndex = async (\n  segments: ShorelineSegment[],\n  parameters: Parameter[],\n  formula: Formula,\n  setSegments: React.Dispatch<React.SetStateAction<ShorelineSegment[]>>,\n  setCviScores: React.Dispatch<React.SetStateAction<Record<string, number>>>,\n  setError: (error: string | null) => void\n): Promise<void> => {\n  console.log(\"Calculating index using formula:\", formula.name);\n  setError(null);\n\n  try {\n    const newIndexScores: Record<string, number> = {};\n    const updatedSegments = [...segments];\n    let segmentsUpdated = false;\n\n    // Include all parameters (CVI has no weights, ICVI has weights)\n    const relevantParameters = parameters.filter(p => p.weight === undefined || p.weight > 0);\n    \n    if (relevantParameters.length === 0) {\n      throw new Error(\"No relevant parameters found for calculation\");\n    }\n\n    if (segments.length === 0) {\n      throw new Error(\"No segments found for calculation\");\n    }\n    segments.forEach((segment, index) => {\n      // Check if segment has all required parameters\n      if (!IndexCalculatorFactory.hasAllParameters(segment, relevantParameters, formula)) {\n        return;\n      }\n\n      try {\n        // Calculate index value using the factory\n        const result = IndexCalculatorFactory.calculate(segment, relevantParameters, formula);\n        \n        // Round to 2 decimal places\n        const indexScore = Math.round(result.value * 100) / 100;\n        newIndexScores[segment.id] = indexScore;\n\n        // Update segment if value changed\n        if (updatedSegments[index]?.properties &&\n            (updatedSegments[index].properties.vulnerabilityIndex !== indexScore ||\n             updatedSegments[index].properties.vulnerabilityFormula !== formula.type))\n        {\n          updatedSegments[index].properties.vulnerabilityIndex = indexScore;\n          updatedSegments[index].properties.vulnerabilityFormula = formula.type;\n          segmentsUpdated = true;\n        }\n      } catch (calculationError) {\n        console.error(`Failed to calculate ${formula.name} for segment ${segment.id}:`, calculationError);\n        setError(`Calculation failed for segment ${segment.id}: ${calculationError}`);\n        return;\n      }\n    });\n\n    // Save results\n    const geoJsonToStore = {\n      type: 'FeatureCollection' as const,\n      features: updatedSegments.map(seg => ({\n        type: 'Feature' as const,\n        geometry: seg.geometry,\n        properties: seg.properties\n      }))\n    };\n\n    if (segmentsUpdated) {\n      await indexedDBService.storeShorelineData('current-segments', geoJsonToStore);\n      setSegments(updatedSegments);\n    }\n\n    setCviScores(newIndexScores);\n    console.log(`${formula.name} calculation completed successfully`);\n\n  } catch (error) {\n    console.error(`${formula.name} calculation failed:`, error);\n    setError(`${formula.name} calculation failed: ${error}`);\n  }\n};","// src/components/parameters/ParameterAssignmentHeader.tsx\nimport React from 'react';\n\ninterface ParameterAssignmentHeaderProps {\n  title: string;\n  completionPercentage: number;\n}\n\nexport const ParameterAssignmentHeader: React.FC<ParameterAssignmentHeaderProps> = ({\n  title,\n  completionPercentage,\n}) => {\n  return (\n    <div className=\"flex justify-between items-center\">\n      <h1 className=\"text-2xl font-bold text-gray-800\">{title}</h1>\n      <div className=\"text-right\">\n        <p className=\"text-sm text-gray-600\">Overall Completion:</p>\n        <div className=\"w-32 bg-gray-200 rounded-full h-2.5 mt-1 dark:bg-gray-700\">\n          <div\n            className=\"bg-blue-600 h-2.5 rounded-full\"\n            style={{ width: `${completionPercentage}%` }}\n          ></div>\n        </div>\n        <p className=\"text-xs text-gray-500 mt-0.5\">{completionPercentage}%</p>\n      </div>\n    </div>\n  );\n};","// src/pages/ParameterAssignmentPage.tsx\nimport { useState, useEffect, useMemo, useRef, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport type { Parameter, SelectionPolygon, Formula } from '../types';\nimport type { Polygon as GeoJSONPolygon } from 'geojson';\nimport { MapInteractionPanel } from '../components/parameters/MapInteractionPanel';\nimport { ParameterValuePanel } from '../components/parameters/ParameterValuePanel';\nimport { CviFormulaPanel } from '../components/parameters/CviFormulaPanel';\nimport { SegmentTablePanel } from '../components/parameters/SegmentTablePanel';\nimport * as turf from '@turf/turf';\nimport { useParameterAssignmentData } from '../hooks/useParameterAssignmentData';\nimport { applyParameterValueToSegments } from '../logic/valueAssignmentLogic';\nimport { calculateAndSaveIndex } from '../utils/indexCalculations';\nimport { ParameterAssignmentHeader } from '../components/parameters/ParameterAssignmentHeader';\nimport { ErrorAlert } from '../components/common/ErrorAlert';\nimport { getCviRank } from '../utils/vulnerabilityMapping';\n\n\nexport default function ParameterAssignmentPage() {\n  const navigate = useNavigate();\n  const mapContainerRef = useRef<HTMLDivElement>(null);\n  const {\n    segments,\n    setSegments,\n    parameters,\n    mapBounds,\n    initialCviScores,\n    initialFormula,\n    loading: dataLoading,\n    error: dataError,\n    setError: setDataError\n  } = useParameterAssignmentData();\n\n  const [selectedSegments, setSelectedSegments] = useState<string[]>([]);\n  const [activeParameter, setActiveParameter] = useState<Parameter | null>(null);\n  const [selectionPolygons, setSelectionPolygons] = useState<SelectionPolygon[]>([]);\n  const [currentValueToApply, setCurrentValueToApply] = useState<string | null>(null);\n  const [currentVulnerabilityToApply, setCurrentVulnerabilityToApply] = useState<number>(1);\n  const [selectedFormula, setSelectedFormula] = useState<Formula | null>(null);\n  const [cviScores, setCviScores] = useState<Record<string, number>>({});\n  const [calculatingCvi, setCalculatingCvi] = useState<boolean>(false);\n  const [pageError, setPageError] = useState<string | null>(null);\n  const [activeTab, setActiveTab] = useState<'parameters' | 'cvi'>('parameters');\n\n  useEffect(() => {\n    if (!dataLoading && parameters.length > 0 && !activeParameter) {\n      setActiveParameter(parameters[0]);\n    }\n    if (!dataLoading && initialFormula && !selectedFormula) {\n      setSelectedFormula(initialFormula);\n    }\n    if (!dataLoading && Object.keys(initialCviScores).length > 0 && Object.keys(cviScores).length === 0) {\n      setCviScores(initialCviScores);\n    }\n  }, [dataLoading, parameters, initialFormula, initialCviScores, activeParameter, selectedFormula, cviScores]);\n\n  const completionPercentage = useMemo(() => {\n    if (segments.length === 0 || parameters.length === 0) return 0;\n    const totalPossibleValues = segments.length * parameters.length;\n    let filledValues = 0;\n    segments.forEach(segment => {\n      parameters.forEach(param => {\n        if (segment.parameters && segment.parameters[param.id] !== undefined) filledValues++;\n      });\n    });\n    return totalPossibleValues === 0 ? 0 : Math.round((filledValues / totalPossibleValues) * 100);\n  }, [segments, parameters]);\n\n  const geoJSONForMap = useMemo(() => {\n    if (!segments || segments.length === 0) return null;\n    return {\n      type: 'FeatureCollection' as const,\n      features: segments.map(segment => ({\n        type: 'Feature' as const,\n        geometry: segment.geometry,\n        properties: {\n            ...segment.properties,\n            id: segment.id,\n            isSelected: selectedSegments.includes(segment.id),\n            vulnerabilityIndex: segment.properties.vulnerabilityIndex,\n            vulnerabilityFormula: segment.properties.vulnerabilityFormula,\n        }\n      }))\n    };\n  }, [segments, selectedSegments]);\n\n  const handleError = (message: string | null) => {\n    setPageError(message);\n    if (message) console.error(\"Error:\", message);\n  };\n\n  const handleSegmentSelect = useCallback((segmentId: string) => {\n    setSelectedSegments(prev => prev.includes(segmentId) ? prev.filter(id => id !== segmentId) : [...prev, segmentId]);\n  }, []);\n\n  const handleSelectAll = useCallback(() => {\n    setSelectedSegments(segments.map(s => s.id));\n  }, [segments]);\n\n  const handleClearSelection = useCallback(() => {\n    setSelectedSegments([]);\n  }, []);\n\n  const handleParameterSelect = useCallback((parameterId: string) => {\n    const parameter = parameters.find(p => p.id === parameterId);\n    if (parameter) {\n      setActiveParameter(parameter);\n      setCurrentValueToApply(null);\n      setCurrentVulnerabilityToApply(1);\n      console.log(\"Parameter selected:\", parameter.name);\n      handleError(null);\n    } else {\n      console.error(\"Parameter not found:\", parameterId);\n      handleError(\"Selected parameter could not be found.\");\n    }\n  }, [parameters]);\n\n  const handleValueSelect = useCallback((value: string | null, vulnerability?: number) => {\n    setCurrentValueToApply(value);\n    setCurrentVulnerabilityToApply(vulnerability ?? 1);\n    console.log(`Value staged for application: ${value}, Vulnerability: ${vulnerability ?? 1}`);\n    handleError(null);\n  }, []);\n\n  const handleApplyValue = useCallback(async () => {\n    if (!activeParameter || currentValueToApply === null || selectedSegments.length === 0) {\n      const errorMsg = !activeParameter ? \"Select a parameter first.\"\n                     : currentValueToApply === null ? \"Select a value first.\"\n                     : \"Select at least one segment on the map.\";\n      handleError(`Cannot apply value: ${errorMsg}`);\n      return;\n    }\n    handleError(null);\n\n    try {\n      const updatedSegments = await applyParameterValueToSegments(\n        segments,\n        selectedSegments,\n        activeParameter,\n        currentValueToApply,\n        currentVulnerabilityToApply\n      );\n      setSegments(updatedSegments);\n      console.log(\"Successfully applied value and updated segments state.\");\n    } catch (err) {\n      console.error('Error applying parameter value:', err);\n      handleError(err instanceof Error ? err.message : 'Failed to apply value.');\n    }\n  }, [activeParameter, currentValueToApply, currentVulnerabilityToApply, segments, selectedSegments, setSegments]);\n\n\n\n  const handleCalculateCvi = useCallback(async () => {\n    if (!selectedFormula) { \n      handleError('Please select a formula before calculating.'); \n      return; \n    }\n    \n    // More robust validation\n    const relevantParameters = parameters.filter(p => p.weight === undefined || p.weight > 0);\n    \n    const allValuesAssigned = segments.every(segment =>\n        relevantParameters.every(param => segment.parameters && segment.parameters[param.id] !== undefined)\n    );\n    \n    if (!allValuesAssigned) {\n       handleError(`Cannot calculate: Assign values for all parameters to all segments first. (${completionPercentage}% complete)`);\n       return;\n     }\n\n    handleError(null);\n    setCalculatingCvi(true);\n    console.log(`Calculating CVI using: ${selectedFormula.name}`);\n\n    try {\n      await calculateAndSaveIndex(\n        segments,\n        parameters,\n        selectedFormula,\n        setSegments,\n        setCviScores,\n        handleError\n      );\n      console.log(\"CVI calculation process finished successfully via utility.\");\n\n    } catch (err) {\n\n      console.error(\"Error during CVI calculation process:\", err);\n      if (!pageError) {\n          handleError(err instanceof Error ? err.message : 'CVI calculation failed.');\n      }\n      setCviScores({});\n    } finally {\n      setCalculatingCvi(false);\n    }\n  }, [segments, parameters, selectedFormula, setSegments, setCviScores, completionPercentage, pageError]);\n\n  const handleSelectionCreate = useCallback((geometry: GeoJSONPolygon) => {\n    if (!geometry || !geometry.coordinates || geometry.coordinates.length === 0) {\n      console.error(\"Invalid polygon geometry received for area selection\");\n      return;\n    }\n\n    console.log(\"Area selection polygon created, finding intersecting segments...\");\n    const selectionPolygonTurf = turf.polygon(geometry.coordinates);\n    const newlySelectedIds: string[] = [];\n\n    segments.forEach(segment => {\n        try {\n\n            if (turf.booleanIntersects(segment.geometry, selectionPolygonTurf)) {\n                newlySelectedIds.push(segment.id);\n            }\n\n        } catch (e) {\n            console.warn(`Error checking intersection for segment ${segment.id}:`, e);\n        }\n    });\n\n    console.log(`Found ${newlySelectedIds.length} segments intersecting the selected area.`);\n    setSelectedSegments(prev => [...new Set([...prev, ...newlySelectedIds])]);\n  }, [segments]);\n\n\n  const handleSelectionDelete = useCallback((polygonId: string) => {\n    console.log(\"Selection polygon deletion requested (if applicable):\", polygonId);\n    setSelectionPolygons(prev => prev.filter(p => p.id !== polygonId));\n  }, []);\n\n\n  const handleContinue = useCallback(async () => {\n    const allValuesAssigned = segments.every(segment =>\n        parameters.every(param => segment.parameters && segment.parameters[param.id] !== undefined)\n    );\n    const cviCalculatedForAll = Object.keys(cviScores).length === segments.length;\n\n    if (!allValuesAssigned || completionPercentage < 100) {\n       handleError(`Assign values for all parameters to all segments first. (${completionPercentage}% complete)`);\n       return;\n    }\n    if (!cviCalculatedForAll) {\n       handleError(`Calculate CVI scores for all ${segments.length} segments first. (${Object.keys(cviScores).length} calculated)`);\n       return;\n    }\n\n    handleError(null);\n\n    try {\n      console.log(\"All checks passed. Navigating to results page...\");\n\n      navigate('/results');\n    } catch (err) {\n      console.error('Error preparing to navigate or navigating:', err);\n      handleError('Failed to proceed to results.');\n    }\n  }, [segments, parameters, cviScores, completionPercentage, navigate]);\n\n  const cviStatistics = useMemo(() => {\n    const scores = Object.values(cviScores);\n    if (scores.length === 0) return null;\n\n    const min = Math.min(...scores);\n    const max = Math.max(...scores);\n    const sum = scores.reduce((a, b) => a + b, 0);\n    const avg = sum / scores.length;\n\n    let veryLowCount = 0, lowCount = 0, moderateCount = 0, highCount = 0, veryHighCount = 0;\n    scores.forEach(score => {\n        // Use the proper getCviRank function that handles ICVI formulas correctly\n        const rank = getCviRank(score, selectedFormula?.type);\n        if (rank <= 1) veryLowCount++;\n        else if (rank === 2) lowCount++;\n        else if (rank === 3) moderateCount++;\n        else if (rank === 4) highCount++;\n        else if (rank >= 5) veryHighCount++;\n    });\n\n    return {\n      min: min.toFixed(2),\n      max: max.toFixed(2),\n      avg: avg.toFixed(2),\n      count: scores.length,\n      categories: {\n        veryLow: veryLowCount, low: lowCount, moderate: moderateCount, high: highCount, veryHigh: veryHighCount\n      }\n    };\n  }, [cviScores, selectedFormula]);\n\n  if (dataLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        <p className=\"ml-4 text-gray-600\">Loading assignment data...</p>\n      </div>\n    );\n  }\n\n  if (dataError) {\n     return (\n       <div className=\"p-4 max-w-lg mx-auto mt-10 text-center\">\n         <ErrorAlert message={dataError} onClose={() => setDataError(null)} />\n         <button onClick={() => navigate('/')} className=\"mt-6 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\">\n             Go Home\n         </button>\n       </div>\n     );\n   }\n\n  return (\n    <div className=\"flex flex-col h-full\"> {/* Use full height within Layout */}\n      <div className=\"max-w-5xl mx-auto w-full px-8 py-4 flex flex-col h-full\"> {/* Full height container */}\n        {/* Header - Compact */}\n        <div className=\"flex-shrink-0\">\n          <ParameterAssignmentHeader\n            title=\"5. Parameter Assignment & CVI Calculation\"\n            completionPercentage={completionPercentage}\n          />\n        </div>\n\n        {/* Page-level Error Display - Compact */}\n        {pageError && (\n          <div className=\"flex-shrink-0\">\n            <ErrorAlert message={pageError} onClose={() => handleError(null)} />\n          </div>\n        )}\n\n        {/* Main Content Area: Normal page flow for natural scrolling */}\n        {/* Map gets fixed height, table flows naturally with page scroll */}\n        <div className=\"flex flex-col space-y-8 flex-1\">\n\n          {/* Map Section: Balanced height that doesn't dominate the screen */}\n          <section className=\"w-full\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-1 h-[500px] bg-transparent\">\n\n            {/* Left Column: Map Interaction Panel */}\n            <div className=\"lg:col-span-2 flex flex-col h-full overflow-hidden\"> {/* Ensures map panel fills its column space */}\n              {/* MapInteractionPanel itself should manage its internal layout/scrolling */}\n              <div className=\"flex-grow overflow-hidden\"> {/* Let MapInteractionPanel fill this */}\n                <MapInteractionPanel\n                  segments={segments}\n                  parameters={parameters}\n                  geoJSON={geoJSONForMap}\n                  initialBounds={mapBounds}\n                  selectionPolygons={selectionPolygons}\n                  selectedSegmentIds={selectedSegments}\n                  selectedParameterId={activeParameter?.id ?? null}\n                  onSegmentSelect={handleSegmentSelect}\n                  onSelectAll={handleSelectAll}\n                  onClearSelection={handleClearSelection}\n                  onSelectionDelete={handleSelectionDelete}\n                  onAreaSelect={handleSelectionCreate}\n                  mapContainerRef={mapContainerRef}\n                />\n              </div>\n            </div>\n\n            {/* Right Column: Tabbed Control Panels */}\n            <div className=\"lg:col-span-1 flex flex-col h-full\">\n              {/* Tab Navigation */}\n              <div className=\"flex bg-gray-100 rounded-t-lg\">\n                <button\n                  onClick={() => setActiveTab('parameters')}\n                  className={`flex-1 px-4 py-3 text-sm font-medium rounded-tl-lg transition-colors ${\n                    activeTab === 'parameters'\n                      ? 'bg-white text-blue-600 border-b-2 border-blue-600'\n                      : 'text-gray-600 hover:text-gray-800 hover:bg-gray-50'\n                  }`}\n                >\n                  Parameter Assignment\n                </button>\n                <button\n                  onClick={() => setActiveTab('cvi')}\n                  className={`flex-1 px-4 py-3 text-sm font-medium rounded-tr-lg transition-colors ${\n                    activeTab === 'cvi'\n                      ? 'bg-white text-blue-600 border-b-2 border-blue-600'\n                      : 'text-gray-600 hover:text-gray-800 hover:bg-gray-50'\n                  }`}\n                >\n                  CVI Calculation\n                </button>\n              </div>\n\n              {/* Tab Content */}\n              <div className=\"flex-grow bg-white rounded-b-lg overflow-y-auto p-4 relative max-h-[400px]\">\n                {activeTab === 'parameters' ? (\n                  <ParameterValuePanel\n                    parameters={parameters}\n                    activeParameter={activeParameter}\n                    selectedValue={currentValueToApply}\n                    selectedVulnerability={currentVulnerabilityToApply}\n                    onParameterSelect={handleParameterSelect}\n                    onValueSelect={handleValueSelect}\n                    onApplyValue={handleApplyValue}\n                    selectedSegmentIds={selectedSegments}\n                  />\n                ) : (\n                  <CviFormulaPanel\n                    selectedFormula={selectedFormula}\n                    onCalculateCvi={handleCalculateCvi}\n                    completionPercentage={completionPercentage}\n                    calculatingCvi={calculatingCvi}\n                    cviScores={cviScores}\n                    segments={segments}\n                  />\n                )}\n              </div>\n\n              {/* Continue Button - Only show in CVI tab when ready */}\n              {activeTab === 'cvi' && (\n                <div className=\"bg-white p-4 rounded-b-lg border-t border-gray-200\">\n                  <button\n                    onClick={handleContinue}\n                    className=\"w-full px-4 py-2 bg-teal-600 text-white rounded-md hover:bg-teal-700 disabled:opacity-50 disabled:cursor-not-allowed transition-opacity duration-200\"\n                    disabled={completionPercentage < 100 || Object.keys(cviScores).length !== segments.length || calculatingCvi}\n                    title={\n                       completionPercentage < 100 ? `Complete parameter assignment (${completionPercentage}%) first`\n                       : Object.keys(cviScores).length !== segments.length ? `Calculate CVI for all ${segments.length} segments first (${Object.keys(cviScores).length} done)`\n                       : calculatingCvi ? 'Calculation in progress...'\n                       : 'Proceed to results visualization'\n                    }\n                  >\n                    {calculatingCvi ? (\n                      <>\n                        <svg aria-hidden=\"true\" role=\"status\" className=\"inline w-4 h-4 mr-2 text-white animate-spin\" viewBox=\"0 0 100 101\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C0 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\" fill=\"#E5E7EB\"/>\n                        <path d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\" fill=\"currentColor\"/>\n                        </svg>\n                        Calculating...\n                      </>\n                    ) : 'Continue to Results'}\n                  </button>\n                </div>\n              )}\n            </div>\n            </div>\n          </section>\n\n          {/* Table Section: Natural height, flows with page scroll - Properly separated */}\n          <section className=\"w-full\">\n            <div className=\"bg-white p-6 rounded-lg shadow border-t-4 border-gray-100\" style={{ minHeight: '200px' }}>\n              <SegmentTablePanel\n                segments={segments}\n                parameters={parameters}\n                selectedSegmentIds={selectedSegments}\n                onSegmentSelect={handleSegmentSelect}\n                cviScores={cviScores}\n                selectedFormula={selectedFormula}\n                cviStatistics={cviStatistics}\n              />\n            </div>\n          </section>\n\n        </div> {/* End of main content grid */}\n      </div> {/* End of max-width container */}\n    </div>\n  );\n}\n"],"names":["jsxs","jsx","useMemo","useState","useCallback","length","turf.length","turf.featureCollection","bbox","turf.bbox","useEffect","useRef","turf.polygon","turf.booleanIntersects","Fragment"],"mappings":"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"}