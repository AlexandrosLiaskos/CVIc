{"version":3,"file":"lerc-BNCsv6lx.js","sources":["../../node_modules/lerc/LercDecode.js","../../node_modules/zstddec/dist/zstddec.modern.js","../../node_modules/geotiff/dist-module/compression/lerc.js"],"sourcesContent":["/* jshint forin: false, bitwise: false */\n/*\nCopyright 2015-2021 Esri\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nA copy of the license and additional notices are located with the\nsource distribution at:\n\nhttp://github.com/Esri/lerc/\n\nContributors:  Johannes Schmid, (LERC v1)\n               Chayanika Khatua, (LERC v1)\n               Wenxue Ju (LERC v1, v2.x)\n*/\n\n/* Copyright 2015-2021 Esri. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 @preserve */\n\n/**\n * a module for decoding LERC blobs\n * @module Lerc\n */\n(function() {\n  //this decoder supports all lerc versions, each version has its own class (LercDecode and Lerc2Decode). \n  //the exported module handles format variation autoamtically.\n\n  //the original LercDecode for Version 1\n  var LercDecode = (function() {\n\n    // Note: currently, this module only has an implementation for decoding LERC data, not encoding. The name of\n    // the class was chosen to be future proof.\n\n    var CntZImage = {};\n\n    CntZImage.defaultNoDataValue = -3.4027999387901484e+38; // smallest Float32 value\n\n    /**\n     * Decode a LERC byte stream and return an object containing the pixel data and some required and optional\n     * information about it, such as the image's width and height.\n     *\n     * @param {ArrayBuffer} input The LERC input byte stream\n     * @param {object} [options] Decoding options, containing any of the following properties:\n     * @config {number} [inputOffset = 0]\n     *        Skip the first inputOffset bytes of the input byte stream. A valid LERC file is expected at that position.\n     * @config {Uint8Array} [encodedMask = null]\n     *        If specified, the decoder will not read mask information from the input and use the specified encoded\n     *        mask data instead. Mask header/data must not be present in the LERC byte stream in this case.\n     * @config {number} [noDataValue = LercCode.defaultNoDataValue]\n     *        Pixel value to use for masked pixels.\n     * @config {ArrayBufferView|Array} [pixelType = Float32Array]\n     *        The desired type of the pixelData array in the return value. Note that it is the caller's responsibility to\n     *        provide an appropriate noDataValue if the default pixelType is overridden.\n     * @config {boolean} [returnMask = false]\n     *        If true, the return value will contain a maskData property of type Uint8Array which has one element per\n     *        pixel, the value of which is 1 or 0 depending on whether that pixel's data is present or masked. If the\n     *        input LERC data does not contain a mask, maskData will not be returned.\n     * @config {boolean} [returnEncodedMask = false]\n     *        If true, the return value will contain a encodedMaskData property, which can be passed into encode() as\n     *        encodedMask.\n     * @config {boolean} [returnFileInfo = false]\n     *        If true, the return value will have a fileInfo property that contains metadata obtained from the\n     *        LERC headers and the decoding process.\n     * @config {boolean} [computeUsedBitDepths = false]\n     *        If true, the fileInfo property in the return value will contain the set of all block bit depths\n     *        encountered during decoding. Will only have an effect if returnFileInfo option is true.\n     * @returns {{width, height, pixelData, minValue, maxValue, noDataValue, maskData, encodedMaskData, fileInfo}}\n     */\n    CntZImage.decode = function(input, options) {\n      options = options || {};\n\n      var skipMask = options.encodedMaskData || (options.encodedMaskData === null);\n      var parsedData = parse(input, options.inputOffset || 0, skipMask);\n\n      var noDataValue = (options.noDataValue !== null) ? options.noDataValue : CntZImage.defaultNoDataValue;\n\n      var uncompressedData = uncompressPixelValues(parsedData, options.pixelType || Float32Array,\n        options.encodedMaskData, noDataValue, options.returnMask);\n\n      var result = {\n        width: parsedData.width,\n        height: parsedData.height,\n        pixelData: uncompressedData.resultPixels,\n        minValue: uncompressedData.minValue,\n        maxValue: parsedData.pixels.maxValue,\n        noDataValue: noDataValue\n      };\n\n      if (uncompressedData.resultMask) {\n        result.maskData = uncompressedData.resultMask;\n      }\n\n      if (options.returnEncodedMask && parsedData.mask) {\n        result.encodedMaskData = parsedData.mask.bitset ? parsedData.mask.bitset : null;\n      }\n\n      if (options.returnFileInfo) {\n        result.fileInfo = formatFileInfo(parsedData);\n        if (options.computeUsedBitDepths) {\n          result.fileInfo.bitDepths = computeUsedBitDepths(parsedData);\n        }\n      }\n\n      return result;\n    };\n\n    var uncompressPixelValues = function(data, TypedArrayClass, maskBitset, noDataValue, storeDecodedMask) {\n      var blockIdx = 0;\n      var numX = data.pixels.numBlocksX;\n      var numY = data.pixels.numBlocksY;\n      var blockWidth = Math.floor(data.width / numX);\n      var blockHeight = Math.floor(data.height / numY);\n      var scale = 2 * data.maxZError;\n      var minValue = Number.MAX_VALUE, currentValue;\n      maskBitset = maskBitset || ((data.mask) ? data.mask.bitset : null);\n\n      var resultPixels, resultMask;\n      resultPixels = new TypedArrayClass(data.width * data.height);\n      if (storeDecodedMask && maskBitset) {\n        resultMask = new Uint8Array(data.width * data.height);\n      }\n      var blockDataBuffer = new Float32Array(blockWidth * blockHeight);\n\n      var xx, yy;\n      for (var y = 0; y <= numY; y++) {\n        var thisBlockHeight = (y !== numY) ? blockHeight : (data.height % numY);\n        if (thisBlockHeight === 0) {\n          continue;\n        }\n        for (var x = 0; x <= numX; x++) {\n          var thisBlockWidth = (x !== numX) ? blockWidth : (data.width % numX);\n          if (thisBlockWidth === 0) {\n            continue;\n          }\n\n          var outPtr = y * data.width * blockHeight + x * blockWidth;\n          var outStride = data.width - thisBlockWidth;\n\n          var block = data.pixels.blocks[blockIdx];\n\n          var blockData, blockPtr, constValue;\n          if (block.encoding < 2) {\n            // block is either uncompressed or bit-stuffed (encodings 0 and 1)\n            if (block.encoding === 0) {\n              // block is uncompressed\n              blockData = block.rawData;\n            } else {\n              // block is bit-stuffed\n              unstuff(block.stuffedData, block.bitsPerPixel, block.numValidPixels, block.offset, scale, blockDataBuffer, data.pixels.maxValue);\n              blockData = blockDataBuffer;\n            }\n            blockPtr = 0;\n          }\n          else if (block.encoding === 2) {\n            // block is all 0\n            constValue = 0;\n          }\n          else {\n            // block has constant value (encoding === 3)\n            constValue = block.offset;\n          }\n\n          var maskByte;\n          if (maskBitset) {\n            for (yy = 0; yy < thisBlockHeight; yy++) {\n              if (outPtr & 7) {\n                //\n                maskByte = maskBitset[outPtr >> 3];\n                maskByte <<= outPtr & 7;\n              }\n              for (xx = 0; xx < thisBlockWidth; xx++) {\n                if (!(outPtr & 7)) {\n                  // read next byte from mask\n                  maskByte = maskBitset[outPtr >> 3];\n                }\n                if (maskByte & 128) {\n                  // pixel data present\n                  if (resultMask) {\n                    resultMask[outPtr] = 1;\n                  }\n                  currentValue = (block.encoding < 2) ? blockData[blockPtr++] : constValue;\n                  minValue = minValue > currentValue ? currentValue : minValue;\n                  resultPixels[outPtr++] = currentValue;\n                } else {\n                  // pixel data not present\n                  if (resultMask) {\n                    resultMask[outPtr] = 0;\n                  }\n                  resultPixels[outPtr++] = noDataValue;\n                }\n                maskByte <<= 1;\n              }\n              outPtr += outStride;\n            }\n          } else {\n            // mask not present, simply copy block over\n            if (block.encoding < 2) {\n              // duplicating this code block for performance reasons\n              // blockData case:\n              for (yy = 0; yy < thisBlockHeight; yy++) {\n                for (xx = 0; xx < thisBlockWidth; xx++) {\n                  currentValue = blockData[blockPtr++];\n                  minValue = minValue > currentValue ? currentValue : minValue;\n                  resultPixels[outPtr++] = currentValue;\n                }\n                outPtr += outStride;\n              }\n            }\n            else {\n              // constValue case:\n              minValue = minValue > constValue ? constValue : minValue;\n              for (yy = 0; yy < thisBlockHeight; yy++) {\n                for (xx = 0; xx < thisBlockWidth; xx++) {\n                  resultPixels[outPtr++] = constValue;\n                }\n                outPtr += outStride;\n              }\n            }\n          }\n          if ((block.encoding === 1) && (blockPtr !== block.numValidPixels)) {\n            throw \"Block and Mask do not match\";\n          }\n          blockIdx++;\n        }\n      }\n\n      return {\n        resultPixels: resultPixels,\n        resultMask: resultMask,\n        minValue: minValue\n      };\n    };\n\n    var formatFileInfo = function(data) {\n      return {\n        \"fileIdentifierString\": data.fileIdentifierString,\n        \"fileVersion\": data.fileVersion,\n        \"imageType\": data.imageType,\n        \"height\": data.height,\n        \"width\": data.width,\n        \"maxZError\": data.maxZError,\n        \"eofOffset\": data.eofOffset,\n        \"mask\": data.mask ? {\n          \"numBlocksX\": data.mask.numBlocksX,\n          \"numBlocksY\": data.mask.numBlocksY,\n          \"numBytes\": data.mask.numBytes,\n          \"maxValue\": data.mask.maxValue\n        } : null,\n        \"pixels\": {\n          \"numBlocksX\": data.pixels.numBlocksX,\n          \"numBlocksY\": data.pixels.numBlocksY,\n          \"numBytes\": data.pixels.numBytes,\n          \"maxValue\": data.pixels.maxValue,\n          \"noDataValue\": data.noDataValue\n        }\n      };\n    };\n\n    var computeUsedBitDepths = function(data) {\n      var numBlocks = data.pixels.numBlocksX * data.pixels.numBlocksY;\n      var bitDepths = {};\n      for (var i = 0; i < numBlocks; i++) {\n        var block = data.pixels.blocks[i];\n        if (block.encoding === 0) {\n          bitDepths.float32 = true;\n        } else if (block.encoding === 1) {\n          bitDepths[block.bitsPerPixel] = true;\n        } else {\n          bitDepths[0] = true;\n        }\n      }\n\n      return Object.keys(bitDepths);\n    };\n\n    var parse = function(input, fp, skipMask) {\n      var data = {};\n\n      // File header\n      var fileIdView = new Uint8Array(input, fp, 10);\n      data.fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n      if (data.fileIdentifierString.trim() !== \"CntZImage\") {\n        throw \"Unexpected file identifier string: \" + data.fileIdentifierString;\n      }\n      fp += 10;\n      var view = new DataView(input, fp, 24);\n      data.fileVersion = view.getInt32(0, true);\n      data.imageType = view.getInt32(4, true);\n      data.height = view.getUint32(8, true);\n      data.width = view.getUint32(12, true);\n      data.maxZError = view.getFloat64(16, true);\n      fp += 24;\n\n      // Mask Header\n      if (!skipMask) {\n        view = new DataView(input, fp, 16);\n        data.mask = {};\n        data.mask.numBlocksY = view.getUint32(0, true);\n        data.mask.numBlocksX = view.getUint32(4, true);\n        data.mask.numBytes = view.getUint32(8, true);\n        data.mask.maxValue = view.getFloat32(12, true);\n        fp += 16;\n\n        // Mask Data\n        if (data.mask.numBytes > 0) {\n          var bitset = new Uint8Array(Math.ceil(data.width * data.height / 8));\n          view = new DataView(input, fp, data.mask.numBytes);\n          var cnt = view.getInt16(0, true);\n          var ip = 2, op = 0;\n          do {\n            if (cnt > 0) {\n              while (cnt--) { bitset[op++] = view.getUint8(ip++); }\n            } else {\n              var val = view.getUint8(ip++);\n              cnt = -cnt;\n              while (cnt--) { bitset[op++] = val; }\n            }\n            cnt = view.getInt16(ip, true);\n            ip += 2;\n          } while (ip < data.mask.numBytes);\n          if ((cnt !== -32768) || (op < bitset.length)) {\n            throw \"Unexpected end of mask RLE encoding\";\n          }\n          data.mask.bitset = bitset;\n          fp += data.mask.numBytes;\n        }\n        else if ((data.mask.numBytes | data.mask.numBlocksY | data.mask.maxValue) === 0) {  // Special case, all nodata\n          data.mask.bitset = new Uint8Array(Math.ceil(data.width * data.height / 8));\n        }\n      }\n\n      // Pixel Header\n      view = new DataView(input, fp, 16);\n      data.pixels = {};\n      data.pixels.numBlocksY = view.getUint32(0, true);\n      data.pixels.numBlocksX = view.getUint32(4, true);\n      data.pixels.numBytes = view.getUint32(8, true);\n      data.pixels.maxValue = view.getFloat32(12, true);\n      fp += 16;\n\n      var numBlocksX = data.pixels.numBlocksX;\n      var numBlocksY = data.pixels.numBlocksY;\n      // the number of blocks specified in the header does not take into account the blocks at the end of\n      // each row/column with a special width/height that make the image complete in case the width is not\n      // evenly divisible by the number of blocks.\n      var actualNumBlocksX = numBlocksX + ((data.width % numBlocksX) > 0 ? 1 : 0);\n      var actualNumBlocksY = numBlocksY + ((data.height % numBlocksY) > 0 ? 1 : 0);\n      data.pixels.blocks = new Array(actualNumBlocksX * actualNumBlocksY);\n      var blockI = 0;\n      for (var blockY = 0; blockY < actualNumBlocksY; blockY++) {\n        for (var blockX = 0; blockX < actualNumBlocksX; blockX++) {\n\n          // Block\n          var size = 0;\n          var bytesLeft = input.byteLength - fp;\n          view = new DataView(input, fp, Math.min(10, bytesLeft));\n          var block = {};\n          data.pixels.blocks[blockI++] = block;\n          var headerByte = view.getUint8(0); size++;\n          block.encoding = headerByte & 63;\n          if (block.encoding > 3) {\n            throw \"Invalid block encoding (\" + block.encoding + \")\";\n          }\n          if (block.encoding === 2) {\n            fp++;\n            continue;\n          }\n          if ((headerByte !== 0) && (headerByte !== 2)) {\n            headerByte >>= 6;\n            block.offsetType = headerByte;\n            if (headerByte === 2) {\n              block.offset = view.getInt8(1); size++;\n            } else if (headerByte === 1) {\n              block.offset = view.getInt16(1, true); size += 2;\n            } else if (headerByte === 0) {\n              block.offset = view.getFloat32(1, true); size += 4;\n            } else {\n              throw \"Invalid block offset type\";\n            }\n\n            if (block.encoding === 1) {\n              headerByte = view.getUint8(size); size++;\n              block.bitsPerPixel = headerByte & 63;\n              headerByte >>= 6;\n              block.numValidPixelsType = headerByte;\n              if (headerByte === 2) {\n                block.numValidPixels = view.getUint8(size); size++;\n              } else if (headerByte === 1) {\n                block.numValidPixels = view.getUint16(size, true); size += 2;\n              } else if (headerByte === 0) {\n                block.numValidPixels = view.getUint32(size, true); size += 4;\n              } else {\n                throw \"Invalid valid pixel count type\";\n              }\n            }\n          }\n          fp += size;\n\n          if (block.encoding === 3) {\n            continue;\n          }\n\n          var arrayBuf, store8;\n          if (block.encoding === 0) {\n            var numPixels = (data.pixels.numBytes - 1) / 4;\n            if (numPixels !== Math.floor(numPixels)) {\n              throw \"uncompressed block has invalid length\";\n            }\n            arrayBuf = new ArrayBuffer(numPixels * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, fp, numPixels * 4));\n            var rawData = new Float32Array(arrayBuf);\n            block.rawData = rawData;\n            fp += numPixels * 4;\n          } else if (block.encoding === 1) {\n            var dataBytes = Math.ceil(block.numValidPixels * block.bitsPerPixel / 8);\n            var dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, fp, dataBytes));\n            block.stuffedData = new Uint32Array(arrayBuf);\n            fp += dataBytes;\n          }\n        }\n      }\n      data.eofOffset = fp;\n      return data;\n    };\n\n    var unstuff = function(src, bitsPerPixel, numPixels, offset, scale, dest, maxValue) {\n      var bitMask = (1 << bitsPerPixel) - 1;\n      var i = 0, o;\n      var bitsLeft = 0;\n      var n, buffer;\n      var nmax = Math.ceil((maxValue - offset) / scale);\n      // get rid of trailing bytes that are already part of next block\n      var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n      src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n      for (o = 0; o < numPixels; o++) {\n        if (bitsLeft === 0) {\n          buffer = src[i++];\n          bitsLeft = 32;\n        }\n        if (bitsLeft >= bitsPerPixel) {\n          n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n          bitsLeft -= bitsPerPixel;\n        } else {\n          var missingBits = (bitsPerPixel - bitsLeft);\n          n = ((buffer & bitMask) << missingBits) & bitMask;\n          buffer = src[i++];\n          bitsLeft = 32 - missingBits;\n          n += (buffer >>> bitsLeft);\n        }\n        //pixel values may exceed max due to quantization\n        dest[o] = n < nmax ? offset + n * scale : maxValue;\n      }\n      return dest;\n    };\n\n    return CntZImage;\n  })();\n\n  //version 2. Supports 2.1, 2.2, 2.3\n  var Lerc2Decode = (function() {\n    \"use strict\";\n    // Note: currently, this module only has an implementation for decoding LERC data, not encoding. The name of\n    // the class was chosen to be future proof, following LercDecode.\n\n    /*****************************************\n    * private static class bitsutffer used by Lerc2Decode\n    *******************************************/\n    var BitStuffer = {\n      //methods ending with 2 are for the new byte order used by Lerc2.3 and above.\n      //originalUnstuff is used to unpack Huffman code table. code is duplicated to unstuffx for performance reasons.\n      unstuff: function(src, dest, bitsPerPixel, numPixels, lutArr, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0;\n        var n, buffer, missingBits, nmax;\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n        if (lutArr) {\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n              bitsLeft -= bitsPerPixel;\n            }\n            else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = ((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n += (buffer >>> bitsLeft);\n            }\n            dest[o] = lutArr[n];//offset + lutArr[n] * scale;\n          }\n        }\n        else {\n          nmax = Math.ceil((maxValue - offset) / scale);\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n              bitsLeft -= bitsPerPixel;\n            }\n            else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = ((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n += (buffer >>> bitsLeft);\n            }\n            //pixel values may exceed max due to quantization\n            dest[o] = n < nmax ? offset + n * scale : maxValue;\n          }\n        }\n      },\n\n      unstuffLUT: function(src, bitsPerPixel, numPixels, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o = 0, missingBits = 0, bitsLeft = 0, n = 0;\n        var buffer;\n        var dest = [];\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n        var nmax = Math.ceil((maxValue - offset) / scale);\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n            bitsLeft -= bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = ((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n += (buffer >>> bitsLeft);\n          }\n          //dest.push(n);\n          dest[o] = n < nmax ? offset + n * scale : maxValue;\n        }\n        dest.unshift(offset);//1st one\n        return dest;\n      },\n\n      unstuff2: function(src, dest, bitsPerPixel, numPixels, lutArr, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0, bitPos = 0;\n        var n, buffer, missingBits;\n        if (lutArr) {\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n              bitPos = 0;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = ((buffer >>> bitPos) & bitMask);\n              bitsLeft -= bitsPerPixel;\n              bitPos += bitsPerPixel;\n            } else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = (buffer >>> bitPos) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n              bitPos = missingBits;\n            }\n            dest[o] = lutArr[n];\n          }\n        }\n        else {\n          var nmax = Math.ceil((maxValue - offset) / scale);\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n              bitPos = 0;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              //no unsigned left shift\n              n = ((buffer >>> bitPos) & bitMask);\n              bitsLeft -= bitsPerPixel;\n              bitPos += bitsPerPixel;\n            } else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n              bitPos = missingBits;\n            }\n            //pixel values may exceed max due to quantization\n            dest[o] = n < nmax ? offset + n * scale : maxValue;\n          }\n        }\n        return dest;\n      },\n\n      unstuffLUT2: function(src, bitsPerPixel, numPixels, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o = 0, missingBits = 0, bitsLeft = 0, n = 0, bitPos = 0;\n        var buffer;\n        var dest = [];\n        var nmax = Math.ceil((maxValue - offset) / scale);\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n            bitPos = 0;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            //no unsigned left shift\n            n = ((buffer >>> bitPos) & bitMask);\n            bitsLeft -= bitsPerPixel;\n            bitPos += bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n            bitPos = missingBits;\n          }\n          //dest.push(n);\n          dest[o] = n < nmax ? offset + n * scale : maxValue;\n        }\n        dest.unshift(offset);\n        return dest;\n      },\n\n      originalUnstuff: function(src, dest, bitsPerPixel, numPixels) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0;\n        var n, buffer, missingBits;\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n            bitsLeft -= bitsPerPixel;\n          }\n          else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = ((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n += (buffer >>> bitsLeft);\n          }\n          dest[o] = n;\n        }\n        return dest;\n      },\n\n      originalUnstuff2: function(src, dest, bitsPerPixel, numPixels) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0, bitPos = 0;\n        var n, buffer, missingBits;\n        //micro-optimizations\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n            bitPos = 0;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            //no unsigned left shift\n            n = ((buffer >>> bitPos) & bitMask);\n            bitsLeft -= bitsPerPixel;\n            bitPos += bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n            bitPos = missingBits;\n          }\n          dest[o] = n;\n        }\n        return dest;\n      }\n    };\n\n    /*****************************************\n    *private static class used by Lerc2Decode\n    ******************************************/\n    var Lerc2Helpers = {\n      HUFFMAN_LUT_BITS_MAX: 12, //use 2^12 lut, treat it like constant\n      computeChecksumFletcher32: function(input) {\n\n        var sum1 = 0xffff, sum2 = 0xffff;\n        var len = input.length;\n        var words = Math.floor(len / 2);\n        var i = 0;\n        while (words) {\n          var tlen = (words >= 359) ? 359 : words;\n          words -= tlen;\n          do {\n            sum1 += (input[i++] << 8);\n            sum2 += sum1 += input[i++];\n          } while (--tlen);\n\n          sum1 = (sum1 & 0xffff) + (sum1 >>> 16);\n          sum2 = (sum2 & 0xffff) + (sum2 >>> 16);\n        }\n\n        // add the straggler byte if it exists\n        if (len & 1) {\n          sum2 += sum1 += (input[i] << 8);\n        }\n        // second reduction step to reduce sums to 16 bits\n        sum1 = (sum1 & 0xffff) + (sum1 >>> 16);\n        sum2 = (sum2 & 0xffff) + (sum2 >>> 16);\n\n        return (sum2 << 16 | sum1) >>> 0;\n      },\n\n      readHeaderInfo: function(input, data) {\n        var ptr = data.ptr;\n        var fileIdView = new Uint8Array(input, ptr, 6);\n        var headerInfo = {};\n        headerInfo.fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n        if (headerInfo.fileIdentifierString.lastIndexOf(\"Lerc2\", 0) !== 0) {\n          throw \"Unexpected file identifier string (expect Lerc2 ): \" + headerInfo.fileIdentifierString;\n        }\n        ptr += 6;\n        var view = new DataView(input, ptr, 8);\n        var fileVersion = view.getInt32(0, true);\n        headerInfo.fileVersion = fileVersion;\n        ptr += 4;\n        if (fileVersion >= 3) {\n          headerInfo.checksum = view.getUint32(4, true); //nrows\n          ptr += 4;\n        }\n\n        //keys start from here\n        view = new DataView(input, ptr, 12);\n        headerInfo.height = view.getUint32(0, true); //nrows\n        headerInfo.width = view.getUint32(4, true); //ncols\n        ptr += 8;\n        if (fileVersion >= 4) {\n          headerInfo.numDims = view.getUint32(8, true);\n          ptr += 4;\n        }\n        else {\n          headerInfo.numDims = 1;\n        }\n\n        view = new DataView(input, ptr, 40);\n        headerInfo.numValidPixel = view.getUint32(0, true);\n        headerInfo.microBlockSize = view.getInt32(4, true);\n        headerInfo.blobSize = view.getInt32(8, true);\n        headerInfo.imageType = view.getInt32(12, true);\n\n        headerInfo.maxZError = view.getFloat64(16, true);\n        headerInfo.zMin = view.getFloat64(24, true);\n        headerInfo.zMax = view.getFloat64(32, true);\n        ptr += 40;\n        data.headerInfo = headerInfo;\n        data.ptr = ptr;\n\n        var checksum, keyLength;\n        if (fileVersion >= 3) {\n          keyLength = fileVersion >= 4 ? 52 : 48;\n          checksum = this.computeChecksumFletcher32(new Uint8Array(input, ptr - keyLength, headerInfo.blobSize - 14));\n          if (checksum !== headerInfo.checksum) {\n            throw \"Checksum failed.\";\n          }\n        }\n        return true;\n      },\n\n      checkMinMaxRanges: function(input, data) {\n        var headerInfo = data.headerInfo;\n        var OutPixelTypeArray = this.getDataTypeArray(headerInfo.imageType);\n        var rangeBytes = headerInfo.numDims * this.getDataTypeSize(headerInfo.imageType);\n        var minValues = this.readSubArray(input, data.ptr, OutPixelTypeArray, rangeBytes);\n        var maxValues = this.readSubArray(input, data.ptr + rangeBytes, OutPixelTypeArray, rangeBytes);\n        data.ptr += (2 * rangeBytes);\n        var i, equal = true;\n        for (i = 0; i < headerInfo.numDims; i++) {\n          if (minValues[i] !== maxValues[i]) {\n            equal = false;\n            break;\n          }\n        }\n        headerInfo.minValues = minValues;\n        headerInfo.maxValues = maxValues;\n        return equal;\n      },\n\n      readSubArray: function(input, ptr, OutPixelTypeArray, numBytes) {\n        var rawData;\n        if (OutPixelTypeArray === Uint8Array) {\n          rawData = new Uint8Array(input, ptr, numBytes);\n        }\n        else {\n          var arrayBuf = new ArrayBuffer(numBytes);\n          var store8 = new Uint8Array(arrayBuf);\n          store8.set(new Uint8Array(input, ptr, numBytes));\n          rawData = new OutPixelTypeArray(arrayBuf);\n        }\n        return rawData;\n      },\n\n      readMask: function(input, data) {\n        var ptr = data.ptr;\n        var headerInfo = data.headerInfo;\n        var numPixels = headerInfo.width * headerInfo.height;\n        var numValidPixel = headerInfo.numValidPixel;\n\n        var view = new DataView(input, ptr, 4);\n        var mask = {};\n        mask.numBytes = view.getUint32(0, true);\n        ptr += 4;\n\n        // Mask Data\n        if ((0 === numValidPixel || numPixels === numValidPixel) && 0 !== mask.numBytes) {\n          throw (\"invalid mask\");\n        }\n        var bitset, resultMask;\n        if (numValidPixel === 0) {\n          bitset = new Uint8Array(Math.ceil(numPixels / 8));\n          mask.bitset = bitset;\n          resultMask = new Uint8Array(numPixels);\n          data.pixels.resultMask = resultMask;\n          ptr += mask.numBytes;\n        }// ????? else if (data.mask.numBytes > 0 && data.mask.numBytes< data.numValidPixel) {\n        else if (mask.numBytes > 0) {\n          bitset = new Uint8Array(Math.ceil(numPixels / 8));\n          view = new DataView(input, ptr, mask.numBytes);\n          var cnt = view.getInt16(0, true);\n          var ip = 2, op = 0, val = 0;\n          do {\n            if (cnt > 0) {\n              while (cnt--) { bitset[op++] = view.getUint8(ip++); }\n            } else {\n              val = view.getUint8(ip++);\n              cnt = -cnt;\n              while (cnt--) { bitset[op++] = val; }\n            }\n            cnt = view.getInt16(ip, true);\n            ip += 2;\n          } while (ip < mask.numBytes);\n          if ((cnt !== -32768) || (op < bitset.length)) {\n            throw \"Unexpected end of mask RLE encoding\";\n          }\n\n          resultMask = new Uint8Array(numPixels);\n          var mb = 0, k = 0;\n\n          for (k = 0; k < numPixels; k++) {\n            if (k & 7) {\n              mb = bitset[k >> 3];\n              mb <<= k & 7;\n            }\n            else {\n              mb = bitset[k >> 3];\n            }\n            if (mb & 128) {\n              resultMask[k] = 1;\n            }\n          }\n          data.pixels.resultMask = resultMask;\n\n          mask.bitset = bitset;\n          ptr += mask.numBytes;\n        }\n        data.ptr = ptr;\n        data.mask = mask;\n        return true;\n      },\n\n      readDataOneSweep: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var ptr = data.ptr;\n        var headerInfo = data.headerInfo;\n        var numDims = headerInfo.numDims;\n        var numPixels = headerInfo.width * headerInfo.height;\n        var imageType = headerInfo.imageType;\n        var numBytes = headerInfo.numValidPixel * Lerc2Helpers.getDataTypeSize(imageType) * numDims;\n        //data.pixels.numBytes = numBytes;\n        var rawData;\n        var mask = data.pixels.resultMask;\n        if (OutPixelTypeArray === Uint8Array) {\n          rawData = new Uint8Array(input, ptr, numBytes);\n        }\n        else {\n          var arrayBuf = new ArrayBuffer(numBytes);\n          var store8 = new Uint8Array(arrayBuf);\n          store8.set(new Uint8Array(input, ptr, numBytes));\n          rawData = new OutPixelTypeArray(arrayBuf);\n        }\n        if (rawData.length === numPixels * numDims) {\n          if (useBSQForOutputDim) {\n            data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(rawData, numPixels, numDims, OutPixelTypeArray, true);\n          }\n          else {\n            data.pixels.resultPixels = rawData;\n          }\n        }\n        else  //mask\n        {\n          data.pixels.resultPixels = new OutPixelTypeArray(numPixels * numDims);\n          var z = 0, k = 0, i = 0, nStart = 0;\n          if (numDims > 1) {\n            if (useBSQForOutputDim) {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k;\n                  for (i = 0; i < numDims; i++, nStart+=numPixels) {\n                    data.pixels.resultPixels[nStart] = rawData[z++];\n                  }\n                }\n              }\n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k * numDims;\n                  for (i = 0; i < numDims; i++) {\n                    data.pixels.resultPixels[nStart + i] = rawData[z++];\n                  }\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels; k++) {\n              if (mask[k]) {\n                data.pixels.resultPixels[k] = rawData[z++];\n              }\n            }\n          }\n        }\n        ptr += numBytes;\n        data.ptr = ptr;       //return data;\n        return true;\n      },\n\n      readHuffmanTree: function(input, data) {\n        var BITS_MAX = this.HUFFMAN_LUT_BITS_MAX; //8 is slow for the large test image\n        //var size_max = 1 << BITS_MAX;\n        /* ************************\n        * reading code table\n        *************************/\n        var view = new DataView(input, data.ptr, 16);\n        data.ptr += 16;\n        var version = view.getInt32(0, true);\n        if (version < 2) {\n          throw \"unsupported Huffman version\";\n        }\n        var size = view.getInt32(4, true);\n        var i0 = view.getInt32(8, true);\n        var i1 = view.getInt32(12, true);\n        if (i0 >= i1) {\n          return false;\n        }\n        var blockDataBuffer = new Uint32Array(i1 - i0);\n        Lerc2Helpers.decodeBits(input, data, blockDataBuffer);\n        var codeTable = []; //size\n        var i, j, k, len;\n\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          codeTable[j] = { first: blockDataBuffer[i - i0], second: null };\n        }\n\n        var dataBytes = input.byteLength - data.ptr;\n        var dataWords = Math.ceil(dataBytes / 4);\n        var arrayBuf = new ArrayBuffer(dataWords * 4);\n        var store8 = new Uint8Array(arrayBuf);\n        store8.set(new Uint8Array(input, data.ptr, dataBytes));\n        var stuffedData = new Uint32Array(arrayBuf); //must start from x*4\n        var bitPos = 0, word, srcPtr = 0;\n        word = stuffedData[0];\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          len = codeTable[j].first;\n          if (len > 0) {\n            codeTable[j].second = (word << bitPos) >>> (32 - len);\n\n            if (32 - bitPos >= len) {\n              bitPos += len;\n              if (bitPos === 32) {\n                bitPos = 0;\n                srcPtr++;\n                word = stuffedData[srcPtr];\n              }\n            }\n            else {\n              bitPos += len - 32;\n              srcPtr++;\n              word = stuffedData[srcPtr];\n              codeTable[j].second |= word >>> (32 - bitPos);\n            }\n          }\n        }\n\n        //finished reading code table\n\n        /* ************************\n        * building lut\n        *************************/\n        var numBitsLUT = 0, numBitsLUTQick = 0;\n        var tree = new TreeNode();\n        for (i = 0; i < codeTable.length; i++) {\n          if (codeTable[i] !== undefined) {\n            numBitsLUT = Math.max(numBitsLUT, codeTable[i].first);\n          }\n        }\n        if (numBitsLUT >= BITS_MAX) {\n          numBitsLUTQick = BITS_MAX;\n        }\n        else {\n          numBitsLUTQick = numBitsLUT;\n        }\n        // for debugging purpose\n        // if (numBitsLUT >= 30) {\n        //   console.log(\"WARning, large NUM LUT BITS IS \" + numBitsLUT);\n        // }\n        var decodeLut = [], entry, code, numEntries, jj, currentBit, node;\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          len = codeTable[j].first;\n          if (len > 0) {\n            entry = [len, j];\n            if (len <= numBitsLUTQick) {\n              code = codeTable[j].second << (numBitsLUTQick - len);\n              numEntries = 1 << (numBitsLUTQick - len);\n              for (k = 0; k < numEntries; k++) {\n                decodeLut[code | k] = entry;\n              }\n            }\n            else {\n              //build tree\n              code = codeTable[j].second;\n              node = tree;\n              for (jj = len - 1; jj >= 0; jj--) {\n                currentBit = code >>> jj & 1; //no left shift as length could be 30,31\n                if (currentBit) {\n                  if (!node.right) {\n                    node.right = new TreeNode();\n                  }\n                  node = node.right;\n                }\n                else {\n                  if (!node.left) {\n                    node.left = new TreeNode();\n                  }\n                  node = node.left;\n                }\n                if (jj === 0 && !node.val) {\n                  node.val = entry[1];\n                }\n              }\n            }\n          }\n        }\n        return {\n          decodeLut: decodeLut,\n          numBitsLUTQick: numBitsLUTQick,\n          numBitsLUT: numBitsLUT,\n          tree: tree,\n          stuffedData: stuffedData,\n          srcPtr: srcPtr,\n          bitPos: bitPos\n        };\n      },\n\n      readHuffman: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var headerInfo = data.headerInfo;\n        var numDims = headerInfo.numDims;\n        var height = data.headerInfo.height;\n        var width = data.headerInfo.width;\n        var numPixels = width * height;\n        //var size_max = 1 << BITS_MAX;\n        /* ************************\n        * reading huffman structure info\n        *************************/\n        var huffmanInfo = this.readHuffmanTree(input, data);\n        var decodeLut = huffmanInfo.decodeLut;\n        var tree = huffmanInfo.tree;\n        //stuffedData includes huffman headers\n        var stuffedData = huffmanInfo.stuffedData;\n        var srcPtr = huffmanInfo.srcPtr;\n        var bitPos = huffmanInfo.bitPos;\n        var numBitsLUTQick = huffmanInfo.numBitsLUTQick;\n        var numBitsLUT = huffmanInfo.numBitsLUT;\n        var offset = data.headerInfo.imageType === 0 ? 128 : 0;\n        /*************************\n        *  decode\n        ***************************/\n        var node, val, delta, mask = data.pixels.resultMask, valTmp, valTmpQuick, currentBit;\n        var i, j, k, ii;\n        var prevVal = 0;\n        if (bitPos > 0) {\n          srcPtr++;\n          bitPos = 0;\n        }\n        var word = stuffedData[srcPtr];\n        var deltaEncode = data.encodeMode === 1;\n        var resultPixelsAllDim = new OutPixelTypeArray(numPixels * numDims);\n        var resultPixels = resultPixelsAllDim;\n        var iDim;\n        // TODO: reevaluate the need to keep inlined decoding code as IE support is phasing out\n        if (numDims < 2 || deltaEncode) {\n          for (iDim = 0; iDim < numDims; iDim++) {\n            if (numDims > 1) {\n              //get the mem block of current dimension\n              resultPixels = new OutPixelTypeArray(resultPixelsAllDim.buffer, numPixels * iDim, numPixels);\n              prevVal = 0;\n            }\n            if (data.headerInfo.numValidPixel === width * height) { //all valid\n              for (k = 0, i = 0; i < height; i++) {\n                for (j = 0; j < width; j++, k++) {\n                  val = 0;\n                  valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                  valTmpQuick = valTmp;// >>> deltaBits;\n                  if (32 - bitPos < numBitsLUTQick) {\n                    valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                  }\n                  if (decodeLut[valTmpQuick])    // if there, move the correct number of bits and done\n                  {\n                    val = decodeLut[valTmpQuick][1];\n                    bitPos += decodeLut[valTmpQuick][0];\n                  }\n                  else {\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                    if (32 - bitPos < numBitsLUT) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                    }\n                    node = tree;\n                    for (ii = 0; ii < numBitsLUT; ii++) {\n                      currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                      node = currentBit ? node.right : node.left;\n                      if (!(node.left || node.right)) {\n                        val = node.val;\n                        bitPos = bitPos + ii + 1;\n                        break;\n                      }\n                    }\n                  }\n    \n                  if (bitPos >= 32) {\n                    bitPos -= 32;\n                    srcPtr++;\n                    word = stuffedData[srcPtr];\n                  }\n    \n                  delta = val - offset;\n                  if (deltaEncode) {\n                    if (j > 0) {\n                      delta += prevVal;    // use overflow\n                    }\n                    else if (i > 0) {\n                      delta += resultPixels[k - width];\n                    }\n                    else {\n                      delta += prevVal;\n                    }\n                    delta &= 0xFF; //overflow\n                    resultPixels[k] = delta;//overflow\n                    prevVal = delta;\n                  }\n                  else {\n                    resultPixels[k] = delta;\n                  }\n                }\n              }\n            }\n            else { //not all valid, use mask\n              for (k = 0, i = 0; i < height; i++) {\n                for (j = 0; j < width; j++, k++) {\n                  if (mask[k]) {\n                    val = 0;\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                    if (32 - bitPos < numBitsLUTQick) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                    }\n                    if (decodeLut[valTmpQuick])    // if there, move the correct number of bits and done\n                    {\n                      val = decodeLut[valTmpQuick][1];\n                      bitPos += decodeLut[valTmpQuick][0];\n                    }\n                    else {\n                      valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                      if (32 - bitPos < numBitsLUT) {\n                        valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                        valTmpQuick = valTmp;// >>> deltaBits;\n                      }\n                      node = tree;\n                      for (ii = 0; ii < numBitsLUT; ii++) {\n                        currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                        node = currentBit ? node.right : node.left;\n                        if (!(node.left || node.right)) {\n                          val = node.val;\n                          bitPos = bitPos + ii + 1;\n                          break;\n                        }\n                      }\n                    }\n    \n                    if (bitPos >= 32) {\n                      bitPos -= 32;\n                      srcPtr++;\n                      word = stuffedData[srcPtr];\n                    }\n    \n                    delta = val - offset;\n                    if (deltaEncode) {\n                      if (j > 0 && mask[k - 1]) {\n                        delta += prevVal;    // use overflow\n                      }\n                      else if (i > 0 && mask[k - width]) {\n                        delta += resultPixels[k - width];\n                      }\n                      else {\n                        delta += prevVal;\n                      }\n    \n                      delta &= 0xFF; //overflow\n                      resultPixels[k] = delta;//overflow\n                      prevVal = delta;\n                    }\n                    else {\n                      resultPixels[k] = delta;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        else {\n          for (k = 0, i = 0; i < height; i++) {\n            for (j = 0; j < width; j++) {\n              k = i * width + j;\n              if (!mask || mask[k]) {\n                for (iDim = 0; iDim < numDims; iDim++, k+=numPixels) {\n                  val = 0;\n                  valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                  valTmpQuick = valTmp;\n                  if (32 - bitPos < numBitsLUTQick) {\n                    valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                    valTmpQuick = valTmp;\n                  }\n                  if (decodeLut[valTmpQuick])\n                  {\n                    val = decodeLut[valTmpQuick][1];\n                    bitPos += decodeLut[valTmpQuick][0];\n                  }\n                  else {\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                    valTmpQuick = valTmp;\n                    if (32 - bitPos < numBitsLUT) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                      valTmpQuick = valTmp;\n                    }\n                    node = tree;\n                    for (ii = 0; ii < numBitsLUT; ii++) {\n                      currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                      node = currentBit ? node.right : node.left;\n                      if (!(node.left || node.right)) {\n                        val = node.val;\n                        bitPos = bitPos + ii + 1;\n                        break;\n                      }\n                    }\n                  }\n\n                  if (bitPos >= 32) {\n                    bitPos -= 32;\n                    srcPtr++;\n                    word = stuffedData[srcPtr];\n                  }\n\n                  delta = val - offset;\n                  resultPixels[k] = delta;\n                }\n              }\n            }\n          }\n        }\n        data.ptr = data.ptr + (srcPtr + 1) * 4 + (bitPos > 0 ? 4 : 0);\n        data.pixels.resultPixels = resultPixelsAllDim;\n        //swap for BIP layout\n        if (numDims > 1 && !useBSQForOutputDim) {\n          data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(resultPixelsAllDim, numPixels, numDims, OutPixelTypeArray);\n        }\n      },\n\n      decodeBits: function(input, data, blockDataBuffer, offset, iDim) {\n        {\n          //bitstuff encoding is 3\n          var headerInfo = data.headerInfo;\n          var fileVersion = headerInfo.fileVersion;\n          //var block = {};\n          var blockPtr = 0;\n          var viewByteLength = ((input.byteLength - data.ptr) >= 5) ? 5 : (input.byteLength - data.ptr);\n          var view = new DataView(input, data.ptr, viewByteLength);\n          var headerByte = view.getUint8(0);\n          blockPtr++;\n          var bits67 = headerByte >> 6;\n          var n = (bits67 === 0) ? 4 : 3 - bits67;\n          var doLut = (headerByte & 32) > 0 ? true : false;//5th bit\n          var numBits = headerByte & 31;\n          var numElements = 0;\n          if (n === 1) {\n            numElements = view.getUint8(blockPtr); blockPtr++;\n          } else if (n === 2) {\n            numElements = view.getUint16(blockPtr, true); blockPtr += 2;\n          } else if (n === 4) {\n            numElements = view.getUint32(blockPtr, true); blockPtr += 4;\n          } else {\n            throw \"Invalid valid pixel count type\";\n          }\n          //fix: huffman codes are bit stuffed, but not bound by data's max value, so need to use originalUnstuff\n          //offset = offset || 0;\n          var scale = 2 * headerInfo.maxZError;\n          var stuffedData, arrayBuf, store8, dataBytes, dataWords;\n          var lutArr, lutData, lutBytes, lutBitsPerElement, bitsPerPixel;\n          var zMax = headerInfo.numDims > 1 ? headerInfo.maxValues[iDim] : headerInfo.zMax;\n          if (doLut) {\n            data.counter.lut++;\n            lutBytes = view.getUint8(blockPtr);\n            lutBitsPerElement = numBits;\n            blockPtr++;\n            dataBytes = Math.ceil((lutBytes - 1) * numBits / 8);\n            dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n\n            data.ptr += blockPtr;\n            store8.set(new Uint8Array(input, data.ptr, dataBytes));\n\n            lutData = new Uint32Array(arrayBuf);\n            data.ptr += dataBytes;\n\n            bitsPerPixel = 0;\n            while ((lutBytes - 1) >>> bitsPerPixel) {\n              bitsPerPixel++;\n            }\n            dataBytes = Math.ceil(numElements * bitsPerPixel / 8);\n            dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, data.ptr, dataBytes));\n            stuffedData = new Uint32Array(arrayBuf);\n            data.ptr += dataBytes;\n            if (fileVersion >= 3) {\n              lutArr = BitStuffer.unstuffLUT2(lutData, numBits, lutBytes - 1, offset, scale, zMax);\n            }\n            else {\n              lutArr = BitStuffer.unstuffLUT(lutData, numBits, lutBytes - 1, offset, scale, zMax);\n            }\n            //lutArr.unshift(0);\n            if (fileVersion >= 3) {\n              //BitStuffer.unstuff2(block, blockDataBuffer, headerInfo.zMax);\n              BitStuffer.unstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements, lutArr);\n            }\n            else {\n              BitStuffer.unstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements, lutArr);\n            }\n          }\n          else {\n            //console.debug(\"bitstuffer\");\n            data.counter.bitstuffer++;\n            bitsPerPixel = numBits;\n            data.ptr += blockPtr;\n            if (bitsPerPixel > 0) {\n              dataBytes = Math.ceil(numElements * bitsPerPixel / 8);\n              dataWords = Math.ceil(dataBytes / 4);\n              arrayBuf = new ArrayBuffer(dataWords * 4);\n              store8 = new Uint8Array(arrayBuf);\n              store8.set(new Uint8Array(input, data.ptr, dataBytes));\n              stuffedData = new Uint32Array(arrayBuf);\n              data.ptr += dataBytes;\n              if (fileVersion >= 3) {\n                if (offset == null) {\n                  BitStuffer.originalUnstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements);\n                }\n                else {\n                  BitStuffer.unstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements, false, offset, scale, zMax);\n                }\n              }\n              else {\n                if (offset == null) {\n                  BitStuffer.originalUnstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements);\n                }\n                else {\n                  BitStuffer.unstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements, false, offset, scale, zMax);\n                }\n              }\n            }\n          }\n        }\n\n      },\n\n      readTiles: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var headerInfo = data.headerInfo;\n        var width = headerInfo.width;\n        var height = headerInfo.height;\n        var numPixels = width * height;\n        var microBlockSize = headerInfo.microBlockSize;\n        var imageType = headerInfo.imageType;\n        var dataTypeSize = Lerc2Helpers.getDataTypeSize(imageType);\n        var numBlocksX = Math.ceil(width / microBlockSize);\n        var numBlocksY = Math.ceil(height / microBlockSize);\n        data.pixels.numBlocksY = numBlocksY;\n        data.pixels.numBlocksX = numBlocksX;\n        data.pixels.ptr = 0;\n        var row = 0, col = 0, blockY = 0, blockX = 0, thisBlockHeight = 0, thisBlockWidth = 0, bytesLeft = 0, headerByte = 0, bits67 = 0, testCode = 0, outPtr = 0, outStride = 0, numBytes = 0, bytesleft = 0, z = 0, blockPtr = 0;\n        var view, block, arrayBuf, store8, rawData;\n        var blockEncoding;\n        var blockDataBuffer = new OutPixelTypeArray(microBlockSize * microBlockSize);\n        var lastBlockHeight = (height % microBlockSize) || microBlockSize;\n        var lastBlockWidth = (width % microBlockSize) || microBlockSize;\n        var offsetType, offset;\n        var numDims = headerInfo.numDims, iDim;\n        var mask = data.pixels.resultMask;\n        var resultPixels = data.pixels.resultPixels;\n        var fileVersion = headerInfo.fileVersion;\n        var fileVersionCheckNum = fileVersion >= 5 ? 14 : 15;\n        var isDiffEncoding;\n        var zMax = headerInfo.zMax;\n        //var resultPixelsAllDim = resultPixels;\n        var resultPixelsPrevDim;\n        for (blockY = 0; blockY < numBlocksY; blockY++) {\n          thisBlockHeight = (blockY !== numBlocksY - 1) ? microBlockSize : lastBlockHeight;\n          for (blockX = 0; blockX < numBlocksX; blockX++) {\n            //console.debug(\"y\" + blockY + \" x\" + blockX);\n            thisBlockWidth = (blockX !== numBlocksX - 1) ? microBlockSize : lastBlockWidth;\n\n            outPtr = blockY * width * microBlockSize + blockX * microBlockSize;\n            outStride = width - thisBlockWidth;\n\n            for (iDim = 0; iDim < numDims; iDim++) {\n              if (numDims > 1) {\n                resultPixelsPrevDim = resultPixels;\n                outPtr = blockY * width * microBlockSize + blockX * microBlockSize;\n                resultPixels = new OutPixelTypeArray(data.pixels.resultPixels.buffer, numPixels * iDim * dataTypeSize, numPixels);\n                zMax = headerInfo.maxValues[iDim];\n              } else {\n                resultPixelsPrevDim = null;\n              }\n              bytesLeft = input.byteLength - data.ptr;\n              view = new DataView(input, data.ptr, Math.min(10, bytesLeft));\n              block = {};\n              blockPtr = 0;\n              headerByte = view.getUint8(0);\n              blockPtr++;\n              isDiffEncoding = headerInfo.fileVersion >= 5 ? headerByte & 4 : 0;\n              bits67 = (headerByte >> 6) & 0xFF;\n              testCode = (headerByte >> 2) & fileVersionCheckNum;    // use bits 2345 for integrity check\n              if (testCode !== (((blockX * microBlockSize) >> 3) & fileVersionCheckNum)) {\n                throw \"integrity issue\";\n              }\n\n              if (isDiffEncoding && iDim === 0) {\n                throw \"integrity issue\";\n              }\n\n              blockEncoding = headerByte & 3;\n              if (blockEncoding > 3) {\n                data.ptr += blockPtr;\n                throw \"Invalid block encoding (\" + blockEncoding + \")\";\n              }\n              else if (blockEncoding === 2) { //constant 0\n                if (isDiffEncoding) {\n                  if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = resultPixelsPrevDim[outPtr];\n                        }\n                        outPtr++;\n                      }\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr] = resultPixelsPrevDim[outPtr];\n                        outPtr++;\n                      }\n                    }\n                  }\n                }\n                data.counter.constant++;\n                data.ptr += blockPtr;\n                continue;\n              }\n              else if (blockEncoding === 0) {  //uncompressed\n                if (isDiffEncoding) {\n                  // doesn't make sense, should not happen\n                  throw \"integrity issue\";\n                }\n                data.counter.uncompressed++;\n                data.ptr += blockPtr;\n                numBytes = thisBlockHeight * thisBlockWidth * dataTypeSize;\n                bytesleft = input.byteLength - data.ptr;\n                numBytes = numBytes < bytesleft ? numBytes : bytesleft;\n                //bit alignment\n                arrayBuf = new ArrayBuffer((numBytes % dataTypeSize) === 0 ? numBytes : (numBytes + dataTypeSize - numBytes % dataTypeSize));\n                store8 = new Uint8Array(arrayBuf);\n                store8.set(new Uint8Array(input, data.ptr, numBytes));\n                rawData = new OutPixelTypeArray(arrayBuf);\n                z = 0;\n                if (mask) {\n                  for (row = 0; row < thisBlockHeight; row++) {\n                    for (col = 0; col < thisBlockWidth; col++) {\n                      if (mask[outPtr]) {\n                        resultPixels[outPtr] = rawData[z++];\n                      }\n                      outPtr++;\n                    }\n                    outPtr += outStride;\n                  }\n                }\n                else {//all valid\n                  for (row = 0; row < thisBlockHeight; row++) {\n                    for (col = 0; col < thisBlockWidth; col++) {\n                      resultPixels[outPtr++] = rawData[z++];\n                    }\n                    outPtr += outStride;\n                  }\n                }\n                data.ptr += z * dataTypeSize;\n              }\n              else { //1 or 3\n                offsetType = Lerc2Helpers.getDataTypeUsed((isDiffEncoding && imageType < 6) ? 4 : imageType, bits67);\n                offset = Lerc2Helpers.getOnePixel(block, blockPtr, offsetType, view);\n                blockPtr += Lerc2Helpers.getDataTypeSize(offsetType);\n                if (blockEncoding === 3) //constant offset value\n                {\n                  data.ptr += blockPtr;\n                  data.counter.constantoffset++;\n                  //you can delete the following resultMask case in favor of performance because val is constant and users use nodata mask, otherwise nodatavalue post processing handles it too.\n                  //while the above statement is true, we're not doing it as we want to keep invalid pixel value at 0 rather than arbitrary values\n                  if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = isDiffEncoding ? Math.min(zMax, resultPixelsPrevDim[outPtr] + offset) : offset;\n                        }\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr] = isDiffEncoding ? Math.min(zMax, resultPixelsPrevDim[outPtr] + offset) : offset;\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                }\n                else { //bitstuff encoding is 3\n                  data.ptr += blockPtr;\n                  //heavy lifting\n                  Lerc2Helpers.decodeBits(input, data, blockDataBuffer, offset, iDim);\n                  blockPtr = 0;\n                  // duplicate code to favor performance, diff encoding is for multidimension only\n                  if (isDiffEncoding) {\n                    if (mask) {\n                      for (row = 0; row < thisBlockHeight; row++) {\n                        for (col = 0; col < thisBlockWidth; col++) {\n                          if (mask[outPtr]) {\n                            resultPixels[outPtr] = blockDataBuffer[blockPtr++] + resultPixelsPrevDim[outPtr];\n                          }\n                          outPtr++;\n                        }\n                        outPtr += outStride;\n                      }\n                    }\n                    else {\n                      for (row = 0; row < thisBlockHeight; row++) {\n                        for (col = 0; col < thisBlockWidth; col++) {\n                          resultPixels[outPtr] = blockDataBuffer[blockPtr++] + resultPixelsPrevDim[outPtr];\n                          outPtr++;\n                        }\n                        outPtr += outStride;\n                      }\n                    }\n                  }\n                  else if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = blockDataBuffer[blockPtr++];\n                        }\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr++] = blockDataBuffer[blockPtr++];\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        //swap for BIP: it's always easier for clients to handle BSQ so we keep existing logic and introduce a swap here to minimze changes\n        if (numDims > 1 && !useBSQForOutputDim) {\n          data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(data.pixels.resultPixels, numPixels, numDims, OutPixelTypeArray);\n        }\n      },\n\n      /*****************\n      *  private methods (helper methods)\n      *****************/\n\n      formatFileInfo: function(data) {\n        return {\n          \"fileIdentifierString\": data.headerInfo.fileIdentifierString,\n          \"fileVersion\": data.headerInfo.fileVersion,\n          \"imageType\": data.headerInfo.imageType,\n          \"height\": data.headerInfo.height,\n          \"width\": data.headerInfo.width,\n          \"numValidPixel\": data.headerInfo.numValidPixel,\n          \"microBlockSize\": data.headerInfo.microBlockSize,\n          \"blobSize\": data.headerInfo.blobSize,\n          \"maxZError\": data.headerInfo.maxZError,\n          \"pixelType\": Lerc2Helpers.getPixelType(data.headerInfo.imageType),\n          \"eofOffset\": data.eofOffset,\n          \"mask\": data.mask ? {\n            \"numBytes\": data.mask.numBytes\n          } : null,\n          \"pixels\": {\n            \"numBlocksX\": data.pixels.numBlocksX,\n            \"numBlocksY\": data.pixels.numBlocksY,\n            //\"numBytes\": data.pixels.numBytes,\n            \"maxValue\": data.headerInfo.zMax,\n            \"minValue\": data.headerInfo.zMin,\n            \"noDataValue\": data.noDataValue\n          }\n        };\n      },\n\n      constructConstantSurface: function(data, useBSQForOutputDim) {\n        var val = data.headerInfo.zMax;\n        var valMin = data.headerInfo.zMin;\n        var maxValues = data.headerInfo.maxValues;\n        var numDims = data.headerInfo.numDims;\n        var numPixels = data.headerInfo.height * data.headerInfo.width;\n        var i = 0, k = 0, nStart = 0;\n        var mask = data.pixels.resultMask;\n        var resultPixels = data.pixels.resultPixels;\n        if (mask) {\n          if (numDims > 1) {\n            if (useBSQForOutputDim) {\n              for (i = 0; i < numDims; i++) {\n                nStart = i * numPixels;\n                val = maxValues[i];\n                for (k = 0; k < numPixels; k++) {\n                  if (mask[k]) {\n                    resultPixels[nStart + k] = val;\n                  }\n                }\n              }  \n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k * numDims;\n                  for (i = 0; i < numDims; i++) {\n                    resultPixels[nStart + numDims] = maxValues[i];\n                  }\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels; k++) {\n              if (mask[k]) {\n                resultPixels[k] = val;\n              }\n            }\n          }\n        }\n        else {\n          if (numDims > 1 && valMin !== val) {\n            if (useBSQForOutputDim) {\n              for (i = 0; i < numDims; i++) {\n                nStart = i * numPixels;\n                val = maxValues[i];\n                for (k = 0; k < numPixels; k++) {\n                  resultPixels[nStart + k] = val;\n                }\n              }\n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                nStart = k * numDims;\n                for (i = 0; i < numDims; i++) {\n                  resultPixels[nStart + i] = maxValues[i];\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels * numDims; k++) {\n              resultPixels[k] = val;\n            }\n          }\n        }\n        return;\n      },\n\n      getDataTypeArray: function(t) {\n        var tp;\n        switch (t) {\n          case 0: //char\n            tp = Int8Array;\n            break;\n          case 1: //byte\n            tp = Uint8Array;\n            break;\n          case 2: //short\n            tp = Int16Array;\n            break;\n          case 3: //ushort\n            tp = Uint16Array;\n            break;\n          case 4:\n            tp = Int32Array;\n            break;\n          case 5:\n            tp = Uint32Array;\n            break;\n          case 6:\n            tp = Float32Array;\n            break;\n          case 7:\n            tp = Float64Array;\n            break;\n          default:\n            tp = Float32Array;\n        }\n        return tp;\n      },\n\n      getPixelType: function(t) {\n        var tp;\n        switch (t) {\n          case 0: //char\n            tp = \"S8\";\n            break;\n          case 1: //byte\n            tp = \"U8\";\n            break;\n          case 2: //short\n            tp = \"S16\";\n            break;\n          case 3: //ushort\n            tp = \"U16\";\n            break;\n          case 4:\n            tp = \"S32\";\n            break;\n          case 5:\n            tp = \"U32\";\n            break;\n          case 6:\n            tp = \"F32\";\n            break;\n          case 7:\n            tp = \"F64\";\n            break;\n          default:\n            tp = \"F32\";\n        }\n        return tp;\n      },\n\n      isValidPixelValue: function(t, val) {\n        if (val == null) {\n          return false;\n        }\n        var isValid;\n        switch (t) {\n          case 0: //char\n            isValid = val >= -128 && val <= 127;\n            break;\n          case 1: //byte  (unsigned char)\n            isValid = val >= 0 && val <= 255;\n            break;\n          case 2: //short\n            isValid = val >= -32768 && val <= 32767;\n            break;\n          case 3: //ushort\n            isValid = val >= 0 && val <= 65536;\n            break;\n          case 4: //int 32\n            isValid = val >= -2147483648 && val <= 2147483647;\n            break;\n          case 5: //uinit 32\n            isValid = val >= 0 && val <= 4294967296;\n            break;\n          case 6:\n            isValid = val >= -3.4027999387901484e+38 && val <= 3.4027999387901484e+38;\n            break;\n          case 7:\n            isValid = val >= -1.7976931348623157e+308 && val <= 1.7976931348623157e+308;\n            break;\n          default:\n            isValid = false;\n        }\n        return isValid;\n      },\n\n      getDataTypeSize: function(t) {\n        var s = 0;\n        switch (t) {\n          case 0: //ubyte\n          case 1: //byte\n            s = 1;\n            break;\n          case 2: //short\n          case 3: //ushort\n            s = 2;\n            break;\n          case 4:\n          case 5:\n          case 6:\n            s = 4;\n            break;\n          case 7:\n            s = 8;\n            break;\n          default:\n            s = t;\n        }\n        return s;\n      },\n\n      getDataTypeUsed: function(dt, tc) {\n        var t = dt;\n        switch (dt) {\n          case 2: //short\n          case 4: //long\n            t = dt - tc;\n            break;\n          case 3: //ushort\n          case 5: //ulong\n            t = dt - 2 * tc;\n            break;\n          case 6: //float\n            if (0 === tc) {\n              t = dt;\n            }\n            else if (1 === tc) {\n              t = 2;\n            }\n            else {\n              t = 1;//byte\n            }\n            break;\n          case 7: //double\n            if (0 === tc) {\n              t = dt;\n            }\n            else {\n              t = dt - 2 * tc + 1;\n            }\n            break;\n          default:\n            t = dt;\n            break;\n        }\n        return t;\n      },\n\n      getOnePixel: function(block, blockPtr, offsetType, view) {\n        var temp = 0;\n        switch (offsetType) {\n          case 0: //char\n            temp = view.getInt8(blockPtr);\n            break;\n          case 1: //byte\n            temp = view.getUint8(blockPtr);\n            break;\n          case 2:\n            temp = view.getInt16(blockPtr, true);\n            break;\n          case 3:\n            temp = view.getUint16(blockPtr, true);\n            break;\n          case 4:\n            temp = view.getInt32(blockPtr, true);\n            break;\n          case 5:\n            temp = view.getUInt32(blockPtr, true);\n            break;\n          case 6:\n            temp = view.getFloat32(blockPtr, true);\n            break;\n          case 7:\n            temp = view.getFloat64(blockPtr, true);\n            break;\n          default:\n            throw (\"the decoder does not understand this pixel type\");\n        }\n        return temp;\n      },\n\n      swapDimensionOrder: function(pixels, numPixels, numDims, OutPixelTypeArray, inputIsBIP) {\n        var i = 0, j = 0, iDim = 0, temp = 0, swap = pixels;\n        if (numDims > 1) {\n          swap = new OutPixelTypeArray(numPixels * numDims);\n          if (inputIsBIP) {\n            for (i=0; i<numPixels; i++) {\n              temp = i;\n              for (iDim=0; iDim < numDims; iDim++, temp += numPixels) {\n                swap[temp] = pixels[j++];\n              }\n            }  \n          }\n          else {\n            for (i=0; i<numPixels; i++) {\n              temp = i;\n              for (iDim=0; iDim < numDims; iDim++, temp += numPixels) {\n                swap[j++] = pixels[temp];\n              }\n            }\n          }\n        }\n        return swap;\n      }\n    };\n\n    /***************************************************\n    *private class for a tree node. Huffman code is in Lerc2Helpers\n    ****************************************************/\n    var TreeNode = function(val, left, right) {\n      this.val = val;\n      this.left = left;\n      this.right = right;\n    };\n\n    var Lerc2Decode = {\n      /*\n      * ********removed options compared to LERC1. We can bring some of them back if needed.\n       * removed pixel type. LERC2 is typed and doesn't require user to give pixel type\n       * changed encodedMaskData to maskData. LERC2 's js version make it faster to use maskData directly.\n       * removed returnMask. mask is used by LERC2 internally and is cost free. In case of user input mask, it's returned as well and has neglible cost.\n       * removed nodatavalue. Because LERC2 pixels are typed, nodatavalue will sacrify a useful value for many types (8bit, 16bit) etc,\n       *       user has to be knowledgable enough about raster and their data to avoid usability issues. so nodata value is simply removed now.\n       *       We can add it back later if their's a clear requirement.\n       * removed encodedMask. This option was not implemented in LercDecode. It can be done after decoding (less efficient)\n       * removed computeUsedBitDepths.\n       *\n       *\n       * response changes compared to LERC1\n       * 1. encodedMaskData is not available\n       * 2. noDataValue is optional (returns only if user's noDataValue is with in the valid data type range)\n       * 3. maskData is always available\n      */\n      /*****************\n      *  public properties\n      ******************/\n      //HUFFMAN_LUT_BITS_MAX: 12, //use 2^12 lut, not configurable\n\n      /*****************\n      *  public methods\n      *****************/\n\n      /**\n       * Decode a LERC2 byte stream and return an object containing the pixel data and optional metadata.\n       *\n       * @param {ArrayBuffer} input The LERC input byte stream\n       * @param {object} [options] options Decoding options\n       * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid LERC file is expected at that position\n       * @param {boolean} [options.returnFileInfo] If true, the return value will have a fileInfo property that contains metadata obtained from the LERC headers and the decoding process\n       * @param {boolean} [options.returnPixelInterleavedDims]  If true, returned dimensions are pixel-interleaved, a.k.a [p1_dim0, p1_dim1, p1_dimn, p2_dim0...], default is [p1_dim0, p2_dim0, ..., p1_dim1, p2_dim1...]\n       */\n      decode: function(/*byte array*/ input, /*object*/ options) {\n        //currently there's a bug in the sparse array, so please do not set to false\n        options = options || {};\n        var noDataValue = options.noDataValue;\n\n        //initialize\n        var i = 0, data = {};\n        data.ptr = options.inputOffset || 0;\n        data.pixels = {};\n\n        // File header\n        if (!Lerc2Helpers.readHeaderInfo(input, data)) {\n          return;\n        }\n\n        var headerInfo = data.headerInfo;\n        var fileVersion = headerInfo.fileVersion;\n        var OutPixelTypeArray = Lerc2Helpers.getDataTypeArray(headerInfo.imageType);\n\n        // version check\n        if (fileVersion > 5) {\n          throw \"unsupported lerc version 2.\" + fileVersion;\n        }\n\n        // Mask Header\n        Lerc2Helpers.readMask(input, data);\n        if (headerInfo.numValidPixel !== headerInfo.width * headerInfo.height && !data.pixels.resultMask) {\n          data.pixels.resultMask = options.maskData;\n        }\n\n        var numPixels = headerInfo.width * headerInfo.height;\n        data.pixels.resultPixels = new OutPixelTypeArray(numPixels * headerInfo.numDims);\n\n        data.counter = {\n          onesweep: 0,\n          uncompressed: 0,\n          lut: 0,\n          bitstuffer: 0,\n          constant: 0,\n          constantoffset: 0\n        };\n        var useBSQForOutputDim = !options.returnPixelInterleavedDims;\n        if (headerInfo.numValidPixel !== 0) {\n          //not tested\n          if (headerInfo.zMax === headerInfo.zMin) //constant surface\n          {\n            Lerc2Helpers.constructConstantSurface(data, useBSQForOutputDim);\n          }\n          else if (fileVersion >= 4 && Lerc2Helpers.checkMinMaxRanges(input, data)) {\n            Lerc2Helpers.constructConstantSurface(data, useBSQForOutputDim);\n          }\n          else {\n            var view = new DataView(input, data.ptr, 2);\n            var bReadDataOneSweep = view.getUint8(0);\n            data.ptr++;\n            if (bReadDataOneSweep) {\n              //console.debug(\"OneSweep\");\n              Lerc2Helpers.readDataOneSweep(input, data, OutPixelTypeArray, useBSQForOutputDim);\n            }\n            else {\n              //lerc2.1: //bitstuffing + lut\n              //lerc2.2: //bitstuffing + lut + huffman\n              //lerc2.3: new bitstuffer\n              if (fileVersion > 1 && headerInfo.imageType <= 1 && Math.abs(headerInfo.maxZError - 0.5) < 0.00001) {\n                //this is 2.x plus 8 bit (unsigned and signed) data, possiblity of Huffman\n                var flagHuffman = view.getUint8(1);\n                data.ptr++;\n                data.encodeMode = flagHuffman;\n                if (flagHuffman > 2 || (fileVersion < 4 && flagHuffman > 1)) {\n                  throw \"Invalid Huffman flag \" + flagHuffman;\n                }\n                if (flagHuffman) {//1 - delta Huffman, 2 - Huffman\n                  //console.log(\"Huffman\");\n                  Lerc2Helpers.readHuffman(input, data, OutPixelTypeArray, useBSQForOutputDim);\n                }\n                else {\n                  //console.log(\"Tiles\");\n                  Lerc2Helpers.readTiles(input, data, OutPixelTypeArray, useBSQForOutputDim);\n                }\n              }\n              else { //lerc2.x non-8 bit data\n                //console.log(\"Tiles\");\n                Lerc2Helpers.readTiles(input, data, OutPixelTypeArray, useBSQForOutputDim);\n              }\n            }\n          }\n        }\n\n        data.eofOffset = data.ptr;\n        var diff;\n        if (options.inputOffset) {\n          diff = data.headerInfo.blobSize + options.inputOffset - data.ptr;\n          if (Math.abs(diff) >= 1) {\n            //console.debug(\"incorrect eof: dataptr \" + data.ptr + \" offset \" + options.inputOffset + \" blobsize \" + data.headerInfo.blobSize + \" diff: \" + diff);\n            data.eofOffset = options.inputOffset + data.headerInfo.blobSize;\n          }\n        }\n        else {\n          diff = data.headerInfo.blobSize - data.ptr;\n          if (Math.abs(diff) >= 1) {\n            //console.debug(\"incorrect first band eof: dataptr \" + data.ptr + \" blobsize \" + data.headerInfo.blobSize + \" diff: \" + diff);\n            data.eofOffset = data.headerInfo.blobSize;\n          }\n        }\n\n        var result = {\n          width: headerInfo.width,\n          height: headerInfo.height,\n          pixelData: data.pixels.resultPixels,\n          minValue: headerInfo.zMin,\n          maxValue: headerInfo.zMax,\n          validPixelCount: headerInfo.numValidPixel,\n          dimCount: headerInfo.numDims,\n          dimStats: {\n            minValues: headerInfo.minValues,\n            maxValues: headerInfo.maxValues\n          },\n          maskData: data.pixels.resultMask\n          //noDataValue: noDataValue\n        };\n\n        //we should remove this if there's no existing client\n        //optional noDataValue processing, it's user's responsiblity\n        if (data.pixels.resultMask && Lerc2Helpers.isValidPixelValue(headerInfo.imageType, noDataValue)) {\n          var mask = data.pixels.resultMask;\n          for (i = 0; i < numPixels; i++) {\n            if (!mask[i]) {\n              result.pixelData[i] = noDataValue;\n            }\n          }\n          result.noDataValue = noDataValue;\n        }\n        data.noDataValue = noDataValue;\n        if (options.returnFileInfo) {\n          result.fileInfo = Lerc2Helpers.formatFileInfo(data);\n        }\n        return result;\n      },\n\n      getBandCount: function(/*byte array*/ input) {\n        var count = 0;\n        var i = 0;\n        var temp = {};\n        temp.ptr = 0;\n        temp.pixels = {};\n        while (i < input.byteLength - 58) {\n          Lerc2Helpers.readHeaderInfo(input, temp);\n          i += temp.headerInfo.blobSize;\n          count++;\n          temp.ptr = i;\n        }\n        return count;\n      }\n    };\n\n    return Lerc2Decode;\n  })();\n\n  var isPlatformLittleEndian = (function() {\n    var a = new ArrayBuffer(4);\n    var b = new Uint8Array(a);\n    var c = new Uint32Array(a);\n    c[0] = 1;\n    return b[0] === 1;\n  })();\n\n  var Lerc = {\n    /************wrapper**********************************************/\n    /**\n     * A wrapper for decoding both LERC1 and LERC2 byte streams capable of handling multiband pixel blocks for various pixel types.\n     *\n     * @alias module:Lerc\n     * @param {ArrayBuffer} input The LERC input byte stream\n     * @param {object} [options] The decoding options below are optional.\n     * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid Lerc file is expected at that position.\n     * @param {string} [options.pixelType] (LERC1 only) Default value is F32. Valid pixel types for input are U8/S8/S16/U16/S32/U32/F32.\n     * @param {number} [options.noDataValue] (LERC1 only). It is recommended to use the returned mask instead of setting this value.\n     * @param {boolean} [options.returnPixelInterleavedDims] (nDim LERC2 only) If true, returned dimensions are pixel-interleaved, a.k.a [p1_dim0, p1_dim1, p1_dimn, p2_dim0...], default is [p1_dim0, p2_dim0, ..., p1_dim1, p2_dim1...]\n     * @returns {{width, height, pixels, pixelType, mask, statistics}}\n       * @property {number} width Width of decoded image.\n       * @property {number} height Height of decoded image.\n       * @property {array} pixels [band1, band2, …] Each band is a typed array of width*height.\n       * @property {string} pixelType The type of pixels represented in the output.\n       * @property {mask} mask Typed array with a size of width*height, or null if all pixels are valid.\n       * @property {array} statistics [statistics_band1, statistics_band2, …] Each element is a statistics object representing min and max values\n    **/\n    decode: function(encodedData, options) {\n      if (!isPlatformLittleEndian) {\n        throw \"Big endian system is not supported.\";\n      }\n      options = options || {};\n      var inputOffset = options.inputOffset || 0;\n      var fileIdView = new Uint8Array(encodedData, inputOffset, 10);\n      var fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n      var lerc, majorVersion;\n      if (fileIdentifierString.trim() === \"CntZImage\") {\n        lerc = LercDecode;\n        majorVersion = 1;\n      }\n      else if (fileIdentifierString.substring(0, 5) === \"Lerc2\") {\n        lerc = Lerc2Decode;\n        majorVersion = 2;\n      }\n      else {\n        throw \"Unexpected file identifier string: \" + fileIdentifierString;\n      }\n\n      var iPlane = 0, eof = encodedData.byteLength - 10, encodedMaskData, bandMasks = [], bandMask, maskData;\n      var decodedPixelBlock = {\n        width: 0,\n        height: 0,\n        pixels: [],\n        pixelType: options.pixelType,\n        mask: null,\n        statistics: []\n      };\n      var uniqueBandMaskCount = 0;\n\n      while (inputOffset < eof) {\n        var result = lerc.decode(encodedData, {\n          inputOffset: inputOffset,//for both lerc1 and lerc2\n          encodedMaskData: encodedMaskData,//lerc1 only\n          maskData: maskData,//lerc2 only\n          returnMask: iPlane === 0 ? true : false,//lerc1 only\n          returnEncodedMask: iPlane === 0 ? true : false,//lerc1 only\n          returnFileInfo: true,//for both lerc1 and lerc2\n          returnPixelInterleavedDims: options.returnPixelInterleavedDims,//for ndim lerc2 only\n          pixelType: options.pixelType || null,//lerc1 only\n          noDataValue: options.noDataValue || null//lerc1 only\n        });\n\n        inputOffset = result.fileInfo.eofOffset;\n        maskData = result.maskData;//lerc2\n        if (iPlane === 0) {\n          encodedMaskData = result.encodedMaskData;//lerc1\n          decodedPixelBlock.width = result.width;\n          decodedPixelBlock.height = result.height;\n          decodedPixelBlock.dimCount = result.dimCount || 1;\n          //decodedPixelBlock.dimStats = decodedPixelBlock.dimStats;\n          decodedPixelBlock.pixelType = result.pixelType || result.fileInfo.pixelType;\n          decodedPixelBlock.mask = maskData;\n        }\n        if (majorVersion > 1) {\n          if (maskData) {\n            bandMasks.push(maskData);\n          }\n          if (result.fileInfo.mask && result.fileInfo.mask.numBytes > 0) {\n            uniqueBandMaskCount++;\n          }\n        }\n\n        iPlane++;\n        decodedPixelBlock.pixels.push(result.pixelData);\n        decodedPixelBlock.statistics.push({\n          minValue: result.minValue,\n          maxValue: result.maxValue,\n          noDataValue: result.noDataValue,\n          dimStats: result.dimStats\n        });\n      }\n      var i, j, numPixels;\n      if (majorVersion > 1 && uniqueBandMaskCount > 1) {\n        numPixels = decodedPixelBlock.width * decodedPixelBlock.height;\n        decodedPixelBlock.bandMasks = bandMasks;\n        maskData = new Uint8Array(numPixels);\n        maskData.set(bandMasks[0]);\n        for (i = 1; i < bandMasks.length; i++) {\n          bandMask = bandMasks[i];\n          for (j = 0; j < numPixels; j++) {\n            maskData[j] = maskData[j] & bandMask[j];\n          }\n        }\n        decodedPixelBlock.maskData = maskData;\n      }\n\n      return decodedPixelBlock;\n    }\n  };\n\n  if (typeof define === \"function\" && define.amd) {/* jshint ignore:line */\n    //amd loaders such as dojo and requireJS\n    //http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition\n    define([], function() { return Lerc; });/* jshint ignore:line */\n  }\n  else if (typeof module !== \"undefined\" && module.exports) {/* jshint ignore:line */\n    //commonJS module 1.0/1.1/1.1.1 systems, such as nodeJS\n    //http://wiki.commonjs.org/wiki/Modules\n    module.exports = Lerc;/* jshint ignore:line */\n  }\n  else {\n    //assign to this, most likely window\n    this.Lerc = Lerc;\n  }\n\n})();\n","let init;\nlet instance;\nlet heap;\nconst IMPORT_OBJECT = {\n  env: {\n    emscripten_notify_memory_growth: function (index) {\n      heap = new Uint8Array(instance.exports.memory.buffer);\n    }\n  }\n};\n/**\r\n * ZSTD (Zstandard) decoder.\r\n */\nclass ZSTDDecoder {\n  init() {\n    if (init) return init;\n    if (typeof fetch !== 'undefined') {\n      // Web.\n      init = fetch('data:application/wasm;base64,' + wasm).then(response => response.arrayBuffer()).then(arrayBuffer => WebAssembly.instantiate(arrayBuffer, IMPORT_OBJECT)).then(this._init);\n    } else {\n      // Node.js.\n      init = WebAssembly.instantiate(Buffer.from(wasm, 'base64'), IMPORT_OBJECT).then(this._init);\n    }\n    return init;\n  }\n  _init(result) {\n    instance = result.instance;\n    IMPORT_OBJECT.env.emscripten_notify_memory_growth(0); // initialize heap.\n  }\n\n  decode(array, uncompressedSize = 0) {\n    if (!instance) throw new Error(`ZSTDDecoder: Await .init() before decoding.`);\n    // Write compressed data into WASM memory.\n    const compressedSize = array.byteLength;\n    const compressedPtr = instance.exports.malloc(compressedSize);\n    heap.set(array, compressedPtr);\n    // Decompress into WASM memory.\n    uncompressedSize = uncompressedSize || Number(instance.exports.ZSTD_findDecompressedSize(compressedPtr, compressedSize));\n    const uncompressedPtr = instance.exports.malloc(uncompressedSize);\n    const actualSize = instance.exports.ZSTD_decompress(uncompressedPtr, uncompressedSize, compressedPtr, compressedSize);\n    // Read decompressed data and free WASM memory.\n    const dec = heap.slice(uncompressedPtr, uncompressedPtr + actualSize);\n    instance.exports.free(compressedPtr);\n    instance.exports.free(uncompressedPtr);\n    return dec;\n  }\n}\n/**\r\n * BSD License\r\n *\r\n * For Zstandard software\r\n *\r\n * Copyright (c) 2016-present, Yann Collet, Facebook, Inc. All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *    list of conditions and the following disclaimer.\r\n *\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n *  * Neither the name Facebook nor the names of its contributors may be used to\r\n *    endorse or promote products derived from this software without specific\r\n *    prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\r\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\r\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\n// wasm:begin\nconst wasm = '';\n// wasm:end\n\nexport { ZSTDDecoder };\n//# sourceMappingURL=zstddec.modern.js.map\n","import { inflate } from 'pako';\nimport Lerc from 'lerc';\nimport { ZSTDDecoder } from 'zstddec';\nimport BaseDecoder from './basedecoder.js';\nimport { LercParameters, LercAddCompression } from '../globals.js';\n\nexport const zstd = new ZSTDDecoder();\n\nexport default class LercDecoder extends BaseDecoder {\n  constructor(fileDirectory) {\n    super();\n\n    this.planarConfiguration = typeof fileDirectory.PlanarConfiguration !== 'undefined' ? fileDirectory.PlanarConfiguration : 1;\n    this.samplesPerPixel = typeof fileDirectory.SamplesPerPixel !== 'undefined' ? fileDirectory.SamplesPerPixel : 1;\n\n    this.addCompression = fileDirectory.LercParameters[LercParameters.AddCompression];\n  }\n\n  decodeBlock(buffer) {\n    switch (this.addCompression) {\n      case LercAddCompression.None:\n        break;\n      case LercAddCompression.Deflate:\n        buffer = inflate(new Uint8Array(buffer)).buffer; // eslint-disable-line no-param-reassign, prefer-destructuring\n        break;\n      case LercAddCompression.Zstandard:\n        buffer = zstd.decode(new Uint8Array(buffer)).buffer; // eslint-disable-line no-param-reassign, prefer-destructuring\n        break;\n      default:\n        throw new Error(`Unsupported LERC additional compression method identifier: ${this.addCompression}`);\n    }\n\n    const lercResult = Lerc.decode(buffer, { returnPixelInterleavedDims: this.planarConfiguration === 1 });\n    const lercData = lercResult.pixels[0];\n    return lercData.buffer;\n  }\n}\n"],"names":["CntZImage","uncompressPixelValues","formatFileInfo","computeUsedBitDepths","parse","unstuff","a","b","LercDecode","input","options","skipMask","encodedMaskData","parsedData","inputOffset","noDataValue","defaultNoDataValue","uncompressedData","pixelType","Float32Array","returnMask","result","width","height","pixelData","resultPixels","minValue","maxValue","pixels","resultMask","maskData","returnEncodedMask","mask","bitset","returnFileInfo","fileInfo","bitDepths","data","TypedArrayClass","maskBitset","storeDecodedMask","currentValue","blockIdx","numX","numBlocksX","numY","numBlocksY","blockWidth","Math","floor","blockHeight","scale","maxZError","Number","MAX_VALUE","Uint8Array","xx","yy","blockDataBuffer","y","thisBlockHeight","x","thisBlockWidth","blockData","blockPtr","constValue","maskByte","outPtr","outStride","block","blocks","encoding","rawData","stuffedData","bitsPerPixel","numValidPixels","offset","fileIdentifierString","fileVersion","imageType","eofOffset","numBytes","numBlocks","i","float32","Object","keys","fp","fileIdView","String","fromCharCode","apply","trim","view","DataView","getInt32","getUint32","getFloat64","getFloat32","ceil","cnt","getInt16","ip","op","getUint8","val","length","actualNumBlocksX","actualNumBlocksY","Array","blockI","blockY","blockX","size","bytesLeft","byteLength","min","headerByte","offsetType","getInt8","numValidPixelsType","getUint16","arrayBuf","numPixels","ArrayBuffer","set","dataBytes","dataWords","Uint32Array","src","dest","o","n","buffer","bitMask","bitsLeft","nmax","numInvalidTailBytes","missingBits","Lerc2Decode","BitStuffer","lutArr","unshift","bitPos","Lerc2Helpers","HUFFMAN_LUT_BITS_MAX","computeChecksumFletcher32","sum1","sum2","len","words","tlen","readHeaderInfo","ptr","headerInfo","lastIndexOf","keyLength","checksum","numDims","numValidPixel","microBlockSize","blobSize","zMin","zMax","this","checkMinMaxRanges","OutPixelTypeArray","getDataTypeArray","rangeBytes","getDataTypeSize","minValues","readSubArray","maxValues","equal","readMask","mb","k","readDataOneSweep","useBSQForOutputDim","swapDimensionOrder","z","nStart","readHuffmanTree","BITS_MAX","i0","i1","decodeBits","j","codeTable","first","second","word","srcPtr","numBitsLUT","numBitsLUTQick","tree","TreeNode","max","entry","code","numEntries","jj","node","decodeLut","right","left","readHuffman","delta","valTmp","valTmpQuick","ii","huffmanInfo","prevVal","iDim","deltaEncode","encodeMode","resultPixelsAllDim","viewByteLength","bits67","doLut","numBits","numElements","store8","lutData","lutBytes","counter","lut","bitstuffer","readTiles","dataTypeSize","blockEncoding","isDiffEncoding","resultPixelsPrevDim","row","col","bytesleft","lastBlockHeight","lastBlockWidth","fileVersionCheckNum","uncompressed","getDataTypeUsed","getOnePixel","constantoffset","constant","getPixelType","constructConstantSurface","valMin","t","tp","Int8Array","Int16Array","Uint16Array","Int32Array","Float64Array","isValidPixelValue","isValid","s","dt","tc","temp","getUInt32","inputIsBIP","swap","decode","onesweep","diff","returnPixelInterleavedDims","bReadDataOneSweep","abs","flagHuffman","validPixelCount","dimCount","dimStats","getBandCount","count","isPlatformLittleEndian","Lerc","encodedData","lerc","majorVersion","substring","bandMask","iPlane","eof","bandMasks","decodedPixelBlock","statistics","uniqueBandMaskCount","push","module","exports","init","instance","heap","IMPORT_OBJECT","env","emscripten_notify_memory_growth","index","memory","wasm","zstd","fetch","then","response","arrayBuffer","WebAssembly","instantiate","_init","Buffer","from","array","uncompressedSize","Error","compressedSize","compressedPtr","malloc","ZSTD_findDecompressedSize","uncompressedPtr","actualSize","ZSTD_decompress","dec","slice","free","LercDecoder","BaseDecoder","constructor","fileDirectory","super","planarConfiguration","PlanarConfiguration","samplesPerPixel","SamplesPerPixel","addCompression","LercParameters","AddCompression","decodeBlock","LercAddCompression","None","Deflate","inflate","Zstandard"],"mappings":";;AAgCA,WAKE,IAKMA,EAyEAC,EA+HAC,EAyBAC,EAiBAC,EA0JAC,EAstDAC,EACAC,EAxmEFC,GAKER,EAAY,CAEhBA,oBAA+B,qBAiCrBA,OAAS,SAASS,EAAOC,GAGjC,IAAIC,GAFJD,EAAUA,GAAW,CAAE,GAEAE,iBAAgD,OAA5BF,EAAQE,gBAC/CC,EAAaT,EAAMK,EAAOC,EAAQI,aAAe,EAAGH,GAEpDI,EAAuC,OAAxBL,EAAQK,YAAwBL,EAAQK,YAAcf,EAAUgB,mBAE/EC,EAAmBhB,EAAsBY,EAAYH,EAAQQ,WAAaC,aAC5ET,EAAQE,gBAAiBG,EAAaL,EAAQU,YAE5CC,EAAS,CACXC,MAAOT,EAAWS,MAClBC,OAAQV,EAAWU,OACnBC,UAAWP,EAAiBQ,aAC5BC,SAAUT,EAAiBS,SAC3BC,SAAUd,EAAWe,OAAOD,SAC5BZ,eAkBK,OAfHE,EAAiBY,aACnBR,EAAOS,SAAWb,EAAiBY,YAGjCnB,EAAQqB,mBAAqBlB,EAAWmB,OAC1CX,EAAOT,gBAAkBC,EAAWmB,KAAKC,OAASpB,EAAWmB,KAAKC,OAAS,MAGzEvB,EAAQwB,iBACHb,EAAAc,SAAWjC,EAAeW,GAC7BH,EAAQP,uBACHkB,EAAAc,SAASC,UAAYjC,EAAqBU,KAI9CQ,CACR,GAEGpB,EAAwB,SAASoC,EAAMC,EAAiBC,EAAYxB,EAAayB,GACnF,IAMiCC,EAG7BhB,EAAcI,EATda,EAAW,EACXC,EAAON,EAAKT,OAAOgB,WACnBC,EAAOR,EAAKT,OAAOkB,WACnBC,EAAaC,KAAKC,MAAMZ,EAAKf,MAAQqB,GACrCO,EAAcF,KAAKC,MAAMZ,EAAKd,OAASsB,GACvCM,EAAQ,EAAId,EAAKe,UACjB1B,EAAW2B,OAAOC,UACtBf,EAAaA,IAAgBF,EAAKL,KAAQK,EAAKL,KAAKC,OAAS,MAG7DR,EAAe,IAAIa,EAAgBD,EAAKf,MAAQe,EAAKd,QACjDiB,GAAoBD,IACtBV,EAAa,IAAI0B,WAAWlB,EAAKf,MAAQe,EAAKd,SAKhD,IAHA,IAEIiC,EAAIC,EAFJC,EAAkB,IAAIvC,aAAa4B,EAAaG,GAG3CS,EAAI,EAAGA,GAAKd,EAAMc,IAAK,CAC9B,IAAIC,EAAmBD,IAAMd,EAAQK,EAAeb,EAAKd,OAASsB,EAClE,GAAwB,IAApBe,EAGJ,IAAA,IAASC,EAAI,EAAGA,GAAKlB,EAAMkB,IAAK,CAC9B,IAAIC,EAAkBD,IAAMlB,EAAQI,EAAcV,EAAKf,MAAQqB,EAC/D,GAAuB,IAAnBmB,EAAJ,CAIA,IAKIC,EAAWC,EAAUC,EAsBrBC,EA3BAC,EAASR,EAAItB,EAAKf,MAAQ4B,EAAcW,EAAId,EAC5CqB,EAAY/B,EAAKf,MAAQwC,EAEzBO,EAAQhC,EAAKT,OAAO0C,OAAO5B,GAyB/B,GAtBI2B,EAAME,SAAW,GAEI,IAAnBF,EAAME,SAERR,EAAYM,EAAMG,SAGlBnE,EAAQgE,EAAMI,YAAaJ,EAAMK,aAAcL,EAAMM,eAAgBN,EAAMO,OAAQzB,EAAOO,EAAiBrB,EAAKT,OAAOD,UAC3GoC,EAAAL,GAEHM,EAAA,GAIEC,EAFa,IAAnBI,EAAME,SAEA,EAIAF,EAAMO,OAIjBrC,EACF,IAAKkB,EAAK,EAAGA,EAAKG,EAAiBH,IAAM,CAMvC,IALa,EAATU,IAESD,EAAA3B,EAAW4B,GAAU,GAChCD,IAAsB,EAATC,GAEVX,EAAK,EAAGA,EAAKM,EAAgBN,IACjB,EAATW,IAEOD,EAAA3B,EAAW4B,GAAU,IAEnB,IAAXD,GAEErC,IACFA,EAAWsC,GAAU,GAGZzC,EAAAA,GADXe,EAAgB4B,EAAME,SAAW,EAAKR,EAAUC,KAAcC,GACzBxB,EAAef,EACpDD,EAAa0C,KAAY1B,IAGrBZ,IACFA,EAAWsC,GAAU,GAEvB1C,EAAa0C,KAAYpD,GAEdmD,IAAA,EAELC,GAAAC,OAIR,GAAAC,EAAME,SAAW,EAGnB,IAAKd,EAAK,EAAGA,EAAKG,EAAiBH,IAAM,CACvC,IAAKD,EAAK,EAAGA,EAAKM,EAAgBN,IAErB9B,EAAAA,GADXe,EAAesB,EAAUC,MACYvB,EAAef,EACpDD,EAAa0C,KAAY1B,EAEjB0B,GAAAC,OAMZ,IADW1C,EAAAA,EAAWuC,EAAaA,EAAavC,EAC3C+B,EAAK,EAAGA,EAAKG,EAAiBH,IAAM,CACvC,IAAKD,EAAK,EAAGA,EAAKM,EAAgBN,IAChC/B,EAAa0C,KAAYF,EAEjBE,GAAAC,EAIhB,GAAwB,IAAnBC,EAAME,UAAoBP,IAAaK,EAAMM,eAC1C,KAAA,8BAERjC,MAIG,MAAA,CACLjB,eACAI,aACAH,WAEH,EAEGxB,EAAiB,SAASmC,GACrB,MAAA,CACLwC,qBAAwBxC,EAAKwC,qBAC7BC,YAAezC,EAAKyC,YACpBC,UAAa1C,EAAK0C,UAClBxD,OAAUc,EAAKd,OACfD,MAASe,EAAKf,MACd8B,UAAaf,EAAKe,UAClB4B,UAAa3C,EAAK2C,UAClBhD,KAAQK,EAAKL,KAAO,CAClBY,WAAcP,EAAKL,KAAKY,WACxBE,WAAcT,EAAKL,KAAKc,WACxBmC,SAAY5C,EAAKL,KAAKiD,SACtBtD,SAAYU,EAAKL,KAAKL,UACpB,KACJC,OAAU,CACRgB,WAAcP,EAAKT,OAAOgB,WAC1BE,WAAcT,EAAKT,OAAOkB,WAC1BmC,SAAY5C,EAAKT,OAAOqD,SACxBtD,SAAYU,EAAKT,OAAOD,SACxBZ,YAAesB,EAAKtB,aAGzB,EAEGZ,EAAuB,SAASkC,GAGlC,IAFA,IAAI6C,EAAY7C,EAAKT,OAAOgB,WAAaP,EAAKT,OAAOkB,WACjDV,EAAY,CAAE,EACT+C,EAAI,EAAGA,EAAID,EAAWC,IAAK,CAClC,IAAId,EAAQhC,EAAKT,OAAO0C,OAAOa,GACR,IAAnBd,EAAME,SACRnC,EAAUgD,SAAU,EACQ,IAAnBf,EAAME,SACLnC,EAAAiC,EAAMK,eAAgB,EAEhCtC,EAAU,IAAK,EAIZ,OAAAiD,OAAOC,KAAKlD,EACpB,EAEGhC,EAAQ,SAASK,EAAO8E,EAAI5E,GAC9B,IAAI0B,EAAO,CAAE,EAGTmD,EAAa,IAAIjC,WAAW9C,EAAO8E,EAAI,IAE3C,GADAlD,EAAKwC,qBAAuBY,OAAOC,aAAaC,MAAM,KAAMH,GACnB,cAArCnD,EAAKwC,qBAAqBe,OAC5B,KAAM,sCAAwCvD,EAAKwC,qBAE/CU,GAAA,GACN,IAAIM,EAAO,IAAIC,SAASrF,EAAO8E,EAAI,IASnC,GARAlD,EAAKyC,YAAce,EAAKE,SAAS,GAAG,GACpC1D,EAAK0C,UAAYc,EAAKE,SAAS,GAAG,GAClC1D,EAAKd,OAASsE,EAAKG,UAAU,GAAG,GAChC3D,EAAKf,MAAQuE,EAAKG,UAAU,IAAI,GAChC3D,EAAKe,UAAYyC,EAAKI,WAAW,IAAI,GAC/BV,GAAA,IAGD5E,EAUC,GATJkF,EAAO,IAAIC,SAASrF,EAAO8E,EAAI,IAC/BlD,EAAKL,KAAO,CAAE,EACdK,EAAKL,KAAKc,WAAa+C,EAAKG,UAAU,GAAG,GACzC3D,EAAKL,KAAKY,WAAaiD,EAAKG,UAAU,GAAG,GACzC3D,EAAKL,KAAKiD,SAAWY,EAAKG,UAAU,GAAG,GACvC3D,EAAKL,KAAKL,SAAWkE,EAAKK,WAAW,IAAI,GACnCX,GAAA,GAGFlD,EAAKL,KAAKiD,SAAW,EAAG,CACtB,IAAAhD,EAAS,IAAIsB,WAAWP,KAAKmD,KAAK9D,EAAKf,MAAQe,EAAKd,OAAS,IAE7D6E,GADJP,EAAO,IAAIC,SAASrF,EAAO8E,EAAIlD,EAAKL,KAAKiD,WAC1BoB,SAAS,GAAG,GACvBC,EAAK,EAAGC,EAAK,EACd,EAAA,CACD,GAAIH,EAAM,EACR,KAAOA,KAASnE,EAAOsE,KAAQV,EAAKW,SAASF,SACxC,CACD,IAAAG,EAAMZ,EAAKW,SAASF,KAExB,IADAF,GAAOA,EACAA,KAASnE,EAAOsE,KAAQE,EAE3BL,EAAAP,EAAKQ,SAASC,GAAI,GAClBA,GAAA,QACCA,EAAKjE,EAAKL,KAAKiD,UACxB,IAAa,QAARmB,GAAoBG,EAAKtE,EAAOyE,OAC7B,KAAA,sCAERrE,EAAKL,KAAKC,OAASA,EACnBsD,GAAMlD,EAAKL,KAAKiD,cAE4D,KAApE5C,EAAKL,KAAKiD,SAAW5C,EAAKL,KAAKc,WAAaT,EAAKL,KAAKL,YACzDU,EAAAL,KAAKC,OAAS,IAAIsB,WAAWP,KAAKmD,KAAK9D,EAAKf,MAAQe,EAAKd,OAAS,KAK3EsE,EAAO,IAAIC,SAASrF,EAAO8E,EAAI,IAC/BlD,EAAKT,OAAS,CAAE,EAChBS,EAAKT,OAAOkB,WAAa+C,EAAKG,UAAU,GAAG,GAC3C3D,EAAKT,OAAOgB,WAAaiD,EAAKG,UAAU,GAAG,GAC3C3D,EAAKT,OAAOqD,SAAWY,EAAKG,UAAU,GAAG,GACzC3D,EAAKT,OAAOD,SAAWkE,EAAKK,WAAW,IAAI,GACrCX,GAAA,GAEF,IAAA3C,EAAaP,EAAKT,OAAOgB,WACzBE,EAAaT,EAAKT,OAAOkB,WAIzB6D,EAAmB/D,GAAeP,EAAKf,MAAQsB,EAAc,EAAI,EAAI,GACrEgE,EAAmB9D,GAAeT,EAAKd,OAASuB,EAAc,EAAI,EAAI,GAC1ET,EAAKT,OAAO0C,OAAS,IAAIuC,MAAMF,EAAmBC,GAElD,IADA,IAAIE,EAAS,EACJC,EAAS,EAAGA,EAASH,EAAkBG,IAC9C,IAAA,IAASC,EAAS,EAAGA,EAASL,EAAkBK,IAAU,CAGxD,IAAIC,EAAO,EACPC,EAAYzG,EAAM0G,WAAa5B,EAC5BM,EAAA,IAAIC,SAASrF,EAAO8E,EAAIvC,KAAKoE,IAAI,GAAIF,IAC5C,IAAI7C,EAAQ,CAAE,EACThC,EAAAT,OAAO0C,OAAOwC,KAAYzC,EAC3B,IAAAgD,EAAaxB,EAAKW,SAAS,GAE3B,GAF+BS,IACnC5C,EAAME,SAAwB,GAAb8C,EACbhD,EAAME,SAAW,EACb,KAAA,2BAA6BF,EAAME,SAAW,IAElD,GAAmB,IAAnBF,EAAME,SAAN,CAIC,GAAe,IAAf8C,GAAqC,IAAfA,EAAmB,CAG5C,GAFeA,IAAA,EACfhD,EAAMiD,WAAaD,EACA,IAAfA,EACIhD,EAAAO,OAASiB,EAAK0B,QAAQ,GAAIN,SAC9C,GAAsC,IAAfI,EACThD,EAAMO,OAASiB,EAAKQ,SAAS,GAAG,GAAeY,GAAA,MAC7D,IAAsC,IAAfI,EAGH,KAAA,4BAFNhD,EAAMO,OAASiB,EAAKK,WAAW,GAAG,GAAee,GAAA,EAK/C,GAAmB,IAAnB5C,EAAME,SAKR,GAJa8C,EAAAxB,EAAKW,SAASS,GAAOA,IAClC5C,EAAMK,aAA4B,GAAb2C,EACNA,IAAA,EACfhD,EAAMmD,mBAAqBH,EACR,IAAfA,EACIhD,EAAAM,eAAiBkB,EAAKW,SAASS,GAAOA,SAC5D,GAAwC,IAAfI,EACThD,EAAMM,eAAiBkB,EAAK4B,UAAUR,GAAM,GAAeA,GAAA,MAC3E,IAAwC,IAAfI,EAGH,KAAA,iCAFNhD,EAAMM,eAAiBkB,EAAKG,UAAUiB,GAAM,GAAeA,GAAA,GAYjE,IAAIS,EAJA,GAFEnC,GAAA0B,EAEiB,IAAnB5C,EAAME,SAKN,GAAmB,IAAnBF,EAAME,SAAgB,CACxB,IAAIoD,GAAatF,EAAKT,OAAOqD,SAAW,GAAK,EAC7C,GAAI0C,IAAc3E,KAAKC,MAAM0E,GACrB,KAAA,wCAEGD,EAAA,IAAIE,YAAwB,EAAZD,GAClB,IAAIpE,WAAWmE,GACjBG,IAAI,IAAItE,WAAW9C,EAAO8E,EAAgB,EAAZoC,IACjC,IAAAnD,EAAU,IAAIrD,aAAauG,GAC/BrD,EAAMG,QAAUA,EAChBe,GAAkB,EAAZoC,CAClB,MAAA,GAAwC,IAAnBtD,EAAME,SAAgB,CAC/B,IAAIuD,EAAY9E,KAAKmD,KAAK9B,EAAMM,eAAiBN,EAAMK,aAAe,GAClEqD,EAAY/E,KAAKmD,KAAK2B,EAAY,GAC3BJ,EAAA,IAAIE,YAAwB,EAAZG,GAClB,IAAIxE,WAAWmE,GACjBG,IAAI,IAAItE,WAAW9C,EAAO8E,EAAIuC,IAC/BzD,EAAAI,YAAc,IAAIuD,YAAYN,GAC9BnC,GAAAuC,QAzDNvC,IA8DC,OADPlD,EAAK2C,UAAYO,EACVlD,CACR,EAEGhC,EAAU,SAAS4H,EAAKvD,EAAciD,EAAW/C,EAAQzB,EAAO+E,EAAMvG,GACpE,IACOwG,EAEPC,EAAGC,EAHHC,GAAW,GAAK5D,GAAgB,EAChCS,EAAI,EACJoD,EAAW,EAEXC,EAAOxF,KAAKmD,MAAMxE,EAAWiD,GAAUzB,GAEvCsF,EAAmC,EAAbR,EAAIvB,OAAa1D,KAAKmD,KAAKzB,EAAeiD,EAAY,GAGhF,IAFAM,EAAIA,EAAIvB,OAAS,KAAO,EAAI+B,EAEvBN,EAAI,EAAGA,EAAIR,EAAWQ,IAAK,CAK9B,GAJiB,IAAbI,IACFF,EAASJ,EAAI9C,KACFoD,EAAA,IAETA,GAAY7D,EACT0D,EAAAC,IAAYE,EAAW7D,EAAiB4D,EACjCC,GAAA7D,MACP,CACL,IAAIgE,EAAehE,EAAe6D,EAC5BH,GAAAC,EAASC,IAAYI,EAAeJ,EAG1CF,IAFAC,EAASJ,EAAI9C,SACboD,EAAW,GAAKG,GAIlBR,EAAKC,GAAKC,EAAII,EAAO5D,EAASwD,EAAIjF,EAAQxB,EAErC,OAAAuG,CACR,EAEMlI,GAIL2I,EAA0B,WAQ5B,IAAIC,EAGO,SAASX,EAAKC,EAAMxD,EAAciD,EAAWkB,EAAQjE,EAAQzB,EAAOxB,GACvE,IACOwG,EAEPC,EAAGC,EAAQK,EAAaF,EAHxBF,GAAW,GAAK5D,GAAgB,EAChCS,EAAI,EACJoD,EAAW,EAIXE,EAAmC,EAAbR,EAAIvB,OAAa1D,KAAKmD,KAAKzB,EAAeiD,EAAY,GAEhF,GADAM,EAAIA,EAAIvB,OAAS,KAAO,EAAI+B,EACxBI,EACF,IAAKV,EAAI,EAAGA,EAAIR,EAAWQ,IACR,IAAbI,IACFF,EAASJ,EAAI9C,KACFoD,EAAA,IAETA,GAAY7D,GACT0D,EAAAC,IAAYE,EAAW7D,EAAiB4D,EACjCC,GAAA7D,IAIN0D,GAAAC,EAASC,KADfI,EAAehE,EAAe6D,GACYD,EAG1CF,IAFAC,EAASJ,EAAI9C,SACboD,EAAW,GAAKG,IAGbR,EAAAC,GAAKU,EAAOT,QAKnB,IADAI,EAAOxF,KAAKmD,MAAMxE,EAAWiD,GAAUzB,GAClCgF,EAAI,EAAGA,EAAIR,EAAWQ,IACR,IAAbI,IACFF,EAASJ,EAAI9C,KACFoD,EAAA,IAETA,GAAY7D,GACT0D,EAAAC,IAAYE,EAAW7D,EAAiB4D,EACjCC,GAAA7D,IAIN0D,GAAAC,EAASC,KADfI,EAAehE,EAAe6D,GACYD,EAG1CF,IAFAC,EAASJ,EAAI9C,SACboD,EAAW,GAAKG,IAIlBR,EAAKC,GAAKC,EAAII,EAAO5D,EAASwD,EAAIjF,EAAQxB,CAG/C,EAtDCiH,EAwDU,SAASX,EAAKvD,EAAciD,EAAW/C,EAAQzB,EAAOxB,GAC5D,IAEA0G,EAFAC,GAAW,GAAK5D,GAAgB,EAChCS,EAAI,EAAGgD,EAAI,EAAGO,EAAc,EAAGH,EAAW,EAAGH,EAAI,EAEjDF,EAAO,GAGPO,EAAmC,EAAbR,EAAIvB,OAAa1D,KAAKmD,KAAKzB,EAAeiD,EAAY,GAChFM,EAAIA,EAAIvB,OAAS,KAAO,EAAI+B,EAE5B,IAAID,EAAOxF,KAAKmD,MAAMxE,EAAWiD,GAAUzB,GAC3C,IAAKgF,EAAI,EAAGA,EAAIR,EAAWQ,IACR,IAAbI,IACFF,EAASJ,EAAI9C,KACFoD,EAAA,IAETA,GAAY7D,GACT0D,EAAAC,IAAYE,EAAW7D,EAAiB4D,EACjCC,GAAA7D,IAGN0D,GAAAC,EAASC,KADfI,EAAehE,EAAe6D,GACYD,EAG1CF,IAFAC,EAASJ,EAAI9C,SACboD,EAAW,GAAKG,IAIlBR,EAAKC,GAAKC,EAAII,EAAO5D,EAASwD,EAAIjF,EAAQxB,EAGrC,OADPuG,EAAKY,QAAQlE,GACNsD,CACR,EAvFCU,EAyFQ,SAASX,EAAKC,EAAMxD,EAAciD,EAAWkB,EAAQjE,EAAQzB,EAAOxB,GACxE,IACOwG,EAEPC,EAAGC,EAAQK,EAHXJ,GAAW,GAAK5D,GAAgB,EAChCS,EAAI,EACJoD,EAAW,EAAGQ,EAAS,EAE3B,GAAIF,EACF,IAAKV,EAAI,EAAGA,EAAIR,EAAWQ,IACR,IAAbI,IACFF,EAASJ,EAAI9C,KACFoD,EAAA,GACFQ,EAAA,GAEPR,GAAY7D,GACd0D,EAAMC,IAAWU,EAAUT,EACfC,GAAA7D,EACFqE,GAAArE,IAGV0D,EAAKC,IAAWU,EAAUT,EAE1BC,EAAW,IAHXG,EAAehE,EAAe6D,GAI9BH,KAFAC,EAASJ,EAAI9C,OAEI,GAAKuD,GAAe,IAAQhE,EAAegE,EACnDK,EAAAL,GAENR,EAAAC,GAAKU,EAAOT,OAGhB,CACH,IAAII,EAAOxF,KAAKmD,MAAMxE,EAAWiD,GAAUzB,GAC3C,IAAKgF,EAAI,EAAGA,EAAIR,EAAWQ,IACR,IAAbI,IACFF,EAASJ,EAAI9C,KACFoD,EAAA,GACFQ,EAAA,GAEPR,GAAY7D,GAEd0D,EAAMC,IAAWU,EAAUT,EACfC,GAAA7D,EACFqE,GAAArE,IAGV0D,EAAKC,IAAWU,EAAUT,EAE1BC,EAAW,IAHXG,EAAehE,EAAe6D,GAI9BH,KAFAC,EAASJ,EAAI9C,OAEI,GAAKuD,GAAe,IAAQhE,EAAegE,EACnDK,EAAAL,GAGXR,EAAKC,GAAKC,EAAII,EAAO5D,EAASwD,EAAIjF,EAAQxB,EAGvC,OAAAuG,CACR,EA9ICU,EAgJW,SAASX,EAAKvD,EAAciD,EAAW/C,EAAQzB,EAAOxB,GAC7D,IAEA0G,EAFAC,GAAW,GAAK5D,GAAgB,EAChCS,EAAI,EAAGgD,EAAI,EAAGO,EAAc,EAAGH,EAAW,EAAGH,EAAI,EAAGW,EAAS,EAE7Db,EAAO,GACPM,EAAOxF,KAAKmD,MAAMxE,EAAWiD,GAAUzB,GAC3C,IAAKgF,EAAI,EAAGA,EAAIR,EAAWQ,IACR,IAAbI,IACFF,EAASJ,EAAI9C,KACFoD,EAAA,GACFQ,EAAA,GAEPR,GAAY7D,GAEd0D,EAAMC,IAAWU,EAAUT,EACfC,GAAA7D,EACFqE,GAAArE,IAGV0D,EAAKC,IAAWU,EAAUT,EAE1BC,EAAW,IAHXG,EAAehE,EAAe6D,GAI9BH,KAFAC,EAASJ,EAAI9C,OAEI,GAAKuD,GAAe,IAAQhE,EAAegE,EACnDK,EAAAL,GAGXR,EAAKC,GAAKC,EAAII,EAAO5D,EAASwD,EAAIjF,EAAQxB,EAGrC,OADPuG,EAAKY,QAAQlE,GACNsD,CACR,EA9KCU,EAgLe,SAASX,EAAKC,EAAMxD,EAAciD,GAC7C,IACOQ,EAEPC,EAAGC,EAAQK,EAHXJ,GAAW,GAAK5D,GAAgB,EAChCS,EAAI,EACJoD,EAAW,EAIXE,EAAmC,EAAbR,EAAIvB,OAAa1D,KAAKmD,KAAKzB,EAAeiD,EAAY,GAGhF,IAFAM,EAAIA,EAAIvB,OAAS,KAAO,EAAI+B,EAEvBN,EAAI,EAAGA,EAAIR,EAAWQ,IACR,IAAbI,IACFF,EAASJ,EAAI9C,KACFoD,EAAA,IAETA,GAAY7D,GACT0D,EAAAC,IAAYE,EAAW7D,EAAiB4D,EACjCC,GAAA7D,IAIN0D,GAAAC,EAASC,KADfI,EAAehE,EAAe6D,GACYD,EAG1CF,IAFAC,EAASJ,EAAI9C,SACboD,EAAW,GAAKG,IAGlBR,EAAKC,GAAKC,EAEL,OAAAF,CACR,EA7MCU,EA+MgB,SAASX,EAAKC,EAAMxD,EAAciD,GAC9C,IACOQ,EAEPC,EAAGC,EAAQK,EAHXJ,GAAW,GAAK5D,GAAgB,EAChCS,EAAI,EACJoD,EAAW,EAAGQ,EAAS,EAG3B,IAAKZ,EAAI,EAAGA,EAAIR,EAAWQ,IACR,IAAbI,IACFF,EAASJ,EAAI9C,KACFoD,EAAA,GACFQ,EAAA,GAEPR,GAAY7D,GAEd0D,EAAMC,IAAWU,EAAUT,EACfC,GAAA7D,EACFqE,GAAArE,IAGV0D,EAAKC,IAAWU,EAAUT,EAE1BC,EAAW,IAHXG,EAAehE,EAAe6D,GAI9BH,KAFAC,EAASJ,EAAI9C,OAEI,GAAKuD,GAAe,IAAQhE,EAAegE,EACnDK,EAAAL,GAEXR,EAAKC,GAAKC,EAEL,OAAAF,GAOPc,EAAe,CACjBC,qBAAsB,GACtBC,0BAA2B,SAASzI,GAMlC,IAJI,IAAA0I,EAAO,MAAQC,EAAO,MACtBC,EAAM5I,EAAMiG,OACZ4C,EAAQtG,KAAKC,MAAMoG,EAAM,GACzBlE,EAAI,EACDmE,GAAO,CACR,IAAAC,EAAQD,GAAS,IAAO,IAAMA,EACzBA,GAAAC,EACN,GACQJ,GAAA1I,EAAM0E,MAAQ,EACfiE,GAAAD,GAAQ1I,EAAM0E,aACboE,GAEHJ,GAAO,MAAPA,IAAkBA,IAAS,IAC3BC,GAAO,MAAPA,IAAkBA,IAAS,IAW7B,OAPE,EAANC,IACMD,GAAAD,GAAS1I,EAAM0E,IAAM,KAIvBiE,GAAO,MAAPA,IAAkBA,IAAS,MAEnB,IAHRD,GAAO,MAAPA,IAAkBA,IAAS,QAGJ,CAChC,EAEDK,eAAgB,SAAS/I,EAAO4B,GAC9B,IAAIoH,EAAMpH,EAAKoH,IACXjE,EAAa,IAAIjC,WAAW9C,EAAOgJ,EAAK,GACxCC,EAAa,CAAE,EAEnB,GADAA,EAAW7E,qBAAuBY,OAAOC,aAAaC,MAAM,KAAMH,GACF,IAA5DkE,EAAW7E,qBAAqB8E,YAAY,QAAS,GACvD,KAAM,sDAAwDD,EAAW7E,qBAEpE4E,GAAA,EACP,IAmCcG,EAnCV/D,EAAO,IAAIC,SAASrF,EAAOgJ,EAAK,GAChC3E,EAAce,EAAKE,SAAS,GAAG,GAmCnC,GAlCA2D,EAAW5E,YAAcA,EAClB2E,GAAA,EACH3E,GAAe,IACjB4E,EAAWG,SAAWhE,EAAKG,UAAU,GAAG,GACjCyD,GAAA,GAIT5D,EAAO,IAAIC,SAASrF,EAAOgJ,EAAK,IAChCC,EAAWnI,OAASsE,EAAKG,UAAU,GAAG,GACtC0D,EAAWpI,MAAQuE,EAAKG,UAAU,GAAG,GAC9ByD,GAAA,EACH3E,GAAe,GACjB4E,EAAWI,QAAUjE,EAAKG,UAAU,GAAG,GAChCyD,GAAA,GAGPC,EAAWI,QAAU,EAGvBjE,EAAO,IAAIC,SAASrF,EAAOgJ,EAAK,IAChCC,EAAWK,cAAgBlE,EAAKG,UAAU,GAAG,GAC7C0D,EAAWM,eAAiBnE,EAAKE,SAAS,GAAG,GAC7C2D,EAAWO,SAAWpE,EAAKE,SAAS,GAAG,GACvC2D,EAAW3E,UAAYc,EAAKE,SAAS,IAAI,GAEzC2D,EAAWtG,UAAYyC,EAAKI,WAAW,IAAI,GAC3CyD,EAAWQ,KAAOrE,EAAKI,WAAW,IAAI,GACtCyD,EAAWS,KAAOtE,EAAKI,WAAW,IAAI,GAC/BwD,GAAA,GACPpH,EAAKqH,WAAaA,EAClBrH,EAAKoH,IAAMA,EAGP3E,GAAe,IACL8E,EAAA9E,GAAe,EAAI,GAAK,GACzBsF,KAAKlB,0BAA0B,IAAI3F,WAAW9C,EAAOgJ,EAAMG,EAAWF,EAAWO,SAAW,OACtFP,EAAWG,UACpB,KAAA,mBAGH,OAAA,CACR,EAEDQ,kBAAmB,SAAS5J,EAAO4B,GACjC,IAAIqH,EAAarH,EAAKqH,WAClBY,EAAoBF,KAAKG,iBAAiBb,EAAW3E,WACrDyF,EAAad,EAAWI,QAAUM,KAAKK,gBAAgBf,EAAW3E,WAClE2F,EAAYN,KAAKO,aAAalK,EAAO4B,EAAKoH,IAAKa,EAAmBE,GAClEI,EAAYR,KAAKO,aAAalK,EAAO4B,EAAKoH,IAAMe,EAAYF,EAAmBE,GACnFnI,EAAKoH,KAAQ,EAAIe,EACjB,IAAIrF,EAAG0F,GAAQ,EACf,IAAK1F,EAAI,EAAGA,EAAIuE,EAAWI,QAAS3E,IAClC,GAAIuF,EAAUvF,KAAOyF,EAAUzF,GAAI,CACzB0F,GAAA,EACR,MAKG,OAFPnB,EAAWgB,UAAYA,EACvBhB,EAAWkB,UAAYA,EAChBC,CACR,EAEDF,aAAc,SAASlK,EAAOgJ,EAAKa,EAAmBrF,GAChD,IAAAT,EACJ,GAAI8F,IAAsB/G,WACxBiB,EAAU,IAAIjB,WAAW9C,EAAOgJ,EAAKxE,OAElC,CACC,IAAAyC,EAAW,IAAIE,YAAY3C,GAClB,IAAI1B,WAAWmE,GACrBG,IAAI,IAAItE,WAAW9C,EAAOgJ,EAAKxE,IAC5BT,EAAA,IAAI8F,EAAkB5C,GAE3B,OAAAlD,CACR,EAEDsG,SAAU,SAASrK,EAAO4B,GACxB,IAcIJ,EAAQJ,EAdR4H,EAAMpH,EAAKoH,IACXC,EAAarH,EAAKqH,WAClB/B,EAAY+B,EAAWpI,MAAQoI,EAAWnI,OAC1CwI,EAAgBL,EAAWK,cAE3BlE,EAAO,IAAIC,SAASrF,EAAOgJ,EAAK,GAChCzH,EAAO,CAAE,EAKb,GAJAA,EAAKiD,SAAWY,EAAKG,UAAU,GAAG,GAC3ByD,GAAA,GAGF,IAAMM,GAAiBpC,IAAcoC,IAAkB,IAAM/H,EAAKiD,SAC9D,KAAA,eAGT,GAAsB,IAAlB8E,EACF9H,EAAS,IAAIsB,WAAWP,KAAKmD,KAAKwB,EAAY,IAC9C3F,EAAKC,OAASA,EACDJ,EAAA,IAAI0B,WAAWoE,GAC5BtF,EAAKT,OAAOC,WAAaA,EACzB4H,GAAOzH,EAAKiD,cACb,GACQjD,EAAKiD,SAAW,EAAG,CAC1BhD,EAAS,IAAIsB,WAAWP,KAAKmD,KAAKwB,EAAY,IAE9C,IAAIvB,GADJP,EAAO,IAAIC,SAASrF,EAAOgJ,EAAKzH,EAAKiD,WACtBoB,SAAS,GAAG,GACvBC,EAAK,EAAGC,EAAK,EAAGE,EAAM,EACvB,EAAA,CACD,GAAIL,EAAM,EACR,KAAOA,KAASnE,EAAOsE,KAAQV,EAAKW,SAASF,UAI7C,IAFMG,EAAAZ,EAAKW,SAASF,KACpBF,GAAOA,EACAA,KAASnE,EAAOsE,KAAQE,EAE3BL,EAAAP,EAAKQ,SAASC,GAAI,GAClBA,GAAA,CAClB,OAAmBA,EAAKtE,EAAKiD,UACnB,IAAa,QAARmB,GAAoBG,EAAKtE,EAAOyE,OAC7B,KAAA,sCAGK7E,EAAA,IAAI0B,WAAWoE,GACxB,IAAAoD,EAAK,EAAGC,EAAI,EAEhB,IAAKA,EAAI,EAAGA,EAAIrD,EAAWqD,IACjB,EAAJA,GACGD,EAAA9I,EAAO+I,GAAK,GACjBD,IAAW,EAAJC,GAGFD,EAAA9I,EAAO+I,GAAK,GAEV,IAALD,IACFlJ,EAAWmJ,GAAK,GAGpB3I,EAAKT,OAAOC,WAAaA,EAEzBG,EAAKC,OAASA,EACdwH,GAAOzH,EAAKiD,SAIP,OAFP5C,EAAKoH,IAAMA,EACXpH,EAAKL,KAAOA,GACL,CACR,EAEDiJ,iBAAkB,SAASxK,EAAO4B,EAAMiI,EAAmBY,GACzD,IAOI1G,EAPAiF,EAAMpH,EAAKoH,IACXC,EAAarH,EAAKqH,WAClBI,EAAUJ,EAAWI,QACrBnC,EAAY+B,EAAWpI,MAAQoI,EAAWnI,OAC1CwD,EAAY2E,EAAW3E,UACvBE,EAAWyE,EAAWK,cAAgBf,EAAayB,gBAAgB1F,GAAa+E,EAGhF9H,EAAOK,EAAKT,OAAOC,WACvB,GAAIyI,IAAsB/G,WACxBiB,EAAU,IAAIjB,WAAW9C,EAAOgJ,EAAKxE,OAElC,CACC,IAAAyC,EAAW,IAAIE,YAAY3C,GAClB,IAAI1B,WAAWmE,GACrBG,IAAI,IAAItE,WAAW9C,EAAOgJ,EAAKxE,IAC5BT,EAAA,IAAI8F,EAAkB5C,GAE9B,GAAAlD,EAAQkC,SAAWiB,EAAYmC,EAE1BzH,EAAAT,OAAOH,aADVyJ,EACyBlC,EAAamC,mBAAmB3G,EAASmD,EAAWmC,EAASQ,GAAmB,GAGhF9F,MAI/B,CACEnC,EAAKT,OAAOH,aAAe,IAAI6I,EAAkB3C,EAAYmC,GAC7D,IAAIsB,EAAI,EAAGJ,EAAI,EAAG7F,EAAI,EAAGkG,EAAS,EAClC,GAAIvB,EAAU,GACZ,GAAIoB,GACF,IAAKF,EAAI,EAAGA,EAAIrD,EAAWqD,IACrB,GAAAhJ,EAAKgJ,GAEP,IADSK,EAAAL,EACJ7F,EAAI,EAAGA,EAAI2E,EAAS3E,IAAKkG,GAAQ1D,EACpCtF,EAAKT,OAAOH,aAAa4J,GAAU7G,EAAQ4G,UAMjD,IAAKJ,EAAI,EAAGA,EAAIrD,EAAWqD,IACrB,GAAAhJ,EAAKgJ,GAEP,IADAK,EAASL,EAAIlB,EACR3E,EAAI,EAAGA,EAAI2E,EAAS3E,IACvB9C,EAAKT,OAAOH,aAAa4J,EAASlG,GAAKX,EAAQ4G,UAOvD,IAAKJ,EAAI,EAAGA,EAAIrD,EAAWqD,IACrBhJ,EAAKgJ,KACP3I,EAAKT,OAAOH,aAAauJ,GAAKxG,EAAQ4G,MAOvC,OAFA3B,GAAAxE,EACP5C,EAAKoH,IAAMA,GACJ,CACR,EAED6B,gBAAiB,SAAS7K,EAAO4B,GAC/B,IAAIkJ,EAAWnB,KAAKnB,qBAKhBpD,EAAO,IAAIC,SAASrF,EAAO4B,EAAKoH,IAAK,IAGzC,GAFApH,EAAKoH,KAAO,GACE5D,EAAKE,SAAS,GAAG,GACjB,EACN,KAAA,8BAER,IAAIkB,EAAOpB,EAAKE,SAAS,GAAG,GACxByF,EAAK3F,EAAKE,SAAS,GAAG,GACtB0F,EAAK5F,EAAKE,SAAS,IAAI,GAC3B,GAAIyF,GAAMC,EACD,OAAA,EAET,IAAI/H,EAAkB,IAAIsE,YAAYyD,EAAKD,GAC9BxC,EAAA0C,WAAWjL,EAAO4B,EAAMqB,GACrC,IACIyB,EAAGwG,EAAGX,EAAG3B,EADTuC,EAAY,GAGhB,IAAKzG,EAAIqG,EAAIrG,EAAIsG,EAAItG,IAETyG,EADND,EAAAxG,GAAKA,EAAI8B,EAAO,EAAIA,IACT,CAAE4E,MAAOnI,EAAgByB,EAAIqG,GAAKM,OAAQ,MAGvD,IAAAhE,EAAYrH,EAAM0G,WAAa9E,EAAKoH,IACpC1B,EAAY/E,KAAKmD,KAAK2B,EAAY,GAClCJ,EAAW,IAAIE,YAAwB,EAAZG,GAClB,IAAIxE,WAAWmE,GACrBG,IAAI,IAAItE,WAAW9C,EAAO4B,EAAKoH,IAAK3B,IACvC,IACYiE,EADZtH,EAAc,IAAIuD,YAAYN,GAC9BqB,EAAS,EAASiD,EAAS,EAE/B,IADAD,EAAOtH,EAAY,GACdU,EAAIqG,EAAIrG,EAAIsG,EAAItG,KAEbkE,EAAAuC,EADFD,EAAAxG,GAAKA,EAAI8B,EAAO,EAAIA,IACL4E,OACT,IACRD,EAAUD,GAAGG,OAAUC,GAAQhD,IAAa,GAAKM,EAE7C,GAAKN,GAAUM,EAEF,MADLN,GAAAM,KAECN,EAAA,EAETgD,EAAOtH,IADPuH,KAKFjD,GAAUM,EAAM,GAEhB0C,EAAOtH,IADPuH,GAEAJ,EAAUD,GAAGG,QAAUC,IAAU,GAAKhD,IAUxC,IAAAkD,EAAa,EAAGC,EAAiB,EACjCC,EAAO,IAAIC,EACf,IAAKjH,EAAI,EAAGA,EAAIyG,EAAUlF,OAAQvB,SACX,IAAjByG,EAAUzG,KACZ8G,EAAajJ,KAAKqJ,IAAIJ,EAAYL,EAAUzG,GAAG0G,QAIhCK,EADfD,GAAcV,EACCA,EAGAU,EAMnB,IAAoBK,EAAOC,EAAMC,EAAYC,EAAgBC,EAAzDC,EAAY,GAChB,IAAKxH,EAAIqG,EAAIrG,EAAIsG,EAAItG,IAGnB,IADMkE,EAAAuC,EADFD,EAAAxG,GAAKA,EAAI8B,EAAO,EAAIA,IACL4E,OACT,EAER,GADQS,EAAA,CAACjD,EAAKsC,GACVtC,GAAO6C,EAGT,IAFAK,EAAOX,EAAUD,GAAGG,QAAWI,EAAiB7C,EAChDmD,EAAa,GAAMN,EAAiB7C,EAC/B2B,EAAI,EAAGA,EAAIwB,EAAYxB,IAChB2B,EAAAJ,EAAOvB,GAAKsB,OAOxB,IAFOC,EAAAX,EAAUD,GAAGG,OACbY,EAAAP,EACFM,EAAKpD,EAAM,EAAGoD,GAAM,EAAGA,IACbF,IAASE,EAAK,GAEpBC,EAAKE,QACHF,EAAAE,MAAQ,IAAIR,GAEnBM,EAAOA,EAAKE,QAGPF,EAAKG,OACHH,EAAAG,KAAO,IAAIT,GAElBM,EAAOA,EAAKG,MAEH,IAAPJ,GAAaC,EAAKjG,MACfiG,EAAAjG,IAAM6F,EAAM,IAMpB,MAAA,CACLK,YACAT,iBACAD,aACAE,OACA1H,cACAuH,SACAjD,SAEH,EAED+D,YAAa,SAASrM,EAAO4B,EAAMiI,EAAmBY,GACpD,IAsBIwB,EAAMjG,EAAKsG,EAAsCC,EAAQC,EACzD9H,EAAGwG,EAAGX,EAAGkC,EAtBTpD,EADazH,EAAKqH,WACGI,QACrBvI,EAASc,EAAKqH,WAAWnI,OACzBD,EAAQe,EAAKqH,WAAWpI,MACxBqG,EAAYrG,EAAQC,EAKpB4L,EAAc/C,KAAKkB,gBAAgB7K,EAAO4B,GAC1CsK,EAAYQ,EAAYR,UACxBR,EAAOgB,EAAYhB,KAEnB1H,EAAc0I,EAAY1I,YAC1BuH,EAASmB,EAAYnB,OACrBjD,EAASoE,EAAYpE,OACrBmD,EAAiBiB,EAAYjB,eAC7BD,EAAakB,EAAYlB,WACzBrH,EAAuC,IAA9BvC,EAAKqH,WAAW3E,UAAkB,IAAM,EAI/B/C,EAAOK,EAAKT,OAAOC,WAErCuL,EAAU,EACVrE,EAAS,IACXiD,IACSjD,EAAA,GAEP,IAIAsE,EAJAtB,EAAOtH,EAAYuH,GACnBsB,EAAkC,IAApBjL,EAAKkL,WACnBC,EAAqB,IAAIlD,EAAkB3C,EAAYmC,GACvDrI,EAAe+L,EAGf,GAAA1D,EAAU,GAAKwD,GACjB,IAAKD,EAAO,EAAGA,EAAOvD,EAASuD,IAM7B,GALIvD,EAAU,IAEZrI,EAAe,IAAI6I,EAAkBkD,EAAmBnF,OAAQV,EAAY0F,EAAM1F,GACxEyF,EAAA,GAER/K,EAAKqH,WAAWK,gBAAkBzI,EAAQC,EAC5C,IAAKyJ,EAAI,EAAG7F,EAAI,EAAGA,EAAI5D,EAAQ4D,IAC7B,IAAKwG,EAAI,EAAGA,EAAIrK,EAAOqK,IAAKX,IAAK,CAQ3B,GAPEvE,EAAA,EAEQwG,EADJD,EAAAjB,GAAQhD,IAAa,GAAKmD,EAEhC,GAAKnD,EAASmD,IAEFe,EADdD,GAAYvI,EAAYuH,EAAS,KAAS,GAAKjD,EAASmD,GAGtDS,EAAUM,GAENxG,EAAAkG,EAAUM,GAAa,GACnBlE,GAAA4D,EAAUM,GAAa,QAUjC,IANcA,EADJD,EAAAjB,GAAQhD,IAAa,GAAKkD,EAEhC,GAAKlD,EAASkD,IAEFgB,EADdD,GAAYvI,EAAYuH,EAAS,KAAS,GAAKjD,EAASkD,GAGnDS,EAAAP,EACFe,EAAK,EAAGA,EAAKjB,EAAYiB,IAG5B,KADOR,EADMM,IAAYf,EAAaiB,EAAK,EAAK,EAC5BR,EAAKE,MAAQF,EAAKG,MAC3BA,OAAQH,EAAKE,MAAQ,CAC9BnG,EAAMiG,EAAKjG,IACXsC,EAASA,EAASmE,EAAK,EACvB,MAKFnE,GAAU,KACFA,GAAA,GAEVgD,EAAOtH,IADPuH,IAIFe,EAAQtG,EAAM7B,EACV0I,GAESP,GADPpB,EAAI,EACGyB,EAEFjI,EAAI,EACF1D,EAAauJ,EAAI1J,GAGjB8L,EAEFL,GAAA,IACTtL,EAAauJ,GAAK+B,EACRK,EAAAL,GAGVtL,EAAauJ,GAAK+B,OAMxB,IAAK/B,EAAI,EAAG7F,EAAI,EAAGA,EAAI5D,EAAQ4D,IAC7B,IAAKwG,EAAI,EAAGA,EAAIrK,EAAOqK,IAAKX,IACtB,GAAAhJ,EAAKgJ,GAAI,CAQP,GAPEvE,EAAA,EAEQwG,EADJD,EAAAjB,GAAQhD,IAAa,GAAKmD,EAEhC,GAAKnD,EAASmD,IAEFe,EADdD,GAAYvI,EAAYuH,EAAS,KAAS,GAAKjD,EAASmD,GAGtDS,EAAUM,GAENxG,EAAAkG,EAAUM,GAAa,GACnBlE,GAAA4D,EAAUM,GAAa,QAUjC,IANcA,EADJD,EAAAjB,GAAQhD,IAAa,GAAKkD,EAEhC,GAAKlD,EAASkD,IAEFgB,EADdD,GAAYvI,EAAYuH,EAAS,KAAS,GAAKjD,EAASkD,GAGnDS,EAAAP,EACFe,EAAK,EAAGA,EAAKjB,EAAYiB,IAG5B,KADOR,EADMM,IAAYf,EAAaiB,EAAK,EAAK,EAC5BR,EAAKE,MAAQF,EAAKG,MAC3BA,OAAQH,EAAKE,MAAQ,CAC9BnG,EAAMiG,EAAKjG,IACXsC,EAASA,EAASmE,EAAK,EACvB,MAKFnE,GAAU,KACFA,GAAA,GAEVgD,EAAOtH,IADPuH,IAIFe,EAAQtG,EAAM7B,EACV0I,GACE3B,EAAI,GAAK3J,EAAKgJ,EAAI,GACX+B,GAAAK,EAEFjI,EAAI,GAAKnD,EAAKgJ,EAAI1J,GAChByL,GAAAtL,EAAauJ,EAAI1J,GAGjByL,GAAAK,EAGFL,GAAA,IACTtL,EAAauJ,GAAK+B,EACRK,EAAAL,GAGVtL,EAAauJ,GAAK+B,QAS9B,IAAK/B,EAAI,EAAG7F,EAAI,EAAGA,EAAI5D,EAAQ4D,IAC7B,IAAKwG,EAAI,EAAGA,EAAIrK,EAAOqK,IAErB,GADAX,EAAI7F,EAAI7D,EAAQqK,GACX3J,GAAQA,EAAKgJ,GAChB,IAAKqC,EAAO,EAAGA,EAAOvD,EAASuD,IAAQrC,GAAGrD,EAAW,CAQ/C,GAPElB,EAAA,EAEQwG,EADJD,EAAAjB,GAAQhD,IAAa,GAAKmD,EAEhC,GAAKnD,EAASmD,IAEFe,EADdD,GAAYvI,EAAYuH,EAAS,KAAS,GAAKjD,EAASmD,GAGtDS,EAAUM,GAENxG,EAAAkG,EAAUM,GAAa,GACnBlE,GAAA4D,EAAUM,GAAa,QAUjC,IANcA,EADJD,EAAAjB,GAAQhD,IAAa,GAAKkD,EAEhC,GAAKlD,EAASkD,IAEFgB,EADdD,GAAYvI,EAAYuH,EAAS,KAAS,GAAKjD,EAASkD,GAGnDS,EAAAP,EACFe,EAAK,EAAGA,EAAKjB,EAAYiB,IAG5B,KADOR,EADMM,IAAYf,EAAaiB,EAAK,EAAK,EAC5BR,EAAKE,MAAQF,EAAKG,MAC3BA,OAAQH,EAAKE,MAAQ,CAC9BnG,EAAMiG,EAAKjG,IACXsC,EAASA,EAASmE,EAAK,EACvB,MAKFnE,GAAU,KACFA,GAAA,GAEVgD,EAAOtH,IADPuH,IAIFe,EAAQtG,EAAM7B,EACdnD,EAAauJ,GAAK+B,EAMvB1K,EAAAoH,IAAMpH,EAAKoH,IAAqB,GAAduC,EAAS,IAAUjD,EAAS,EAAI,EAAI,GAC3D1G,EAAKT,OAAOH,aAAe+L,EAEvB1D,EAAU,IAAMoB,IAClB7I,EAAKT,OAAOH,aAAeuH,EAAamC,mBAAmBqC,EAAoB7F,EAAWmC,EAASQ,GAEtG,EAEDoB,WAAY,SAASjL,EAAO4B,EAAMqB,EAAiBkB,EAAQyI,GAGvD,IAAI3D,EAAarH,EAAKqH,WAClB5E,EAAc4E,EAAW5E,YAEzBd,EAAW,EACXyJ,EAAmBhN,EAAM0G,WAAa9E,EAAKoH,KAAQ,EAAK,EAAKhJ,EAAM0G,WAAa9E,EAAKoH,IACrF5D,EAAO,IAAIC,SAASrF,EAAO4B,EAAKoH,IAAKgE,GACrCpG,EAAaxB,EAAKW,SAAS,GAC/BxC,IACA,IAAI0J,EAASrG,GAAc,EACvBe,EAAgB,IAAXsF,EAAgB,EAAI,EAAIA,EAC7BC,GAAsB,GAAbtG,GAAmB,EAC5BuG,EAAuB,GAAbvG,EACVwG,EAAc,EAClB,GAAU,IAANzF,EACYyF,EAAAhI,EAAKW,SAASxC,GAAWA,SACnD,GAA2B,IAANoE,EACKyF,EAAAhI,EAAK4B,UAAUzD,GAAU,GAAmBA,GAAA,MACtE,IAA2B,IAANoE,EAGH,KAAA,iCAFQyF,EAAAhI,EAAKG,UAAUhC,GAAU,GAAmBA,GAAA,EAMxD,IACAS,EAAaiD,EAAUoG,EAAQhG,EAAWC,EAC1Cc,EAAQkF,EAASC,EAA6BtJ,EAF9CvB,EAAQ,EAAIuG,EAAWtG,UAGvB+G,EAAOT,EAAWI,QAAU,EAAIJ,EAAWkB,UAAUyC,GAAQ3D,EAAWS,KAC5E,GAAIwD,EAAO,CAiBD,IAhBRtL,EAAK4L,QAAQC,MACFF,EAAAnI,EAAKW,SAASxC,GAEzBA,IACA8D,EAAY9E,KAAKmD,MAAM6H,EAAW,GAAKJ,EAAU,GACrC7F,EAAA/E,KAAKmD,KAAK2B,EAAY,GACvBJ,EAAA,IAAIE,YAAwB,EAAZG,GAClB+F,EAAA,IAAIvK,WAAWmE,GAExBrF,EAAKoH,KAAOzF,EACZ8J,EAAOjG,IAAI,IAAItE,WAAW9C,EAAO4B,EAAKoH,IAAK3B,IAEjCiG,EAAA,IAAI/F,YAAYN,GAC1BrF,EAAKoH,KAAO3B,EAEGpD,EAAA,EACPsJ,EAAW,IAAOtJ,GACxBA,IAEFoD,EAAY9E,KAAKmD,KAAK0H,EAAcnJ,EAAe,GACvCqD,EAAA/E,KAAKmD,KAAK2B,EAAY,GACvBJ,EAAA,IAAIE,YAAwB,EAAZG,IAClB+F,EAAA,IAAIvK,WAAWmE,IACjBG,IAAI,IAAItE,WAAW9C,EAAO4B,EAAKoH,IAAK3B,IAC7BrD,EAAA,IAAIuD,YAAYN,GAC9BrF,EAAKoH,KAAO3B,EAEDe,EADP/D,GAAe,EACR8D,EAAuBmF,EAASH,EAASI,EAAW,EAAGpJ,EAAQzB,EAAOgH,GAGtEvB,EAAsBmF,EAASH,EAASI,EAAW,EAAGpJ,EAAQzB,EAAOgH,GAG5ErF,GAAe,EAEjB8D,EAAoBnE,EAAaf,EAAiBgB,EAAcmJ,EAAahF,GAG7ED,EAAmBnE,EAAaf,EAAiBgB,EAAcmJ,EAAahF,QAK9ExG,EAAK4L,QAAQE,aACEzJ,EAAAkJ,EACfvL,EAAKoH,KAAOzF,EACRU,EAAe,IACjBoD,EAAY9E,KAAKmD,KAAK0H,EAAcnJ,EAAe,GACvCqD,EAAA/E,KAAKmD,KAAK2B,EAAY,GACvBJ,EAAA,IAAIE,YAAwB,EAAZG,IAClB+F,EAAA,IAAIvK,WAAWmE,IACjBG,IAAI,IAAItE,WAAW9C,EAAO4B,EAAKoH,IAAK3B,IAC7BrD,EAAA,IAAIuD,YAAYN,GAC9BrF,EAAKoH,KAAO3B,EACRhD,GAAe,EACH,MAAVF,EACFgE,EAA4BnE,EAAaf,EAAiBgB,EAAcmJ,GAG7DjF,EAASnE,EAAaf,EAAiBgB,EAAcmJ,GAAa,EAAOjJ,EAAQzB,EAAOgH,GAIvF,MAAVvF,EACFgE,EAA2BnE,EAAaf,EAAiBgB,EAAcmJ,GAG5DjF,EAAQnE,EAAaf,EAAiBgB,EAAcmJ,GAAa,EAAOjJ,EAAQzB,EAAOgH,GAO7G,EAEDiE,UAAW,SAAS3N,EAAO4B,EAAMiI,EAAmBY,GAClD,IAAIxB,EAAarH,EAAKqH,WAClBpI,EAAQoI,EAAWpI,MACnBC,EAASmI,EAAWnI,OACpBoG,EAAYrG,EAAQC,EACpByI,EAAiBN,EAAWM,eAC5BjF,EAAY2E,EAAW3E,UACvBsJ,EAAerF,EAAayB,gBAAgB1F,GAC5CnC,EAAaI,KAAKmD,KAAK7E,EAAQ0I,GAC/BlH,EAAaE,KAAKmD,KAAK5E,EAASyI,GACpC3H,EAAKT,OAAOkB,WAAaA,EACzBT,EAAKT,OAAOgB,WAAaA,EACzBP,EAAKT,OAAO6H,IAAM,EAClB,IACI5D,EAAMxB,EAAOqD,EAAkBlD,EAC/B8J,EAIAhH,EAAY1C,EACkByI,EAK9BkB,EAGAC,EAfAC,EAAM,EAAGC,EAAM,EAAG3H,EAAS,EAAGC,EAAS,EAAGpD,EAAkB,EAAGE,EAAiB,EAAGoD,EAAY,EAAGG,EAAa,EAAGqG,EAAS,EAAiBvJ,EAAS,EAAGC,EAAY,EAAGa,EAAW,EAAG0J,EAAY,EAAGvD,EAAI,EAAGpH,EAAW,EAGtNN,EAAkB,IAAI4G,EAAkBN,EAAiBA,GACzD4E,EAAmBrN,EAASyI,GAAmBA,EAC/C6E,EAAkBvN,EAAQ0I,GAAmBA,EAE7CF,EAAUJ,EAAWI,QACrB9H,EAAOK,EAAKT,OAAOC,WACnBJ,EAAeY,EAAKT,OAAOH,aAE3BqN,EADcpF,EAAW5E,aACY,EAAI,GAAK,GAE9CqF,EAAOT,EAAWS,KAGtB,IAAKpD,EAAS,EAAGA,EAASjE,EAAYiE,IAEpC,IADmBnD,EAAAmD,IAAWjE,EAAa,EAAKkH,EAAiB4E,EAC5D5H,EAAS,EAAGA,EAASpE,EAAYoE,IAOpC,IAHS7C,EAAA4C,EAASzF,EAAQ0I,EAAiBhD,EAASgD,EACpD5F,EAAY9C,GAHMwC,EAAAkD,IAAWpE,EAAa,EAAKoH,EAAiB6E,GAK3DxB,EAAO,EAAGA,EAAOvD,EAASuD,IAAQ,CAkBrC,GAjBIvD,EAAU,GACU0E,EAAA/M,EACb0C,EAAA4C,EAASzF,EAAQ0I,EAAiBhD,EAASgD,EACrCvI,EAAA,IAAI6I,EAAkBjI,EAAKT,OAAOH,aAAa4G,OAAQV,EAAY0F,EAAOgB,EAAc1G,GAChGwC,EAAAT,EAAWkB,UAAUyC,IAENmB,EAAA,KAEZtH,EAAAzG,EAAM0G,WAAa9E,EAAKoH,IAEpCpF,EAAQ,CAAE,EACCL,EAAA,EACEqD,GAHNxB,EAAA,IAAIC,SAASrF,EAAO4B,EAAKoH,IAAKzG,KAAKoE,IAAI,GAAIF,KAGhCV,SAAS,GAC3BxC,IACAuK,EAAiB7E,EAAW5E,aAAe,EAAiB,EAAbuC,EAAiB,EAChEqG,EAAUrG,GAAc,EAAK,KACjBA,GAAc,EAAKyH,KACX9H,EAASgD,GAAmB,EAAK8E,GAC7C,KAAA,kBAGJ,GAAAP,GAA2B,IAATlB,EACd,KAAA,kBAIR,IADAiB,EAA6B,EAAbjH,GACI,EAElB,MADAhF,EAAKoH,KAAOzF,EACN,2BAA6BsK,EAAgB,OAE1B,IAAlBA,KAyBkB,IAAlBA,EAAqB,CAC5B,GAAIC,EAEI,KAAA,kBAaR,GAXAlM,EAAK4L,QAAQc,eACb1M,EAAKoH,KAAOzF,EAGDiB,GAFXA,EAAWrB,EAAkBE,EAAiBuK,IAClCM,EAAAlO,EAAM0G,WAAa9E,EAAKoH,KACFxE,EAAW0J,EAElCjH,EAAA,IAAIE,YAAa3C,EAAWoJ,IAAkB,EAAIpJ,EAAYA,EAAWoJ,EAAepJ,EAAWoJ,GACrG,IAAI9K,WAAWmE,GACjBG,IAAI,IAAItE,WAAW9C,EAAO4B,EAAKoH,IAAKxE,IACjCT,EAAA,IAAI8F,EAAkB5C,GAC5B0D,EAAA,EACApJ,EACF,IAAKyM,EAAM,EAAGA,EAAM7K,EAAiB6K,IAAO,CAC1C,IAAKC,EAAM,EAAGA,EAAM5K,EAAgB4K,IAC9B1M,EAAKmC,KACM1C,EAAA0C,GAAUK,EAAQ4G,MAEjCjH,IAEQA,GAAAC,OAIZ,IAAKqK,EAAM,EAAGA,EAAM7K,EAAiB6K,IAAO,CAC1C,IAAKC,EAAM,EAAGA,EAAM5K,EAAgB4K,IACrBjN,EAAA0C,KAAYK,EAAQ4G,KAEzBjH,GAAAC,EAGd/B,EAAKoH,KAAO2B,EAAIiD,OAMhB,GAHA/G,EAAa0B,EAAagG,gBAAiBT,GAAkBxJ,EAAY,EAAK,EAAIA,EAAW2I,GAC7F9I,EAASoE,EAAaiG,YAAY5K,EAAOL,EAAUsD,EAAYzB,GACnD7B,GAAAgF,EAAayB,gBAAgBnD,GACnB,IAAlBgH,EAMF,GAJAjM,EAAKoH,KAAOzF,EACZ3B,EAAK4L,QAAQiB,iBAGTlN,EACF,IAAKyM,EAAM,EAAGA,EAAM7K,EAAiB6K,IAAO,CAC1C,IAAKC,EAAM,EAAGA,EAAM5K,EAAgB4K,IAC9B1M,EAAKmC,KACM1C,EAAA0C,GAAUoK,EAAiBvL,KAAKoE,IAAI+C,EAAMqE,EAAoBrK,GAAUS,GAAUA,GAEjGT,IAEQA,GAAAC,OAIZ,IAAKqK,EAAM,EAAGA,EAAM7K,EAAiB6K,IAAO,CAC1C,IAAKC,EAAM,EAAGA,EAAM5K,EAAgB4K,IACrBjN,EAAA0C,GAAUoK,EAAiBvL,KAAKoE,IAAI+C,EAAMqE,EAAoBrK,GAAUS,GAAUA,EAC/FT,IAEQA,GAAAC,OAUd,GALA/B,EAAKoH,KAAOzF,EAEZgF,EAAa0C,WAAWjL,EAAO4B,EAAMqB,EAAiBkB,EAAQyI,GACnDrJ,EAAA,EAEPuK,EACF,GAAIvM,EACF,IAAKyM,EAAM,EAAGA,EAAM7K,EAAiB6K,IAAO,CAC1C,IAAKC,EAAM,EAAGA,EAAM5K,EAAgB4K,IAC9B1M,EAAKmC,KACP1C,EAAa0C,GAAUT,EAAgBM,KAAcwK,EAAoBrK,IAE3EA,IAEQA,GAAAC,OAIZ,IAAKqK,EAAM,EAAGA,EAAM7K,EAAiB6K,IAAO,CAC1C,IAAKC,EAAM,EAAGA,EAAM5K,EAAgB4K,IAClCjN,EAAa0C,GAAUT,EAAgBM,KAAcwK,EAAoBrK,GACzEA,IAEQA,GAAAC,UAIPpC,EACP,IAAKyM,EAAM,EAAGA,EAAM7K,EAAiB6K,IAAO,CAC1C,IAAKC,EAAM,EAAGA,EAAM5K,EAAgB4K,IAC9B1M,EAAKmC,KACM1C,EAAA0C,GAAUT,EAAgBM,MAEzCG,IAEQA,GAAAC,OAIZ,IAAKqK,EAAM,EAAGA,EAAM7K,EAAiB6K,IAAO,CAC1C,IAAKC,EAAM,EAAGA,EAAM5K,EAAgB4K,IACrBjN,EAAA0C,KAAYT,EAAgBM,KAEjCG,GAAAC,OAxIhB,GAAImK,EACF,GAAIvM,EACF,IAAKyM,EAAM,EAAGA,EAAM7K,EAAiB6K,IACnC,IAAKC,EAAM,EAAGA,EAAM5K,EAAgB4K,IAC9B1M,EAAKmC,KACM1C,EAAA0C,GAAUqK,EAAoBrK,IAE7CA,SAKJ,IAAKsK,EAAM,EAAGA,EAAM7K,EAAiB6K,IACnC,IAAKC,EAAM,EAAGA,EAAM5K,EAAgB4K,IACrBjN,EAAA0C,GAAUqK,EAAoBrK,GAC3CA,IAKR9B,EAAK4L,QAAQkB,WACb9M,EAAKoH,KAAOzF,GA4HhB8F,EAAU,IAAMoB,IACb7I,EAAAT,OAAOH,aAAeuH,EAAamC,mBAAmB9I,EAAKT,OAAOH,aAAckG,EAAWmC,EAASQ,GAE5G,EAMDpK,eAAgB,SAASmC,GAChB,MAAA,CACLwC,qBAAwBxC,EAAKqH,WAAW7E,qBACxCC,YAAezC,EAAKqH,WAAW5E,YAC/BC,UAAa1C,EAAKqH,WAAW3E,UAC7BxD,OAAUc,EAAKqH,WAAWnI,OAC1BD,MAASe,EAAKqH,WAAWpI,MACzByI,cAAiB1H,EAAKqH,WAAWK,cACjCC,eAAkB3H,EAAKqH,WAAWM,eAClCC,SAAY5H,EAAKqH,WAAWO,SAC5B7G,UAAaf,EAAKqH,WAAWtG,UAC7BlC,UAAa8H,EAAaoG,aAAa/M,EAAKqH,WAAW3E,WACvDC,UAAa3C,EAAK2C,UAClBhD,KAAQK,EAAKL,KAAO,CAClBiD,SAAY5C,EAAKL,KAAKiD,UACpB,KACJrD,OAAU,CACRgB,WAAcP,EAAKT,OAAOgB,WAC1BE,WAAcT,EAAKT,OAAOkB,WAE1BnB,SAAYU,EAAKqH,WAAWS,KAC5BzI,SAAYW,EAAKqH,WAAWQ,KAC5BnJ,YAAesB,EAAKtB,aAGzB,EAEDsO,yBAA0B,SAAShN,EAAM6I,GACnC,IAAAzE,EAAMpE,EAAKqH,WAAWS,KACtBmF,EAASjN,EAAKqH,WAAWQ,KACzBU,EAAYvI,EAAKqH,WAAWkB,UAC5Bd,EAAUzH,EAAKqH,WAAWI,QAC1BnC,EAAYtF,EAAKqH,WAAWnI,OAASc,EAAKqH,WAAWpI,MACrD6D,EAAI,EAAG6F,EAAI,EAAGK,EAAS,EACvBrJ,EAAOK,EAAKT,OAAOC,WACnBJ,EAAeY,EAAKT,OAAOH,aAC/B,GAAIO,EACF,GAAI8H,EAAU,GACZ,GAAIoB,EACF,IAAK/F,EAAI,EAAGA,EAAI2E,EAAS3E,IAGvB,IAFAkG,EAASlG,EAAIwC,EACblB,EAAMmE,EAAUzF,GACX6F,EAAI,EAAGA,EAAIrD,EAAWqD,IACrBhJ,EAAKgJ,KACMvJ,EAAA4J,EAASL,GAAKvE,QAMjC,IAAKuE,EAAI,EAAGA,EAAIrD,EAAWqD,IACrB,GAAAhJ,EAAKgJ,GAEP,IADAK,EAASL,EAAIlB,EACR3E,EAAI,EAAGA,EAAI2E,EAAS3E,IACvB1D,EAAa4J,EAASvB,GAAWc,EAAUzF,QAOnD,IAAK6F,EAAI,EAAGA,EAAIrD,EAAWqD,IACrBhJ,EAAKgJ,KACPvJ,EAAauJ,GAAKvE,QAMpB,GAAAqD,EAAU,GAAKwF,IAAW7I,EAC5B,GAAIyE,EACF,IAAK/F,EAAI,EAAGA,EAAI2E,EAAS3E,IAGvB,IAFAkG,EAASlG,EAAIwC,EACblB,EAAMmE,EAAUzF,GACX6F,EAAI,EAAGA,EAAIrD,EAAWqD,IACZvJ,EAAA4J,EAASL,GAAKvE,OAK/B,IAAKuE,EAAI,EAAGA,EAAIrD,EAAWqD,IAEzB,IADAK,EAASL,EAAIlB,EACR3E,EAAI,EAAGA,EAAI2E,EAAS3E,IACvB1D,EAAa4J,EAASlG,GAAKyF,EAAUzF,QAM3C,IAAK6F,EAAI,EAAGA,EAAIrD,EAAYmC,EAASkB,IACnCvJ,EAAauJ,GAAKvE,CAKzB,EAED8D,iBAAkB,SAASgF,GACrB,IAAAC,EACJ,OAAQD,GACN,KAAK,EACEC,EAAAC,UACL,MACF,KAAK,EACED,EAAAjM,WACL,MACF,KAAK,EACEiM,EAAAE,WACL,MACF,KAAK,EACEF,EAAAG,YACL,MACF,KAAK,EACEH,EAAAI,WACL,MACF,KAAK,EACEJ,EAAAxH,YACL,MACF,KAAK,EAML,QACOwH,EAAArO,mBAJP,KAAK,EACEqO,EAAAK,aAKF,OAAAL,CACR,EAEDJ,aAAc,SAASG,GACjB,IAAAC,EACJ,OAAQD,GACN,KAAK,EACEC,EAAA,KACL,MACF,KAAK,EACEA,EAAA,KACL,MACF,KAAK,EACEA,EAAA,MACL,MACF,KAAK,EACEA,EAAA,MACL,MACF,KAAK,EACEA,EAAA,MACL,MACF,KAAK,EACEA,EAAA,MACL,MACF,KAAK,EAML,QACOA,EAAA,YAJP,KAAK,EACEA,EAAA,MAKF,OAAAA,CACR,EAEDM,kBAAmB,SAASP,EAAG9I,GAC7B,GAAW,MAAPA,EACK,OAAA,EAEL,IAAAsJ,EACJ,OAAQR,GACN,KAAK,EACOQ,EAAAtJ,SAAeA,GAAO,IAChC,MACF,KAAK,EACOsJ,EAAAtJ,GAAO,GAAKA,GAAO,IAC7B,MACF,KAAK,EACOsJ,EAAAtJ,WAAiBA,GAAO,MAClC,MACF,KAAK,EACOsJ,EAAAtJ,GAAO,GAAKA,GAAO,MAC7B,MACF,KAAK,EACOsJ,EAAAtJ,gBAAsBA,GAAO,WACvC,MACF,KAAK,EACOsJ,EAAAtJ,GAAO,GAAKA,GAAO,WAC7B,MACF,KAAK,EACOsJ,EAAAtJ,0BAAkCA,GAAO,qBACnD,MACF,KAAK,EACOsJ,EAAAtJ,2BAAmCA,GAAO,sBACpD,MACF,QACYsJ,GAAA,EAEP,OAAAA,CACR,EAEDtF,gBAAiB,SAAS8E,GACxB,IAAIS,EAAI,EACR,OAAQT,GACN,KAAK,EACL,KAAK,EACCS,EAAA,EACJ,MACF,KAAK,EACL,KAAK,EACCA,EAAA,EACJ,MACF,KAAK,EACL,KAAK,EACL,KAAK,EACCA,EAAA,EACJ,MACF,KAAK,EACCA,EAAA,EACJ,MACF,QACMA,EAAAT,EAED,OAAAS,CACR,EAEDhB,gBAAiB,SAASiB,EAAIC,GAC5B,IAAIX,EAAIU,EACR,OAAQA,GACN,KAAK,EACL,KAAK,EACHV,EAAIU,EAAKC,EACT,MACF,KAAK,EACL,KAAK,EACHX,EAAIU,EAAK,EAAIC,EACb,MACF,KAAK,EAEGX,EADF,IAAMW,EACJD,EAEG,IAAMC,EACT,EAGA,EAEN,MACF,KAAK,EAEGX,EADF,IAAMW,EACJD,EAGAA,EAAK,EAAIC,EAAK,EAEpB,MACF,QACMX,EAAAU,EAGD,OAAAV,CACR,EAEDN,YAAa,SAAS5K,EAAOL,EAAUsD,EAAYzB,GACjD,IAAIsK,EAAO,EACX,OAAQ7I,GACN,KAAK,EACI6I,EAAAtK,EAAK0B,QAAQvD,GACpB,MACF,KAAK,EACImM,EAAAtK,EAAKW,SAASxC,GACrB,MACF,KAAK,EACImM,EAAAtK,EAAKQ,SAASrC,GAAU,GAC/B,MACF,KAAK,EACImM,EAAAtK,EAAK4B,UAAUzD,GAAU,GAChC,MACF,KAAK,EACImM,EAAAtK,EAAKE,SAAS/B,GAAU,GAC/B,MACF,KAAK,EACImM,EAAAtK,EAAKuK,UAAUpM,GAAU,GAChC,MACF,KAAK,EACImM,EAAAtK,EAAKK,WAAWlC,GAAU,GACjC,MACF,KAAK,EACImM,EAAAtK,EAAKI,WAAWjC,GAAU,GACjC,MACF,QACS,KAAA,kDAEJ,OAAAmM,CACR,EAEDhF,mBAAoB,SAASvJ,EAAQ+F,EAAWmC,EAASQ,EAAmB+F,GACtE,IAAAlL,EAAI,EAAGwG,EAAI,EAAG0B,EAAO,EAAG8C,EAAO,EAAGG,EAAO1O,EAC7C,GAAIkI,EAAU,EAEZ,GADOwG,EAAA,IAAIhG,EAAkB3C,EAAYmC,GACrCuG,EACF,IAAKlL,EAAE,EAAGA,EAAEwC,EAAWxC,IAErB,IADOgL,EAAAhL,EACFkI,EAAK,EAAGA,EAAOvD,EAASuD,IAAQ8C,GAAQxI,EACtC2I,EAAAH,GAAQvO,EAAO+J,UAKxB,IAAKxG,EAAE,EAAGA,EAAEwC,EAAWxC,IAErB,IADOgL,EAAAhL,EACFkI,EAAK,EAAGA,EAAOvD,EAASuD,IAAQ8C,GAAQxI,EACtC2I,EAAA3E,KAAO/J,EAAOuO,GAKpB,OAAAG,IAOPlE,EAAW,SAAS3F,EAAKoG,EAAMD,GACjCxC,KAAK3D,IAAMA,EACX2D,KAAKyC,KAAOA,EACZzC,KAAKwC,MAAQA,CACd,EAiMMjE,MA/LW,CAoChB4H,OAAQ,SAAwB9P,EAAkBC,GAGhD,IAAIK,GADJL,EAAUA,GAAW,CAAE,GACGK,YAGtBoE,EAAI,EAAG9C,EAAO,CAAE,EAKpB,GAJKA,EAAAoH,IAAM/I,EAAQI,aAAe,EAClCuB,EAAKT,OAAS,CAAE,EAGXoH,EAAaQ,eAAe/I,EAAO4B,GAAxC,CAIA,IAAIqH,EAAarH,EAAKqH,WAClB5E,EAAc4E,EAAW5E,YACzBwF,EAAoBtB,EAAauB,iBAAiBb,EAAW3E,WAGjE,GAAID,EAAc,EAChB,KAAM,8BAAgCA,EAI3BkE,EAAA8B,SAASrK,EAAO4B,GACzBqH,EAAWK,gBAAkBL,EAAWpI,MAAQoI,EAAWnI,QAAWc,EAAKT,OAAOC,aAC/EQ,EAAAT,OAAOC,WAAanB,EAAQoB,UAG/B,IAAA6F,EAAY+B,EAAWpI,MAAQoI,EAAWnI,OAC9Cc,EAAKT,OAAOH,aAAe,IAAI6I,EAAkB3C,EAAY+B,EAAWI,SAExEzH,EAAK4L,QAAU,CACbuC,SAAU,EACVzB,aAAc,EACdb,IAAK,EACLC,WAAY,EACZgB,SAAU,EACVD,eAAgB,GAEd,IAgDAuB,EAhDAvF,GAAsBxK,EAAQgQ,2BAC9B,GAA6B,IAA7BhH,EAAWK,cAET,GAAAL,EAAWS,OAAST,EAAWQ,KAEpBlB,EAAAqG,yBAAyBhN,EAAM6I,WAErCpG,GAAe,GAAKkE,EAAaqB,kBAAkB5J,EAAO4B,GACpD2G,EAAAqG,yBAAyBhN,EAAM6I,OAEzC,CACH,IAAIrF,EAAO,IAAIC,SAASrF,EAAO4B,EAAKoH,IAAK,GACrCkH,EAAoB9K,EAAKW,SAAS,GAEtC,GADKnE,EAAAoH,MACDkH,EAEF3H,EAAaiC,iBAAiBxK,EAAO4B,EAAMiI,EAAmBY,QAM1D,GAAApG,EAAc,GAAK4E,EAAW3E,WAAa,GAAK/B,KAAK4N,IAAIlH,EAAWtG,UAAY,IAAO,KAAS,CAE9F,IAAAyN,EAAchL,EAAKW,SAAS,GAGhC,GAFKnE,EAAAoH,MACLpH,EAAKkL,WAAasD,EACdA,EAAc,GAAM/L,EAAc,GAAK+L,EAAc,EACvD,KAAM,wBAA0BA,EAE9BA,EAEF7H,EAAa8D,YAAYrM,EAAO4B,EAAMiI,EAAmBY,GAIzDlC,EAAaoF,UAAU3N,EAAO4B,EAAMiI,EAAmBY,QAKzDlC,EAAaoF,UAAU3N,EAAO4B,EAAMiI,EAAmBY,GAM/D7I,EAAK2C,UAAY3C,EAAKoH,IAElB/I,EAAQI,aACV2P,EAAOpO,EAAKqH,WAAWO,SAAWvJ,EAAQI,YAAcuB,EAAKoH,IACzDzG,KAAK4N,IAAIH,IAAS,IAEpBpO,EAAK2C,UAAYtE,EAAQI,YAAcuB,EAAKqH,WAAWO,YAIlDwG,EAAApO,EAAKqH,WAAWO,SAAW5H,EAAKoH,IACnCzG,KAAK4N,IAAIH,IAAS,IAEfpO,EAAA2C,UAAY3C,EAAKqH,WAAWO,WAIrC,IAAI5I,EAAS,CACXC,MAAOoI,EAAWpI,MAClBC,OAAQmI,EAAWnI,OACnBC,UAAWa,EAAKT,OAAOH,aACvBC,SAAUgI,EAAWQ,KACrBvI,SAAU+H,EAAWS,KACrB2G,gBAAiBpH,EAAWK,cAC5BgH,SAAUrH,EAAWI,QACrBkH,SAAU,CACRtG,UAAWhB,EAAWgB,UACtBE,UAAWlB,EAAWkB,WAExB9I,SAAUO,EAAKT,OAAOC,YAMpB,GAAAQ,EAAKT,OAAOC,YAAcmH,EAAa8G,kBAAkBpG,EAAW3E,UAAWhE,GAAc,CAC3F,IAAAiB,EAAOK,EAAKT,OAAOC,WACvB,IAAKsD,EAAI,EAAGA,EAAIwC,EAAWxC,IACpBnD,EAAKmD,KACD9D,EAAAG,UAAU2D,GAAKpE,GAG1BM,EAAON,YAAcA,EAMhB,OAJPsB,EAAKtB,YAAcA,EACfL,EAAQwB,iBACHb,EAAAc,SAAW6G,EAAa9I,eAAemC,IAEzChB,EACR,EAED4P,aAAc,SAAwBxQ,GAM7B,IALP,IAAIyQ,EAAQ,EACR/L,EAAI,EACJgL,EAAO,CACXA,IAAW,EACXA,OAAc,CAAE,GACThL,EAAI1E,EAAM0G,WAAa,IACf6B,EAAAQ,eAAe/I,EAAO0P,GACnChL,GAAKgL,EAAKzG,WAAWO,SACrBiH,IACAf,EAAK1G,IAAMtE,EAEN,OAAA+L,GAKf,CAhrDgC,GAkrD1BC,GACE7Q,EAAI,IAAIsH,YAAY,GACpBrH,EAAI,IAAIgD,WAAWjD,GACf,IAAI0H,YAAY1H,GACtB,GAAK,EACS,IAATC,EAAE,IAGP6Q,EAAO,CAoBTb,OAAQ,SAASc,EAAa3Q,GAC5B,IAAKyQ,EACG,KAAA,sCAGJ,IAGAG,EAAMC,EAHNzQ,GADJJ,EAAUA,GAAW,CAAE,GACGI,aAAe,EACrC0E,EAAa,IAAIjC,WAAW8N,EAAavQ,EAAa,IACtD+D,EAAuBY,OAAOC,aAAaC,MAAM,KAAMH,GAEvD,GAAgC,cAAhCX,EAAqBe,OAChBpF,EAAAA,EACQ+Q,EAAA,UAEiC,UAAzC1M,EAAqB2M,UAAU,EAAG,GAKzC,KAAM,sCAAwC3M,EAJvCyM,EAAA3I,EACQ4I,EAAA,EAiBjB,IAXI,IAA+C3Q,EAAiC6Q,EAAU3P,EAqD1FqD,EAAGwG,EAAGhE,EArDN+J,EAAS,EAAGC,EAAMN,EAAYlK,WAAa,GAAqByK,EAAY,GAC5EC,EAAoB,CACtBvQ,MAAO,EACPC,OAAQ,EACRK,OAAQ,GACRV,UAAWR,EAAQQ,UACnBc,KAAM,KACN8P,WAAY,IAEVC,EAAsB,EAEnBjR,EAAc6Q,GAAK,CACpB,IAAAtQ,EAASiQ,EAAKf,OAAOc,EAAa,CACpCvQ,cACAF,kBACAkB,WACAV,WAAuB,IAAXsQ,EACZ3P,kBAA8B,IAAX2P,EACnBxP,gBAAgB,EAChBwO,2BAA4BhQ,EAAQgQ,2BACpCxP,UAAWR,EAAQQ,WAAa,KAChCH,YAAaL,EAAQK,aAAe,OAGtCD,EAAcO,EAAOc,SAAS6C,UAC9BlD,EAAWT,EAAOS,SACH,IAAX4P,IACF9Q,EAAkBS,EAAOT,gBACzBiR,EAAkBvQ,MAAQD,EAAOC,MACjCuQ,EAAkBtQ,OAASF,EAAOE,OAChBsQ,EAAAd,SAAW1P,EAAO0P,UAAY,EAEhDc,EAAkB3Q,UAAYG,EAAOH,WAAaG,EAAOc,SAASjB,UAClE2Q,EAAkB7P,KAAOF,GAEvByP,EAAe,IACbzP,GACF8P,EAAUI,KAAKlQ,GAEbT,EAAOc,SAASH,MAAQX,EAAOc,SAASH,KAAKiD,SAAW,GAC1D8M,KAIJL,IACkBG,EAAAjQ,OAAOoQ,KAAK3Q,EAAOG,WACrCqQ,EAAkBC,WAAWE,KAAK,CAChCtQ,SAAUL,EAAOK,SACjBC,SAAUN,EAAOM,SACjBZ,YAAaM,EAAON,YACpBiQ,SAAU3P,EAAO2P,WAIjB,GAAAO,EAAe,GAAKQ,EAAsB,EAAG,CAK/C,IAJYpK,EAAAkK,EAAkBvQ,MAAQuQ,EAAkBtQ,OACxDsQ,EAAkBD,UAAYA,GACnB9P,EAAA,IAAIyB,WAAWoE,IACjBE,IAAI+J,EAAU,IAClBzM,EAAI,EAAGA,EAAIyM,EAAUlL,OAAQvB,IAEhC,IADAsM,EAAWG,EAAUzM,GAChBwG,EAAI,EAAGA,EAAIhE,EAAWgE,IACzB7J,EAAS6J,GAAK7J,EAAS6J,GAAK8F,EAAS9F,GAGzCkG,EAAkB/P,SAAWA,EAGxB,OAAA+P,IAS+BI,EAAOC,QAG/CD,EAAAC,QAAiBd,EAIjBhH,KAAKgH,KAAOA,EAhvEhB,wBChCA,IAAIe,EACAC,EACAC,EACJ,MAAMC,EAAgB,CACpBC,IAAK,CACHC,gCAAiC,SAAUC,GACzCJ,EAAO,IAAI9O,WAAW6O,EAASF,QAAQQ,OAAOrK,OACpD,IAyEA,MAAMsK,EAAO,mksCC1EAC,EAAO,IDOpB,MACE,IAAAT,GACE,OAAIA,IAGKA,EAFY,oBAAVU,MAEFA,MAAM,gCAAkCF,GAAMG,MAAiBC,GAAAA,EAASC,gBAAeF,MAAoBE,GAAAC,YAAYC,YAAYF,EAAaV,KAAgBQ,KAAK1I,KAAK+I,OAG1KF,YAAYC,YAAYE,OAAOC,KAAKV,EAAM,UAAWL,GAAeQ,KAAK1I,KAAK+I,OAEhFhB,EACX,CACE,KAAAgB,CAAM9R,GACJ+Q,EAAW/Q,EAAO+Q,SACJE,EAAAC,IAAIC,gCAAgC,EACtD,CAEE,MAAAjC,CAAO+C,EAAOC,EAAmB,GAC/B,IAAKnB,EAAgB,MAAA,IAAIoB,MAAM,+CAE/B,MAAMC,EAAiBH,EAAMnM,WACvBuM,EAAgBtB,EAASF,QAAQyB,OAAOF,GACzCpB,EAAAxK,IAAIyL,EAAOI,GAEhBH,EAAmBA,GAAoBlQ,OAAO+O,EAASF,QAAQ0B,0BAA0BF,EAAeD,IACxG,MAAMI,EAAkBzB,EAASF,QAAQyB,OAAOJ,GAC1CO,EAAa1B,EAASF,QAAQ6B,gBAAgBF,EAAiBN,EAAkBG,EAAeD,GAEhGO,EAAM3B,EAAK4B,MAAMJ,EAAiBA,EAAkBC,GAGnD,OAFE1B,EAAAF,QAAQgC,KAAKR,GACbtB,EAAAF,QAAQgC,KAAKL,GACfG,CACX,GCrCe,MAAMG,UAAoBC,EACvC,WAAAC,CAAYC,GACHC,QAEPnK,KAAKoK,yBAAmE,IAAtCF,EAAcG,oBAAsCH,EAAcG,oBAAsB,EAC1HrK,KAAKsK,qBAA2D,IAAlCJ,EAAcK,gBAAkCL,EAAcK,gBAAkB,EAE9GvK,KAAKwK,eAAiBN,EAAcO,eAAeA,EAAeC,eACtE,CAEE,WAAAC,CAAY1M,GACV,OAAQ+B,KAAKwK,gBACX,KAAKI,EAAmBC,KACtB,MACF,KAAKD,EAAmBE,QACtB7M,EAAS8M,EAAQ,IAAI5R,WAAW8E,IAASA,OACzC,MACF,KAAK2M,EAAmBI,UACtB/M,EAASuK,EAAKrC,OAAO,IAAIhN,WAAW8E,IAASA,OAC7C,MACF,QACE,MAAM,IAAImL,MAAM,8DAA8DpJ,KAAKwK,kBAKvF,OAFmBxD,EAAKb,OAAOlI,EAAQ,CAAEqI,2BAAyD,IAA7BtG,KAAKoK,sBAC9C5S,OAAO,GACnByG,MACpB","x_google_ignoreList":[0,1,2]}