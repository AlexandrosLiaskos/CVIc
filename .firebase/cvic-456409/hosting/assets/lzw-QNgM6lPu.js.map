{"version":3,"file":"lzw-QNgM6lPu.js","sources":["../../node_modules/geotiff/dist-module/compression/lzw.js"],"sourcesContent":["import BaseDecoder from './basedecoder.js';\n\nconst MIN_BITS = 9;\nconst CLEAR_CODE = 256; // clear code\nconst EOI_CODE = 257; // end of information\nconst MAX_BYTELENGTH = 12;\n\nfunction getByte(array, position, length) {\n  const d = position % 8;\n  const a = Math.floor(position / 8);\n  const de = 8 - d;\n  const ef = (position + length) - ((a + 1) * 8);\n  let fg = (8 * (a + 2)) - (position + length);\n  const dg = ((a + 2) * 8) - position;\n  fg = Math.max(0, fg);\n  if (a >= array.length) {\n    console.warn('ran off the end of the buffer before finding EOI_CODE (end on input code)');\n    return EOI_CODE;\n  }\n  let chunk1 = array[a] & ((2 ** (8 - d)) - 1);\n  chunk1 <<= (length - de);\n  let chunks = chunk1;\n  if (a + 1 < array.length) {\n    let chunk2 = array[a + 1] >>> fg;\n    chunk2 <<= Math.max(0, (length - dg));\n    chunks += chunk2;\n  }\n  if (ef > 8 && a + 2 < array.length) {\n    const hi = ((a + 3) * 8) - (position + length);\n    const chunk3 = array[a + 2] >>> hi;\n    chunks += chunk3;\n  }\n  return chunks;\n}\n\nfunction appendReversed(dest, source) {\n  for (let i = source.length - 1; i >= 0; i--) {\n    dest.push(source[i]);\n  }\n  return dest;\n}\n\nfunction decompress(input) {\n  const dictionaryIndex = new Uint16Array(4093);\n  const dictionaryChar = new Uint8Array(4093);\n  for (let i = 0; i <= 257; i++) {\n    dictionaryIndex[i] = 4096;\n    dictionaryChar[i] = i;\n  }\n  let dictionaryLength = 258;\n  let byteLength = MIN_BITS;\n  let position = 0;\n\n  function initDictionary() {\n    dictionaryLength = 258;\n    byteLength = MIN_BITS;\n  }\n  function getNext(array) {\n    const byte = getByte(array, position, byteLength);\n    position += byteLength;\n    return byte;\n  }\n  function addToDictionary(i, c) {\n    dictionaryChar[dictionaryLength] = c;\n    dictionaryIndex[dictionaryLength] = i;\n    dictionaryLength++;\n    return dictionaryLength - 1;\n  }\n  function getDictionaryReversed(n) {\n    const rev = [];\n    for (let i = n; i !== 4096; i = dictionaryIndex[i]) {\n      rev.push(dictionaryChar[i]);\n    }\n    return rev;\n  }\n\n  const result = [];\n  initDictionary();\n  const array = new Uint8Array(input);\n  let code = getNext(array);\n  let oldCode;\n  while (code !== EOI_CODE) {\n    if (code === CLEAR_CODE) {\n      initDictionary();\n      code = getNext(array);\n      while (code === CLEAR_CODE) {\n        code = getNext(array);\n      }\n\n      if (code === EOI_CODE) {\n        break;\n      } else if (code > CLEAR_CODE) {\n        throw new Error(`corrupted code at scanline ${code}`);\n      } else {\n        const val = getDictionaryReversed(code);\n        appendReversed(result, val);\n        oldCode = code;\n      }\n    } else if (code < dictionaryLength) {\n      const val = getDictionaryReversed(code);\n      appendReversed(result, val);\n      addToDictionary(oldCode, val[val.length - 1]);\n      oldCode = code;\n    } else {\n      const oldVal = getDictionaryReversed(oldCode);\n      if (!oldVal) {\n        throw new Error(`Bogus entry. Not in dictionary, ${oldCode} / ${dictionaryLength}, position: ${position}`);\n      }\n      appendReversed(result, oldVal);\n      result.push(oldVal[oldVal.length - 1]);\n      addToDictionary(oldCode, oldVal[oldVal.length - 1]);\n      oldCode = code;\n    }\n\n    if (dictionaryLength + 1 >= (2 ** byteLength)) {\n      if (byteLength === MAX_BYTELENGTH) {\n        oldCode = undefined;\n      } else {\n        byteLength++;\n      }\n    }\n    code = getNext(array);\n  }\n  return new Uint8Array(result);\n}\n\nexport default class LZWDecoder extends BaseDecoder {\n  decodeBlock(buffer) {\n    return decompress(buffer, false).buffer;\n  }\n}\n"],"names":["appendReversed","dest","source","i","length","push","decompress","input","dictionaryIndex","Uint16Array","dictionaryChar","Uint8Array","dictionaryLength","byteLength","position","initDictionary","getNext","array","byte","d","a","Math","floor","de","ef","fg","dg","max","console","warn","chunk1","chunks","chunk2","hi","getByte","addToDictionary","c","getDictionaryReversed","n","rev","result","oldCode","code","Error","val","oldVal","LZWDecoder","BaseDecoder","decodeBlock","buffer"],"mappings":"8CAmCA,SAASA,EAAeC,EAAMC,GAC5B,IAAA,IAASC,EAAID,EAAOE,OAAS,EAAGD,GAAK,EAAGA,IACjCF,EAAAI,KAAKH,EAAOC,IAEZ,OAAAF,CACT,CAEA,SAASK,EAAWC,GACZ,MAAAC,EAAkB,IAAIC,YAAY,MAClCC,EAAiB,IAAIC,WAAW,MACtC,IAAA,IAASR,EAAI,EAAGA,GAAK,IAAKA,IACxBK,EAAgBL,GAAK,KACrBO,EAAeP,GAAKA,EAEtB,IAAIS,EAAmB,IACnBC,EAhDW,EAiDXC,EAAW,EAEf,SAASC,IACYH,EAAA,IACNC,EArDA,CAsDjB,CACE,SAASG,EAAQC,GACf,MAAMC,EAnDV,SAAiBD,EAAOH,EAAUV,GAChC,MAAMe,EAAIL,EAAW,EACfM,EAAIC,KAAKC,MAAMR,EAAW,GAC1BS,EAAK,EAAIJ,EACTK,EAAMV,EAAWV,EAAqB,GAATgB,EAAI,GACvC,IAAIK,EAAM,GAAKL,EAAI,IAAON,EAAWV,GAC/B,MAAAsB,EAAgB,GAATN,EAAI,GAAUN,EAEvB,GADCW,EAAAJ,KAAKM,IAAI,EAAGF,GACbL,GAAKH,EAAMb,OAEN,OADPwB,QAAQC,KAAK,6EAZA,IAef,IAAIC,EAASb,EAAMG,GAAO,IAAM,EAAID,GAAM,EAC1CW,IAAY1B,EAASmB,EACrB,IAAIQ,EAASD,EACT,GAAAV,EAAI,EAAIH,EAAMb,OAAQ,CACxB,IAAI4B,EAASf,EAAMG,EAAI,KAAOK,EAC9BO,IAAWX,KAAKM,IAAI,EAAIvB,EAASsB,GACvBK,GAAAC,CACd,CACE,GAAIR,EAAK,GAAKJ,EAAI,EAAIH,EAAMb,OAAQ,CAClC,MAAM6B,EAAgB,GAATb,EAAI,IAAWN,EAAWV,GAE7B2B,GADKd,EAAMG,EAAI,KAAOa,CAEpC,CACS,OAAAF,CACT,CAyBiBG,CAAQjB,EAAOH,EAAUD,GAE/B,OADKC,GAAAD,EACLK,CACX,CACW,SAAAiB,EAAgBhC,EAAGiC,GAI1B,OAHA1B,EAAeE,GAAoBwB,EACnC5B,EAAgBI,GAAoBT,EACpCS,IACOA,EAAmB,CAC9B,CACE,SAASyB,EAAsBC,GAC7B,MAAMC,EAAM,GACZ,IAAA,IAASpC,EAAImC,EAAS,OAANnC,EAAYA,EAAIK,EAAgBL,GAC1CoC,EAAAlC,KAAKK,EAAeP,IAEnB,OAAAoC,CACX,CAEE,MAAMC,EAAS,GACCzB,IACV,MAAAE,EAAQ,IAAIN,WAAWJ,GACzB,IACAkC,EADAC,EAAO1B,EAAQC,GAEnB,KA7Ee,MA6ERyB,GAAmB,CACxB,GA/Ee,MA+EXA,EAAqB,CAGvB,IAFgB3B,IAChB2B,EAAO1B,EAAQC,GAjFF,MAkFNyB,GACLA,EAAO1B,EAAQC,GAGjB,GArFW,MAqFPyB,EACF,MACR,GAAiBA,EAxFE,IAyFX,MAAM,IAAIC,MAAM,8BAA8BD,KAG9C1C,EAAewC,EADHH,EAAsBK,IAExBD,EAAAC,CAElB,MAAA,GAAeA,EAAO9B,EAAkB,CAC5B,MAAAgC,EAAMP,EAAsBK,GAClC1C,EAAewC,EAAQI,GACvBT,EAAgBM,EAASG,EAAIA,EAAIxC,OAAS,IAChCqC,EAAAC,CAChB,KAAW,CACC,MAAAG,EAASR,EAAsBI,GACrC,IAAKI,EACG,MAAA,IAAIF,MAAM,mCAAmCF,OAAa7B,gBAA+BE,KAEjGd,EAAewC,EAAQK,GACvBL,EAAOnC,KAAKwC,EAAOA,EAAOzC,OAAS,IACnC+B,EAAgBM,EAASI,EAAOA,EAAOzC,OAAS,IACtCqC,EAAAC,CAChB,CAEQ9B,EAAmB,GAAM,GAAKC,IA7Gf,KA8GbA,EACQ4B,OAAA,EAEV5B,KAGJ6B,EAAO1B,EAAQC,EACnB,CACS,OAAA,IAAIN,WAAW6B,EACxB,CAEe,MAAMM,UAAmBC,EACtC,WAAAC,CAAYC,GACH,OAAA3C,EAAW2C,GAAeA,MACrC","x_google_ignoreList":[0]}