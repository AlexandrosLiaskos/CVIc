function e(e,t){let r=e.length-t,n=0;do{for(let r=t;r>0;r--)e[n+t]+=e[n],n++;r-=t}while(r>0)}function t(e,t,r){let n=0,o=e.length;const i=o/r;for(;o>t;){for(let r=t;r>0;--r)e[n+t]+=e[n],++n;o-=t}const l=e.slice();for(let a=0;a<i;++a)for(let t=0;t<r;++t)e[r*a+t]=l[(r-t-1)*i+a]}class r{async decode(r,n){const o=await this.decodeBlock(n),i=r.Predictor||1;if(1!==i){const n=!r.StripOffsets;return function(r,n,o,i,l,a){if(1===n)return r;for(let e=0;e<l.length;++e){if(l[e]%8!=0)throw new Error("When decoding with predictor, only multiple of 8 bits are supported.");if(l[e]!==l[0])throw new Error("When decoding with predictor, all samples must have the same size.")}const s=l[0]/8,c=2===a?1:l.length;for(let h=0;h<i&&!(h*c*o*s>=r.byteLength);++h){let i;if(2===n){switch(l[0]){case 8:i=new Uint8Array(r,h*c*o*s,c*o*s);break;case 16:i=new Uint16Array(r,h*c*o*s,c*o*s/2);break;case 32:i=new Uint32Array(r,h*c*o*s,c*o*s/4);break;default:throw new Error(`Predictor 2 not allowed with ${l[0]} bits per sample.`)}e(i,c)}else 3===n&&(i=new Uint8Array(r,h*c*o*s,c*o*s),t(i,c,s))}return r}(o,i,n?r.TileWidth:r.ImageWidth,n?r.TileLength:r.RowsPerStrip||r.ImageLength,r.BitsPerSample,r.PlanarConfiguration)}return o}}export{r as B};
//# sourceMappingURL=basedecoder-07ibxAr6.js.map
